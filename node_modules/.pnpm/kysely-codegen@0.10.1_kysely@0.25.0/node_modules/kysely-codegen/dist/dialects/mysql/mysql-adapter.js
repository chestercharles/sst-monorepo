"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MysqlAdapter = void 0;
const adapter_1 = require("../../adapter");
const constants_1 = require("../../constants");
const nodes_1 = require("../../nodes");
const column_type_node_1 = require("../../nodes/column-type-node");
class MysqlAdapter extends adapter_1.Adapter {
    constructor() {
        super(...arguments);
        this.definitions = {
            Decimal: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('string'), new nodes_1.UnionExpressionNode([
                new nodes_1.IdentifierNode('string'),
                new nodes_1.IdentifierNode('number'),
            ])),
            Geometry: new nodes_1.UnionExpressionNode([
                new nodes_1.IdentifierNode('LineString'),
                new nodes_1.IdentifierNode('Point'),
                new nodes_1.IdentifierNode('Polygon'),
                new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('Geometry')),
            ]),
            Json: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('JsonValue'), new nodes_1.IdentifierNode('string'), new nodes_1.IdentifierNode('string')),
            JsonArray: constants_1.JSON_ARRAY_DEFINITION,
            JsonObject: constants_1.JSON_OBJECT_DEFINITION,
            JsonPrimitive: constants_1.JSON_PRIMITIVE_DEFINITION,
            JsonValue: constants_1.JSON_VALUE_DEFINITION,
            LineString: new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('Point')),
            Point: new nodes_1.ObjectExpressionNode([
                new nodes_1.PropertyNode('x', new nodes_1.IdentifierNode('number')),
                new nodes_1.PropertyNode('y', new nodes_1.IdentifierNode('number')),
            ]),
            Polygon: new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('LineString')),
        };
        // These types have been found through experimentation in Adminer.
        this.scalars = {
            bigint: new nodes_1.IdentifierNode('number'),
            binary: new nodes_1.IdentifierNode('Buffer'),
            bit: new nodes_1.IdentifierNode('Buffer'),
            blob: new nodes_1.IdentifierNode('Buffer'),
            char: new nodes_1.IdentifierNode('string'),
            date: new nodes_1.IdentifierNode('Date'),
            datetime: new nodes_1.IdentifierNode('Date'),
            decimal: new nodes_1.IdentifierNode('Decimal'),
            double: new nodes_1.IdentifierNode('number'),
            float: new nodes_1.IdentifierNode('number'),
            geomcollection: new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('Geometry')),
            geometry: new nodes_1.IdentifierNode('Geometry'),
            int: new nodes_1.IdentifierNode('number'),
            json: new nodes_1.IdentifierNode('Json'),
            linestring: new nodes_1.IdentifierNode('LineString'),
            longblob: new nodes_1.IdentifierNode('Buffer'),
            longtext: new nodes_1.IdentifierNode('string'),
            mediumblob: new nodes_1.IdentifierNode('Buffer'),
            mediumint: new nodes_1.IdentifierNode('number'),
            mediumtext: new nodes_1.IdentifierNode('string'),
            multilinestring: new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('LineString')),
            multipoint: new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('Point')),
            multipolygon: new nodes_1.ArrayExpressionNode(new nodes_1.IdentifierNode('Polygon')),
            point: new nodes_1.IdentifierNode('Point'),
            polygon: new nodes_1.IdentifierNode('Polygon'),
            set: new nodes_1.IdentifierNode('unknown'),
            smallint: new nodes_1.IdentifierNode('number'),
            text: new nodes_1.IdentifierNode('string'),
            time: new nodes_1.IdentifierNode('string'),
            timestamp: new nodes_1.IdentifierNode('Date'),
            tinyblob: new nodes_1.IdentifierNode('Buffer'),
            tinyint: new nodes_1.IdentifierNode('number'),
            tinytext: new nodes_1.IdentifierNode('string'),
            varbinary: new nodes_1.IdentifierNode('Buffer'),
            varchar: new nodes_1.IdentifierNode('string'),
            year: new nodes_1.IdentifierNode('number'),
        };
    }
}
exports.MysqlAdapter = MysqlAdapter;
//# sourceMappingURL=mysql-adapter.js.map