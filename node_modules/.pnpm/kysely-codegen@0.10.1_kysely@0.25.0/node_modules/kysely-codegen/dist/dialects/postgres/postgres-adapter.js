"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresAdapter = void 0;
const adapter_1 = require("../../adapter");
const constants_1 = require("../../constants");
const nodes_1 = require("../../nodes");
const column_type_node_1 = require("../../nodes/column-type-node");
class PostgresAdapter extends adapter_1.Adapter {
    constructor() {
        super(...arguments);
        // From https://node-postgres.com/features/types:
        // "node-postgres will convert a database type to a JavaScript string if it doesn't have a
        // registered type parser for the database type. Furthermore, you can send any type to the
        // PostgreSQL server as a string and node-postgres will pass it through without modifying it in
        // any way."
        this.defaultScalar = new nodes_1.IdentifierNode('string');
        this.defaultSchema = 'public';
        this.definitions = {
            Circle: new nodes_1.ObjectExpressionNode([
                new nodes_1.PropertyNode('x', new nodes_1.IdentifierNode('number')),
                new nodes_1.PropertyNode('y', new nodes_1.IdentifierNode('number')),
                new nodes_1.PropertyNode('radius', new nodes_1.IdentifierNode('number')),
            ]),
            Int8: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('string'), new nodes_1.UnionExpressionNode([
                new nodes_1.IdentifierNode('string'),
                new nodes_1.IdentifierNode('number'),
                new nodes_1.IdentifierNode('bigint'),
            ])),
            Interval: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('IPostgresInterval'), new nodes_1.UnionExpressionNode([
                new nodes_1.IdentifierNode('IPostgresInterval'),
                new nodes_1.IdentifierNode('number'),
            ])),
            Json: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('JsonValue'), new nodes_1.IdentifierNode('string'), new nodes_1.IdentifierNode('string')),
            JsonArray: constants_1.JSON_ARRAY_DEFINITION,
            JsonObject: constants_1.JSON_OBJECT_DEFINITION,
            JsonPrimitive: constants_1.JSON_PRIMITIVE_DEFINITION,
            JsonValue: constants_1.JSON_VALUE_DEFINITION,
            Numeric: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('string'), new nodes_1.UnionExpressionNode([
                new nodes_1.IdentifierNode('string'),
                new nodes_1.IdentifierNode('number'),
            ])),
            Point: new nodes_1.ObjectExpressionNode([
                new nodes_1.PropertyNode('x', new nodes_1.IdentifierNode('number')),
                new nodes_1.PropertyNode('y', new nodes_1.IdentifierNode('number')),
            ]),
            Timestamp: new column_type_node_1.ColumnType(new nodes_1.IdentifierNode('Date'), new nodes_1.UnionExpressionNode([
                new nodes_1.IdentifierNode('Date'),
                new nodes_1.IdentifierNode('string'),
            ])),
        };
        this.imports = {
            IPostgresInterval: new nodes_1.ModuleReferenceNode('postgres-interval'),
        };
        // These types have been found through experimentation in Adminer and in the 'pg' source code.
        this.scalars = {
            bit: new nodes_1.IdentifierNode('string'),
            bool: new nodes_1.IdentifierNode('boolean'),
            box: new nodes_1.IdentifierNode('string'),
            bpchar: new nodes_1.IdentifierNode('string'),
            bytea: new nodes_1.IdentifierNode('Buffer'),
            cidr: new nodes_1.IdentifierNode('string'),
            circle: new nodes_1.IdentifierNode('Circle'),
            date: new nodes_1.IdentifierNode('Timestamp'),
            float4: new nodes_1.IdentifierNode('number'),
            float8: new nodes_1.IdentifierNode('number'),
            inet: new nodes_1.IdentifierNode('string'),
            int2: new nodes_1.IdentifierNode('number'),
            int4: new nodes_1.IdentifierNode('number'),
            int8: new nodes_1.IdentifierNode('Int8'),
            interval: new nodes_1.IdentifierNode('Interval'),
            json: new nodes_1.IdentifierNode('Json'),
            jsonb: new nodes_1.IdentifierNode('Json'),
            line: new nodes_1.IdentifierNode('string'),
            lseg: new nodes_1.IdentifierNode('string'),
            macaddr: new nodes_1.IdentifierNode('string'),
            money: new nodes_1.IdentifierNode('string'),
            numeric: new nodes_1.IdentifierNode('Numeric'),
            oid: new nodes_1.IdentifierNode('number'),
            path: new nodes_1.IdentifierNode('string'),
            point: new nodes_1.IdentifierNode('Point'),
            polygon: new nodes_1.IdentifierNode('string'),
            text: new nodes_1.IdentifierNode('string'),
            time: new nodes_1.IdentifierNode('string'),
            timestamp: new nodes_1.IdentifierNode('Timestamp'),
            timestamptz: new nodes_1.IdentifierNode('Timestamp'),
            tsquery: new nodes_1.IdentifierNode('string'),
            tsvector: new nodes_1.IdentifierNode('string'),
            txid_snapshot: new nodes_1.IdentifierNode('string'),
            uuid: new nodes_1.IdentifierNode('string'),
            varbit: new nodes_1.IdentifierNode('string'),
            varchar: new nodes_1.IdentifierNode('string'),
            xml: new nodes_1.IdentifierNode('string'),
        };
    }
}
exports.PostgresAdapter = PostgresAdapter;
//# sourceMappingURL=postgres-adapter.js.map