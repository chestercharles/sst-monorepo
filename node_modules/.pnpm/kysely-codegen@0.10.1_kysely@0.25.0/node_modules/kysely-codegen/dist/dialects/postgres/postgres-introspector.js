"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PostgresIntrospector_instances, _PostgresIntrospector_createDatabaseMetadata, _PostgresIntrospector_introspectEnums;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgresIntrospector = void 0;
const collections_1 = require("../../collections");
const introspector_1 = require("../../introspector");
const metadata_1 = require("../../metadata");
class PostgresIntrospector extends introspector_1.Introspector {
    constructor(adapter) {
        super();
        _PostgresIntrospector_instances.add(this);
        this.adapter = adapter;
    }
    async introspect(options) {
        const tables = await this.getTables(options);
        const enums = await __classPrivateFieldGet(this, _PostgresIntrospector_instances, "m", _PostgresIntrospector_introspectEnums).call(this, options.db);
        return __classPrivateFieldGet(this, _PostgresIntrospector_instances, "m", _PostgresIntrospector_createDatabaseMetadata).call(this, tables, enums);
    }
}
exports.PostgresIntrospector = PostgresIntrospector;
_PostgresIntrospector_instances = new WeakSet(), _PostgresIntrospector_createDatabaseMetadata = function _PostgresIntrospector_createDatabaseMetadata(tables, enums) {
    const tablesMetadata = tables.map((table) => ({
        ...table,
        columns: table.columns.map((column) => {
            const isArray = column.dataType.startsWith('_');
            return {
                ...column,
                dataType: isArray ? column.dataType.slice(1) : column.dataType,
                dataTypeSchema: column.dataTypeSchema,
                enumValues: enums.get(`${column.dataTypeSchema ?? this.adapter.defaultSchema}.${column.dataType}`),
                isArray,
            };
        }),
    }));
    return new metadata_1.DatabaseMetadata(tablesMetadata, enums);
}, _PostgresIntrospector_introspectEnums = async function _PostgresIntrospector_introspectEnums(db) {
    const enums = new collections_1.EnumCollection();
    const rows = await db
        .withoutPlugins()
        .selectFrom('pg_type as type')
        .innerJoin('pg_enum as enum', 'type.oid', 'enum.enumtypid')
        .innerJoin('pg_catalog.pg_namespace as namespace', 'namespace.oid', 'type.typnamespace')
        .select([
        'namespace.nspname as schemaName',
        'type.typname as enumName',
        'enum.enumlabel as enumValue',
    ])
        .execute();
    for (const row of rows) {
        enums.add(`${row.schemaName}.${row.enumName}`, row.enumValue);
    }
    return enums;
};
//# sourceMappingURL=postgres-introspector.js.map