import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  IAMClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../IAMClient";
import { TagServerCertificateRequest } from "../models/models_0";
export { __MetadataBearer, $Command };
export interface TagServerCertificateCommandInput
  extends TagServerCertificateRequest {}
export interface TagServerCertificateCommandOutput extends __MetadataBearer {}
export declare class TagServerCertificateCommand extends $Command<
  TagServerCertificateCommandInput,
  TagServerCertificateCommandOutput,
  IAMClientResolvedConfig
> {
  readonly input: TagServerCertificateCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: TagServerCertificateCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: IAMClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<
    TagServerCertificateCommandInput,
    TagServerCertificateCommandOutput
  >;
  private serialize;
  private deserialize;
}
