import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  IoTClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../IoTClient";
import {
  CreateKeysAndCertificateRequest,
  CreateKeysAndCertificateResponse,
} from "../models/models_0";
export { __MetadataBearer, $Command };
export interface CreateKeysAndCertificateCommandInput
  extends CreateKeysAndCertificateRequest {}
export interface CreateKeysAndCertificateCommandOutput
  extends CreateKeysAndCertificateResponse,
    __MetadataBearer {}
export declare class CreateKeysAndCertificateCommand extends $Command<
  CreateKeysAndCertificateCommandInput,
  CreateKeysAndCertificateCommandOutput,
  IoTClientResolvedConfig
> {
  readonly input: CreateKeysAndCertificateCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: CreateKeysAndCertificateCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: IoTClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<
    CreateKeysAndCertificateCommandInput,
    CreateKeysAndCertificateCommandOutput
  >;
  private serialize;
  private deserialize;
}
