import { IterableContainer, NonEmptyArray } from './_types';
type Chunked<T extends IterableContainer> = T[number] extends never ? [] : T extends readonly [unknown, ...Array<unknown>] | readonly [...Array<unknown>, unknown] ? NonEmptyArray<NonEmptyArray<T[number]>> : Array<NonEmptyArray<T[number]>>;
export declare function chunk<T extends IterableContainer>(array: T, size: number): Chunked<T>;
export declare function chunk<T extends IterableContainer>(size: number): (array: T) => Chunked<T>;
export {};
//# sourceMappingURL=chunk.d.ts.map