import { Pred, PredIndexedOptional, PredIndexed } from './_types';
export declare function findIndex<T>(array: ReadonlyArray<T>, fn: Pred<T, boolean>): number;
export declare function findIndex<T>(fn: Pred<T, boolean>): (array: ReadonlyArray<T>) => number;
export declare namespace findIndex {
    function indexed<T>(array: ReadonlyArray<T>, fn: PredIndexed<T, boolean>): number;
    function indexed<T>(fn: PredIndexed<T, boolean>): (array: ReadonlyArray<T>) => number;
    const lazy: (<T>(fn: PredIndexedOptional<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => {
        done: boolean;
        hasNext: boolean;
        next: number;
    } | {
        done: boolean;
        hasNext: boolean;
        next?: undefined;
    }) & {
        single: true;
    };
    const lazyIndexed: (<T>(fn: PredIndexedOptional<T, boolean>) => (value: T, index?: number | undefined, array?: T[] | undefined) => {
        done: boolean;
        hasNext: boolean;
        next: number;
    } | {
        done: boolean;
        hasNext: boolean;
        next?: undefined;
    }) & {
        indexed: true;
    } & {
        single: true;
    };
}
//# sourceMappingURL=findIndex.d.ts.map