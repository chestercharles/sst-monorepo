import { LazyResult } from './_reduceLazy';
type FlattenDeep<T> = T extends ReadonlyArray<infer K> ? FlattenDeep2<K> : T;
type FlattenDeep2<T> = T extends ReadonlyArray<infer K> ? FlattenDeep3<K> : T;
type FlattenDeep3<T> = T extends ReadonlyArray<infer K> ? FlattenDeep4<K> : T;
type FlattenDeep4<T> = T extends ReadonlyArray<infer K> ? K : T;
export declare function flattenDeep<T>(items: ReadonlyArray<T>): Array<FlattenDeep<T>>;
export declare function flattenDeep<T>(): (items: ReadonlyArray<T>) => Array<FlattenDeep<T>>;
export declare namespace flattenDeep {
    function lazy(): (value: any) => LazyResult<any>;
}
export {};
//# sourceMappingURL=flattenDeep.d.ts.map