import { IterableContainer } from './_types';
export declare function zip<F, S>(first: ReadonlyArray<F>, second: ReadonlyArray<S>): Array<[F, S]>;
export declare function zip<S>(second: ReadonlyArray<S>): <F>(first: ReadonlyArray<F>) => Array<[F, S]>;
interface Strict {
    <F extends IterableContainer, S extends IterableContainer>(first: F, second: S): Zip<F, S>;
    <S extends IterableContainer>(second: S): <F extends IterableContainer>(first: F) => Zip<F, S>;
}
type Zip<Left extends IterableContainer, Right extends IterableContainer> = Left extends readonly [] ? [] : Right extends readonly [] ? [] : Left extends readonly [infer LeftHead, ...infer LeftRest] ? Right extends readonly [infer RightHead, ...infer RightRest] ? [
    [LeftHead, RightHead],
    ...Zip<LeftRest, RightRest>
] : [
    [LeftHead, Right[number]],
    ...Zip<LeftRest, Right>
] : Right extends readonly [infer RightHead, ...infer RightRest] ? [[Left[number], RightHead], ...Zip<Left, RightRest>] : Array<[Left[number], Right[number]]>;
export declare namespace zip {
    const strict: Strict;
}
export {};
//# sourceMappingURL=zip.d.ts.map