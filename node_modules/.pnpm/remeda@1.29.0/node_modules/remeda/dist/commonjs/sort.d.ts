import { IterableContainer } from './_types';
export declare function sort<T>(items: ReadonlyArray<T>, cmp: (a: T, b: T) => number): Array<T>;
export declare function sort<T>(cmp: (a: T, b: T) => number): (items: ReadonlyArray<T>) => Array<T>;
interface Strict {
    <T extends IterableContainer>(items: T, cmp: (a: T[number], b: T[number]) => number): Sorted<T>;
    <T extends IterableContainer>(cmp: (a: T[number], b: T[number]) => number): (items: T) => Sorted<T>;
}
type Sorted<T extends IterableContainer> = {
    -readonly [P in keyof T]: T[number];
};
export declare namespace sort {
    const strict: Strict;
}
export {};
//# sourceMappingURL=sort.d.ts.map