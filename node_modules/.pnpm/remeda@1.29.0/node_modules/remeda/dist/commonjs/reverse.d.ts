type Reverse<T extends ReadonlyArray<unknown>, R extends ReadonlyArray<unknown> = []> = ReturnType<T extends IsNoTuple<T> ? () => [...T, ...R] : T extends readonly [infer F, ...infer L] ? () => Reverse<L, [F, ...R]> : () => R>;
type IsNoTuple<T> = T extends readonly [unknown, ...Array<unknown>] ? never : T;
export declare function reverse<T extends ReadonlyArray<unknown>>(array: T): Reverse<T>;
export declare function reverse<T extends ReadonlyArray<unknown>>(): (array: T) => Reverse<T>;
export {};
//# sourceMappingURL=reverse.d.ts.map