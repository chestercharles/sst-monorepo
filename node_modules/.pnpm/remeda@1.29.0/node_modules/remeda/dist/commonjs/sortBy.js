"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortBy = void 0;
var purry_1 = require("./purry");
var ALL_DIRECTIONS = ['asc', 'desc'];
var COMPARATOR = {
    asc: function (x, y) { return x > y; },
    desc: function (x, y) { return x < y; },
};
function sortBy(arrayOrSortRule) {
    var sortRules = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sortRules[_i - 1] = arguments[_i];
    }
    var args = isSortRule(arrayOrSortRule)
        ?
            [__spreadArray([arrayOrSortRule], sortRules, true)]
        :
            [arrayOrSortRule, sortRules];
    return (0, purry_1.purry)(_sortBy, args);
}
exports.sortBy = sortBy;
function isSortRule(x) {
    if (typeof x === 'function') {
        return true;
    }
    var maybeProjection = x[0], maybeDirection = x[1], rest = x.slice(2);
    if (rest.length > 0) {
        return false;
    }
    return (typeof maybeProjection === 'function' &&
        ALL_DIRECTIONS.indexOf(maybeDirection) !== -1);
}
var _sortBy = function (array, sorts) {
    return __spreadArray([], array, true).sort(comparer.apply(void 0, sorts));
};
function comparer(primaryRule, secondaryRule) {
    var otherRules = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        otherRules[_i - 2] = arguments[_i];
    }
    var projector = typeof primaryRule === 'function' ? primaryRule : primaryRule[0];
    var direction = typeof primaryRule === 'function' ? 'asc' : primaryRule[1];
    var comparator = COMPARATOR[direction];
    var nextComparer = secondaryRule === undefined
        ? undefined
        : comparer.apply(void 0, __spreadArray([secondaryRule], otherRules, false));
    return function (a, b) {
        var _a;
        var projectedA = projector(a);
        var projectedB = projector(b);
        if (comparator(projectedA, projectedB)) {
            return 1;
        }
        if (comparator(projectedB, projectedA)) {
            return -1;
        }
        return (_a = nextComparer === null || nextComparer === void 0 ? void 0 : nextComparer(a, b)) !== null && _a !== void 0 ? _a : 0;
    };
}
(function (sortBy) {
    sortBy.strict = sortBy;
})(sortBy = exports.sortBy || (exports.sortBy = {}));
