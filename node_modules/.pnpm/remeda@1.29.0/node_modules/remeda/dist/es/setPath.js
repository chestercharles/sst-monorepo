var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { purry } from './purry';
export function setPath() {
    return purry(_setPath, arguments);
}
export function _setPath(object, path, value) {
    var _a;
    if (path.length === 0)
        return value;
    if (Array.isArray(object)) {
        return object.map(function (item, index) {
            if (index === path[0]) {
                return _setPath(item, path.slice(1), value);
            }
            return item;
        });
    }
    return __assign(__assign({}, object), (_a = {}, _a[path[0]] = _setPath(object[path[0]], path.slice(1), value), _a));
}
