import { LazyResult } from './_reduceLazy';
import { Pred, PredIndexedOptional, PredIndexed } from './_types';
export declare function forEach<T>(array: ReadonlyArray<T>, fn: Pred<T, void>): Array<T>;
export declare function forEach<T>(fn: Pred<T, void>): (array: ReadonlyArray<T>) => Array<T>;
export declare namespace forEach {
    function indexed<T>(array: ReadonlyArray<T>, fn: PredIndexed<T, void>): Array<T>;
    function indexed<T>(fn: PredIndexed<T, void>): (array: ReadonlyArray<T>) => Array<T>;
    const lazy: <T>(fn: PredIndexedOptional<T, void>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<T>;
    const lazyIndexed: (<T>(fn: PredIndexedOptional<T, void>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<T>) & {
        indexed: true;
    };
}
//# sourceMappingURL=forEach.d.ts.map