export type Pred<T, K> = (input: T) => K;
export type PredIndexed<T, K> = (input: T, index: number, array: Array<T>) => K;
export type PredIndexedOptional<T, K> = (input: T, index?: number, array?: Array<T>) => K;
export type NonEmptyArray<T> = [T, ...Array<T>];
export type IterableContainer<T = unknown> = ReadonlyArray<T> | [];
export type ObjectKeys<T extends object> = `${Exclude<keyof T, symbol>}`;
export type ReadonlyTuple<Element, Length extends number> = number extends Length ? ReadonlyArray<Element> : BuildTupleHelper<Element, Length, []>;
type BuildTupleHelper<Element, Length extends number, Rest extends Array<Element>> = Rest['length'] extends Length ? readonly [...Rest] : BuildTupleHelper<Element, Length, [Element, ...Rest]>;
export {};
//# sourceMappingURL=_types.d.ts.map