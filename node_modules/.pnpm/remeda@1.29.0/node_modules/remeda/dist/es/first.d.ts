import { IterableContainer } from './_types';
type FirstOut<T extends IterableContainer> = T extends [] ? undefined : T extends readonly [unknown, ...Array<unknown>] ? T[0] : T extends readonly [...infer Pre, infer Last] ? Pre[0] | Last : T[0] | undefined;
export declare function first<T extends IterableContainer>(array: Readonly<T>): FirstOut<T>;
export declare function first<T extends IterableContainer>(): (array: Readonly<T>) => FirstOut<T>;
export declare namespace first {
    function lazy<T>(): (value: T) => {
        done: boolean;
        hasNext: boolean;
        next: T;
    };
    namespace lazy {
        const single = true;
    }
}
export {};
//# sourceMappingURL=first.d.ts.map