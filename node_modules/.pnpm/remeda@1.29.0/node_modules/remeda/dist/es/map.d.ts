import { LazyResult } from './_reduceLazy';
import { IterableContainer, Pred, PredIndexed, PredIndexedOptional } from './_types';
export declare function map<T, K>(array: ReadonlyArray<T>, fn: Pred<T, K>): Array<K>;
export declare function map<T, K>(fn: Pred<T, K>): (array: ReadonlyArray<T>) => Array<K>;
interface Strict {
    <T extends IterableContainer, K>(items: T, mapper: Pred<T[number], K>): StrictOut<T, K>;
    <T extends IterableContainer, K>(mapper: Pred<T[number], K>): (items: T) => StrictOut<T, K>;
    readonly indexed: {
        <T extends IterableContainer, K>(items: T, mapper: PredIndexed<T[number], K>): StrictOut<T, K>;
        <T extends IterableContainer, K>(mapper: PredIndexed<T[number], K>): (items: T) => StrictOut<T, K>;
    };
}
type StrictOut<T extends IterableContainer, K> = {
    -readonly [P in keyof T]: K;
};
export declare namespace map {
    function indexed<T, K>(array: ReadonlyArray<T>, fn: PredIndexed<T, K>): Array<K>;
    function indexed<T, K>(fn: PredIndexed<T, K>): (array: ReadonlyArray<T>) => Array<K>;
    const lazy: <T, K>(fn: PredIndexedOptional<T, K>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<K>;
    const lazyIndexed: (<T, K>(fn: PredIndexedOptional<T, K>) => (value: T, index?: number | undefined, array?: T[] | undefined) => LazyResult<K>) & {
        indexed: true;
    };
    const strict: Strict;
}
export {};
//# sourceMappingURL=map.d.ts.map