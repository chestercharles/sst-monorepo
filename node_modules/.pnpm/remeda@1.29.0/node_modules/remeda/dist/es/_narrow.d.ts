export type Try<A1, A2, Catch = never> = A1 extends A2 ? A1 : Catch;
export type Narrowable = string | number | bigint | boolean;
type NarrowRaw<A> = (A extends [] ? [] : never) | (A extends Narrowable ? A : never) | {
    [K in keyof A]: A[K] extends (...args: Array<any>) => any ? A[K] : NarrowRaw<A[K]>;
};
export type Narrow<A> = Try<A, [], NarrowRaw<A>>;
export {};
//# sourceMappingURL=_narrow.d.ts.map