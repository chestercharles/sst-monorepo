import { LazyResult } from './_reduceLazy';
type IsEquals<T> = (a: T, b: T) => boolean;
export declare function uniqWith<T>(array: ReadonlyArray<T>, isEquals: IsEquals<T>): Array<T>;
export declare function uniqWith<T>(isEquals: IsEquals<T>): (array: ReadonlyArray<T>) => Array<T>;
declare function _lazy<T>(isEquals: IsEquals<T>): (value: T, index?: number, array?: Array<T>) => LazyResult<T>;
export declare namespace uniqWith {
    const lazy: typeof _lazy & {
        indexed: true;
    };
}
export {};
//# sourceMappingURL=uniqWith.d.ts.map