import { purry } from './purry';
import { _reduceLazy } from './_reduceLazy';
import { _toLazyIndexed } from './_toLazyIndexed';
export function uniqWith() {
    return purry(_uniqWith, arguments, uniqWith.lazy);
}
function _uniqWith(array, isEquals) {
    var lazy = uniqWith.lazy(isEquals);
    return _reduceLazy(array, lazy, true);
}
function _lazy(isEquals) {
    return function (value, index, array) {
        if (array &&
            array.findIndex(function (otherValue) { return isEquals(value, otherValue); }) === index) {
            return {
                done: false,
                hasNext: true,
                next: value,
            };
        }
        return {
            done: false,
            hasNext: false,
        };
    };
}
(function (uniqWith) {
    uniqWith.lazy = _toLazyIndexed(_lazy);
})(uniqWith || (uniqWith = {}));
