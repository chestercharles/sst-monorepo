import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/.pnpm/tslib@2.6.1/node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "../../node_modules/.pnpm/tslib@2.6.1/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js
var require_s3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports.DOT_PATTERN = /\./;
    exports.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports.isArnBucketName = isArnBucketName;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js
var require_service_customizations = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js
var require_createConfigValueProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports.createConfigValueProvider = createConfigValueProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js
var require_getEndpointFromInstructions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveParams = exports.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports.resolveParams = resolveParams;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+querystring-parser@3.272.0/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+querystring-parser@3.272.0/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+url-parser@3.272.0/node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+url-parser@3.272.0/node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs();
    var parseUrl = (url2) => {
      if (typeof url2 === "string") {
        return (0, exports.parseUrl)(new URL(url2));
      }
      const { hostname, pathname, port, protocol, search } = url2;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js
var require_toEndpointV1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs2();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports.toEndpointV1 = toEndpointV1;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js
var require_adaptors = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports);
    tslib_1.__exportStar(require_toEndpointV1(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js
var require_endpointMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports.endpointMiddleware = endpointMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-serde@3.272.0/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js
var require_getEndpointPlugin = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointPlugin = exports.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs3();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports.endpointMiddlewareOptions);
      }
    });
    exports.getEndpointPlugin = getEndpointPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-middleware@3.272.0/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js
var require_resolveEndpointConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports.resolveEndpointConfig = resolveEndpointConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-endpoint@3.272.0/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports);
    tslib_1.__exportStar(require_endpointMiddleware(), exports);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js
var require_NoOpLogger = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports.NoOpLogger = NoOpLogger;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.272.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.272.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler2, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler2 = middleware(handler2, context);
          }
          return handler2;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.272.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-stack@3.272.0/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs6();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler2 = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler2(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler2(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs6();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.logger = exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports.logger = {
      warn: console.warn
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTimeWithOffset = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
    var parseRfc3339DateTimeWithOffset = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339_WITH_OFFSET.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
      if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
      }
      return date;
    };
    exports.parseRfc3339DateTimeWithOffset = parseRfc3339DateTimeWithOffset;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var parseOffsetToMilliseconds = (value) => {
      const directionStr = value[0];
      let direction = 1;
      if (directionStr == "+") {
        direction = 1;
      } else if (directionStr == "-") {
        direction = -1;
      } else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
      }
      const hour = Number(value.substring(1, 3));
      const minute = Number(value.substring(4, 6));
      return direction * (hour * 60 + minute) * 60 * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class _ServiceException extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.code) || (parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.Code) || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports.throwDefaultError = throwDefaultError;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class _LazyJsonString extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof _LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new _LazyJsonString(object);
        }
        return new _LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertMap = exports.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        let [filter2, value] = instructions[key];
        if (typeof value === "function") {
          let _value;
          const defaultFilterPassed = filter2 === void 0 && (_value = value()) != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(void 0) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed) {
            target[key] = _value;
          } else if (customFilterPassed) {
            target[key] = value();
          }
        } else {
          const defaultFilterPassed = filter2 === void 0 && value != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(value) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed || customFilterPassed) {
            target[key] = value;
          }
        }
      }
      return target;
    }
    exports.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports.convertMap = convertMap;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports.resolvedPath = resolvedPath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+smithy-client@3.279.0/node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports);
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_default_error_handler(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_object_mapping(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_resolve_path(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/models/LambdaServiceException.js
var require_LambdaServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/models/LambdaServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LambdaServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var LambdaServiceException = class _LambdaServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _LambdaServiceException.prototype);
      }
    };
    exports.LambdaServiceException = LambdaServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KMSInvalidStateException = exports.KMSDisabledException = exports.KMSAccessDeniedException = exports.LogType = exports.InvocationType = exports.InvalidZipFileException = exports.InvalidSubnetIDException = exports.InvalidSecurityGroupIDException = exports.InvalidRuntimeException = exports.InvalidRequestContentException = exports.ENILimitReachedException = exports.EFSMountTimeoutException = exports.EFSMountFailureException = exports.EFSMountConnectivityException = exports.EFSIOException = exports.EC2UnexpectedException = exports.EC2ThrottledException = exports.EC2AccessDeniedException = exports.UpdateRuntimeOn = exports.ProvisionedConcurrencyConfigNotFoundException = exports.ProvisionedConcurrencyStatusEnum = exports.ResourceInUseException = exports.InvalidCodeSignatureException = exports.StateReasonCode = exports.State = exports.SnapStartOptimizationStatus = exports.LastUpdateStatusReasonCode = exports.LastUpdateStatus = exports.TracingMode = exports.SnapStartApplyOn = exports.Runtime = exports.PackageType = exports.CodeVerificationFailedException = exports.CodeStorageExceededException = exports.CodeSigningConfigNotFoundException = exports.EventSourcePosition = exports.SourceAccessType = exports.EndPointType = exports.FunctionResponseType = exports.CodeSigningPolicy = exports.Architecture = exports.FunctionUrlAuthType = exports.TooManyRequestsException = exports.ThrottleReason = exports.ServiceException = exports.ResourceNotFoundException = exports.ResourceConflictException = exports.PreconditionFailedException = exports.PolicyLengthExceededException = exports.InvalidParameterValueException = void 0;
    exports.LayerFilterSensitiveLog = exports.ImageConfigResponseFilterSensitiveLog = exports.ImageConfigErrorFilterSensitiveLog = exports.EnvironmentResponseFilterSensitiveLog = exports.EnvironmentErrorFilterSensitiveLog = exports.CreateFunctionRequestFilterSensitiveLog = exports.VpcConfigFilterSensitiveLog = exports.TracingConfigFilterSensitiveLog = exports.SnapStartFilterSensitiveLog = exports.ImageConfigFilterSensitiveLog = exports.FileSystemConfigFilterSensitiveLog = exports.EphemeralStorageFilterSensitiveLog = exports.EnvironmentFilterSensitiveLog = exports.DeadLetterConfigFilterSensitiveLog = exports.FunctionCodeFilterSensitiveLog = exports.EventSourceMappingConfigurationFilterSensitiveLog = exports.CreateEventSourceMappingRequestFilterSensitiveLog = exports.SourceAccessConfigurationFilterSensitiveLog = exports.SelfManagedKafkaEventSourceConfigFilterSensitiveLog = exports.SelfManagedEventSourceFilterSensitiveLog = exports.ScalingConfigFilterSensitiveLog = exports.FilterCriteriaFilterSensitiveLog = exports.FilterFilterSensitiveLog = exports.DestinationConfigFilterSensitiveLog = exports.OnSuccessFilterSensitiveLog = exports.OnFailureFilterSensitiveLog = exports.CreateCodeSigningConfigResponseFilterSensitiveLog = exports.CodeSigningConfigFilterSensitiveLog = exports.CreateCodeSigningConfigRequestFilterSensitiveLog = exports.CodeSigningPoliciesFilterSensitiveLog = exports.CreateAliasRequestFilterSensitiveLog = exports.AmazonManagedKafkaEventSourceConfigFilterSensitiveLog = exports.AllowedPublishersFilterSensitiveLog = exports.AliasConfigurationFilterSensitiveLog = exports.AliasRoutingConfigurationFilterSensitiveLog = exports.AddPermissionResponseFilterSensitiveLog = exports.AddPermissionRequestFilterSensitiveLog = exports.AddLayerVersionPermissionResponseFilterSensitiveLog = exports.AddLayerVersionPermissionRequestFilterSensitiveLog = exports.AccountUsageFilterSensitiveLog = exports.AccountLimitFilterSensitiveLog = exports.FunctionVersion = exports.UnsupportedMediaTypeException = exports.SubnetIPAddressLimitReachedException = exports.SnapStartTimeoutException = exports.SnapStartNotReadyException = exports.SnapStartException = exports.ResourceNotReadyException = exports.RequestTooLargeException = exports.KMSNotFoundException = void 0;
    exports.GetRuntimeManagementConfigRequestFilterSensitiveLog = exports.GetProvisionedConcurrencyConfigResponseFilterSensitiveLog = exports.GetProvisionedConcurrencyConfigRequestFilterSensitiveLog = exports.GetPolicyResponseFilterSensitiveLog = exports.GetPolicyRequestFilterSensitiveLog = exports.GetLayerVersionPolicyResponseFilterSensitiveLog = exports.GetLayerVersionPolicyRequestFilterSensitiveLog = exports.GetLayerVersionByArnRequestFilterSensitiveLog = exports.GetLayerVersionResponseFilterSensitiveLog = exports.LayerVersionContentOutputFilterSensitiveLog = exports.GetLayerVersionRequestFilterSensitiveLog = exports.GetFunctionUrlConfigResponseFilterSensitiveLog = exports.GetFunctionUrlConfigRequestFilterSensitiveLog = exports.GetFunctionEventInvokeConfigRequestFilterSensitiveLog = exports.FunctionEventInvokeConfigFilterSensitiveLog = exports.GetFunctionConfigurationRequestFilterSensitiveLog = exports.GetFunctionConcurrencyResponseFilterSensitiveLog = exports.GetFunctionConcurrencyRequestFilterSensitiveLog = exports.GetFunctionCodeSigningConfigResponseFilterSensitiveLog = exports.GetFunctionCodeSigningConfigRequestFilterSensitiveLog = exports.GetFunctionResponseFilterSensitiveLog = exports.ConcurrencyFilterSensitiveLog = exports.FunctionCodeLocationFilterSensitiveLog = exports.GetFunctionRequestFilterSensitiveLog = exports.GetEventSourceMappingRequestFilterSensitiveLog = exports.GetCodeSigningConfigResponseFilterSensitiveLog = exports.GetCodeSigningConfigRequestFilterSensitiveLog = exports.GetAliasRequestFilterSensitiveLog = exports.GetAccountSettingsResponseFilterSensitiveLog = exports.GetAccountSettingsRequestFilterSensitiveLog = exports.DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog = exports.DeleteLayerVersionRequestFilterSensitiveLog = exports.DeleteFunctionUrlConfigRequestFilterSensitiveLog = exports.DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog = exports.DeleteFunctionConcurrencyRequestFilterSensitiveLog = exports.DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog = exports.DeleteFunctionRequestFilterSensitiveLog = exports.DeleteEventSourceMappingRequestFilterSensitiveLog = exports.DeleteCodeSigningConfigResponseFilterSensitiveLog = exports.DeleteCodeSigningConfigRequestFilterSensitiveLog = exports.DeleteAliasRequestFilterSensitiveLog = exports.CreateFunctionUrlConfigResponseFilterSensitiveLog = exports.CreateFunctionUrlConfigRequestFilterSensitiveLog = exports.CorsFilterSensitiveLog = exports.FunctionConfigurationFilterSensitiveLog = exports.VpcConfigResponseFilterSensitiveLog = exports.TracingConfigResponseFilterSensitiveLog = exports.SnapStartResponseFilterSensitiveLog = exports.RuntimeVersionConfigFilterSensitiveLog = exports.RuntimeVersionErrorFilterSensitiveLog = void 0;
    exports.UpdateAliasRequestFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.RemovePermissionRequestFilterSensitiveLog = exports.RemoveLayerVersionPermissionRequestFilterSensitiveLog = exports.PutRuntimeManagementConfigResponseFilterSensitiveLog = exports.PutRuntimeManagementConfigRequestFilterSensitiveLog = exports.PutProvisionedConcurrencyConfigResponseFilterSensitiveLog = exports.PutProvisionedConcurrencyConfigRequestFilterSensitiveLog = exports.PutFunctionEventInvokeConfigRequestFilterSensitiveLog = exports.PutFunctionConcurrencyRequestFilterSensitiveLog = exports.PutFunctionCodeSigningConfigResponseFilterSensitiveLog = exports.PutFunctionCodeSigningConfigRequestFilterSensitiveLog = exports.PublishVersionRequestFilterSensitiveLog = exports.PublishLayerVersionResponseFilterSensitiveLog = exports.PublishLayerVersionRequestFilterSensitiveLog = exports.LayerVersionContentInputFilterSensitiveLog = exports.ListVersionsByFunctionResponseFilterSensitiveLog = exports.ListVersionsByFunctionRequestFilterSensitiveLog = exports.ListTagsResponseFilterSensitiveLog = exports.ListTagsRequestFilterSensitiveLog = exports.ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog = exports.ProvisionedConcurrencyConfigListItemFilterSensitiveLog = exports.ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog = exports.ListLayerVersionsResponseFilterSensitiveLog = exports.ListLayerVersionsRequestFilterSensitiveLog = exports.ListLayersResponseFilterSensitiveLog = exports.LayersListItemFilterSensitiveLog = exports.LayerVersionsListItemFilterSensitiveLog = exports.ListLayersRequestFilterSensitiveLog = exports.ListFunctionUrlConfigsResponseFilterSensitiveLog = exports.FunctionUrlConfigFilterSensitiveLog = exports.ListFunctionUrlConfigsRequestFilterSensitiveLog = exports.ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog = exports.ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog = exports.ListFunctionsResponseFilterSensitiveLog = exports.ListFunctionsRequestFilterSensitiveLog = exports.ListFunctionEventInvokeConfigsResponseFilterSensitiveLog = exports.ListFunctionEventInvokeConfigsRequestFilterSensitiveLog = exports.ListEventSourceMappingsResponseFilterSensitiveLog = exports.ListEventSourceMappingsRequestFilterSensitiveLog = exports.ListCodeSigningConfigsResponseFilterSensitiveLog = exports.ListCodeSigningConfigsRequestFilterSensitiveLog = exports.ListAliasesResponseFilterSensitiveLog = exports.ListAliasesRequestFilterSensitiveLog = exports.InvokeAsyncResponseFilterSensitiveLog = exports.InvokeAsyncRequestFilterSensitiveLog = exports.InvocationResponseFilterSensitiveLog = exports.InvocationRequestFilterSensitiveLog = exports.GetRuntimeManagementConfigResponseFilterSensitiveLog = void 0;
    exports.UpdateFunctionUrlConfigResponseFilterSensitiveLog = exports.UpdateFunctionUrlConfigRequestFilterSensitiveLog = exports.UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog = exports.UpdateFunctionConfigurationRequestFilterSensitiveLog = exports.UpdateFunctionCodeRequestFilterSensitiveLog = exports.UpdateEventSourceMappingRequestFilterSensitiveLog = exports.UpdateCodeSigningConfigResponseFilterSensitiveLog = exports.UpdateCodeSigningConfigRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var LambdaServiceException_1 = require_LambdaServiceException();
    var InvalidParameterValueException = class _InvalidParameterValueException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidParameterValueException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidParameterValueException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.InvalidParameterValueException = InvalidParameterValueException;
    var PolicyLengthExceededException = class _PolicyLengthExceededException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "PolicyLengthExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "PolicyLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PolicyLengthExceededException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.PolicyLengthExceededException = PolicyLengthExceededException;
    var PreconditionFailedException = class _PreconditionFailedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "PreconditionFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "PreconditionFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PreconditionFailedException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.PreconditionFailedException = PreconditionFailedException;
    var ResourceConflictException = class _ResourceConflictException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceConflictException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceConflictException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.ResourceConflictException = ResourceConflictException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var ServiceException = class _ServiceException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ServiceException",
          $fault: "server",
          ...opts
        });
        this.name = "ServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ServiceException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.ServiceException = ServiceException;
    var ThrottleReason;
    (function(ThrottleReason2) {
      ThrottleReason2["CallerRateLimitExceeded"] = "CallerRateLimitExceeded";
      ThrottleReason2["ConcurrentInvocationLimitExceeded"] = "ConcurrentInvocationLimitExceeded";
      ThrottleReason2["ConcurrentSnapshotCreateLimitExceeded"] = "ConcurrentSnapshotCreateLimitExceeded";
      ThrottleReason2["FunctionInvocationRateLimitExceeded"] = "FunctionInvocationRateLimitExceeded";
      ThrottleReason2["ReservedFunctionConcurrentInvocationLimitExceeded"] = "ReservedFunctionConcurrentInvocationLimitExceeded";
      ThrottleReason2["ReservedFunctionInvocationRateLimitExceeded"] = "ReservedFunctionInvocationRateLimitExceeded";
    })(ThrottleReason = exports.ThrottleReason || (exports.ThrottleReason = {}));
    var TooManyRequestsException = class _TooManyRequestsException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
        this.Type = opts.Type;
        this.Reason = opts.Reason;
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var FunctionUrlAuthType;
    (function(FunctionUrlAuthType2) {
      FunctionUrlAuthType2["AWS_IAM"] = "AWS_IAM";
      FunctionUrlAuthType2["NONE"] = "NONE";
    })(FunctionUrlAuthType = exports.FunctionUrlAuthType || (exports.FunctionUrlAuthType = {}));
    var Architecture;
    (function(Architecture2) {
      Architecture2["arm64"] = "arm64";
      Architecture2["x86_64"] = "x86_64";
    })(Architecture = exports.Architecture || (exports.Architecture = {}));
    var CodeSigningPolicy;
    (function(CodeSigningPolicy2) {
      CodeSigningPolicy2["Enforce"] = "Enforce";
      CodeSigningPolicy2["Warn"] = "Warn";
    })(CodeSigningPolicy = exports.CodeSigningPolicy || (exports.CodeSigningPolicy = {}));
    var FunctionResponseType;
    (function(FunctionResponseType2) {
      FunctionResponseType2["ReportBatchItemFailures"] = "ReportBatchItemFailures";
    })(FunctionResponseType = exports.FunctionResponseType || (exports.FunctionResponseType = {}));
    var EndPointType;
    (function(EndPointType2) {
      EndPointType2["KAFKA_BOOTSTRAP_SERVERS"] = "KAFKA_BOOTSTRAP_SERVERS";
    })(EndPointType = exports.EndPointType || (exports.EndPointType = {}));
    var SourceAccessType;
    (function(SourceAccessType2) {
      SourceAccessType2["BASIC_AUTH"] = "BASIC_AUTH";
      SourceAccessType2["CLIENT_CERTIFICATE_TLS_AUTH"] = "CLIENT_CERTIFICATE_TLS_AUTH";
      SourceAccessType2["SASL_SCRAM_256_AUTH"] = "SASL_SCRAM_256_AUTH";
      SourceAccessType2["SASL_SCRAM_512_AUTH"] = "SASL_SCRAM_512_AUTH";
      SourceAccessType2["SERVER_ROOT_CA_CERTIFICATE"] = "SERVER_ROOT_CA_CERTIFICATE";
      SourceAccessType2["VIRTUAL_HOST"] = "VIRTUAL_HOST";
      SourceAccessType2["VPC_SECURITY_GROUP"] = "VPC_SECURITY_GROUP";
      SourceAccessType2["VPC_SUBNET"] = "VPC_SUBNET";
    })(SourceAccessType = exports.SourceAccessType || (exports.SourceAccessType = {}));
    var EventSourcePosition;
    (function(EventSourcePosition2) {
      EventSourcePosition2["AT_TIMESTAMP"] = "AT_TIMESTAMP";
      EventSourcePosition2["LATEST"] = "LATEST";
      EventSourcePosition2["TRIM_HORIZON"] = "TRIM_HORIZON";
    })(EventSourcePosition = exports.EventSourcePosition || (exports.EventSourcePosition = {}));
    var CodeSigningConfigNotFoundException = class _CodeSigningConfigNotFoundException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "CodeSigningConfigNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "CodeSigningConfigNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CodeSigningConfigNotFoundException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.CodeSigningConfigNotFoundException = CodeSigningConfigNotFoundException;
    var CodeStorageExceededException = class _CodeStorageExceededException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "CodeStorageExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "CodeStorageExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CodeStorageExceededException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.CodeStorageExceededException = CodeStorageExceededException;
    var CodeVerificationFailedException = class _CodeVerificationFailedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "CodeVerificationFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "CodeVerificationFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CodeVerificationFailedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.CodeVerificationFailedException = CodeVerificationFailedException;
    var PackageType;
    (function(PackageType2) {
      PackageType2["Image"] = "Image";
      PackageType2["Zip"] = "Zip";
    })(PackageType = exports.PackageType || (exports.PackageType = {}));
    var Runtime;
    (function(Runtime2) {
      Runtime2["dotnet6"] = "dotnet6";
      Runtime2["dotnetcore10"] = "dotnetcore1.0";
      Runtime2["dotnetcore20"] = "dotnetcore2.0";
      Runtime2["dotnetcore21"] = "dotnetcore2.1";
      Runtime2["dotnetcore31"] = "dotnetcore3.1";
      Runtime2["go1x"] = "go1.x";
      Runtime2["java11"] = "java11";
      Runtime2["java8"] = "java8";
      Runtime2["java8al2"] = "java8.al2";
      Runtime2["nodejs"] = "nodejs";
      Runtime2["nodejs10x"] = "nodejs10.x";
      Runtime2["nodejs12x"] = "nodejs12.x";
      Runtime2["nodejs14x"] = "nodejs14.x";
      Runtime2["nodejs16x"] = "nodejs16.x";
      Runtime2["nodejs18x"] = "nodejs18.x";
      Runtime2["nodejs43"] = "nodejs4.3";
      Runtime2["nodejs43edge"] = "nodejs4.3-edge";
      Runtime2["nodejs610"] = "nodejs6.10";
      Runtime2["nodejs810"] = "nodejs8.10";
      Runtime2["provided"] = "provided";
      Runtime2["providedal2"] = "provided.al2";
      Runtime2["python27"] = "python2.7";
      Runtime2["python36"] = "python3.6";
      Runtime2["python37"] = "python3.7";
      Runtime2["python38"] = "python3.8";
      Runtime2["python39"] = "python3.9";
      Runtime2["ruby25"] = "ruby2.5";
      Runtime2["ruby27"] = "ruby2.7";
    })(Runtime = exports.Runtime || (exports.Runtime = {}));
    var SnapStartApplyOn;
    (function(SnapStartApplyOn2) {
      SnapStartApplyOn2["None"] = "None";
      SnapStartApplyOn2["PublishedVersions"] = "PublishedVersions";
    })(SnapStartApplyOn = exports.SnapStartApplyOn || (exports.SnapStartApplyOn = {}));
    var TracingMode;
    (function(TracingMode2) {
      TracingMode2["Active"] = "Active";
      TracingMode2["PassThrough"] = "PassThrough";
    })(TracingMode = exports.TracingMode || (exports.TracingMode = {}));
    var LastUpdateStatus;
    (function(LastUpdateStatus2) {
      LastUpdateStatus2["Failed"] = "Failed";
      LastUpdateStatus2["InProgress"] = "InProgress";
      LastUpdateStatus2["Successful"] = "Successful";
    })(LastUpdateStatus = exports.LastUpdateStatus || (exports.LastUpdateStatus = {}));
    var LastUpdateStatusReasonCode;
    (function(LastUpdateStatusReasonCode2) {
      LastUpdateStatusReasonCode2["DisabledKMSKey"] = "DisabledKMSKey";
      LastUpdateStatusReasonCode2["EFSIOError"] = "EFSIOError";
      LastUpdateStatusReasonCode2["EFSMountConnectivityError"] = "EFSMountConnectivityError";
      LastUpdateStatusReasonCode2["EFSMountFailure"] = "EFSMountFailure";
      LastUpdateStatusReasonCode2["EFSMountTimeout"] = "EFSMountTimeout";
      LastUpdateStatusReasonCode2["EniLimitExceeded"] = "EniLimitExceeded";
      LastUpdateStatusReasonCode2["FunctionError"] = "FunctionError";
      LastUpdateStatusReasonCode2["ImageAccessDenied"] = "ImageAccessDenied";
      LastUpdateStatusReasonCode2["ImageDeleted"] = "ImageDeleted";
      LastUpdateStatusReasonCode2["InsufficientRolePermissions"] = "InsufficientRolePermissions";
      LastUpdateStatusReasonCode2["InternalError"] = "InternalError";
      LastUpdateStatusReasonCode2["InvalidConfiguration"] = "InvalidConfiguration";
      LastUpdateStatusReasonCode2["InvalidImage"] = "InvalidImage";
      LastUpdateStatusReasonCode2["InvalidRuntime"] = "InvalidRuntime";
      LastUpdateStatusReasonCode2["InvalidSecurityGroup"] = "InvalidSecurityGroup";
      LastUpdateStatusReasonCode2["InvalidStateKMSKey"] = "InvalidStateKMSKey";
      LastUpdateStatusReasonCode2["InvalidSubnet"] = "InvalidSubnet";
      LastUpdateStatusReasonCode2["InvalidZipFileException"] = "InvalidZipFileException";
      LastUpdateStatusReasonCode2["KMSKeyAccessDenied"] = "KMSKeyAccessDenied";
      LastUpdateStatusReasonCode2["KMSKeyNotFound"] = "KMSKeyNotFound";
      LastUpdateStatusReasonCode2["SubnetOutOfIPAddresses"] = "SubnetOutOfIPAddresses";
    })(LastUpdateStatusReasonCode = exports.LastUpdateStatusReasonCode || (exports.LastUpdateStatusReasonCode = {}));
    var SnapStartOptimizationStatus;
    (function(SnapStartOptimizationStatus2) {
      SnapStartOptimizationStatus2["Off"] = "Off";
      SnapStartOptimizationStatus2["On"] = "On";
    })(SnapStartOptimizationStatus = exports.SnapStartOptimizationStatus || (exports.SnapStartOptimizationStatus = {}));
    var State;
    (function(State2) {
      State2["Active"] = "Active";
      State2["Failed"] = "Failed";
      State2["Inactive"] = "Inactive";
      State2["Pending"] = "Pending";
    })(State = exports.State || (exports.State = {}));
    var StateReasonCode;
    (function(StateReasonCode2) {
      StateReasonCode2["Creating"] = "Creating";
      StateReasonCode2["DisabledKMSKey"] = "DisabledKMSKey";
      StateReasonCode2["EFSIOError"] = "EFSIOError";
      StateReasonCode2["EFSMountConnectivityError"] = "EFSMountConnectivityError";
      StateReasonCode2["EFSMountFailure"] = "EFSMountFailure";
      StateReasonCode2["EFSMountTimeout"] = "EFSMountTimeout";
      StateReasonCode2["EniLimitExceeded"] = "EniLimitExceeded";
      StateReasonCode2["FunctionError"] = "FunctionError";
      StateReasonCode2["Idle"] = "Idle";
      StateReasonCode2["ImageAccessDenied"] = "ImageAccessDenied";
      StateReasonCode2["ImageDeleted"] = "ImageDeleted";
      StateReasonCode2["InsufficientRolePermissions"] = "InsufficientRolePermissions";
      StateReasonCode2["InternalError"] = "InternalError";
      StateReasonCode2["InvalidConfiguration"] = "InvalidConfiguration";
      StateReasonCode2["InvalidImage"] = "InvalidImage";
      StateReasonCode2["InvalidRuntime"] = "InvalidRuntime";
      StateReasonCode2["InvalidSecurityGroup"] = "InvalidSecurityGroup";
      StateReasonCode2["InvalidStateKMSKey"] = "InvalidStateKMSKey";
      StateReasonCode2["InvalidSubnet"] = "InvalidSubnet";
      StateReasonCode2["InvalidZipFileException"] = "InvalidZipFileException";
      StateReasonCode2["KMSKeyAccessDenied"] = "KMSKeyAccessDenied";
      StateReasonCode2["KMSKeyNotFound"] = "KMSKeyNotFound";
      StateReasonCode2["Restoring"] = "Restoring";
      StateReasonCode2["SubnetOutOfIPAddresses"] = "SubnetOutOfIPAddresses";
    })(StateReasonCode = exports.StateReasonCode || (exports.StateReasonCode = {}));
    var InvalidCodeSignatureException = class _InvalidCodeSignatureException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidCodeSignatureException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidCodeSignatureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidCodeSignatureException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.InvalidCodeSignatureException = InvalidCodeSignatureException;
    var ResourceInUseException = class _ResourceInUseException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceInUseException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceInUseException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    var ProvisionedConcurrencyStatusEnum;
    (function(ProvisionedConcurrencyStatusEnum2) {
      ProvisionedConcurrencyStatusEnum2["FAILED"] = "FAILED";
      ProvisionedConcurrencyStatusEnum2["IN_PROGRESS"] = "IN_PROGRESS";
      ProvisionedConcurrencyStatusEnum2["READY"] = "READY";
    })(ProvisionedConcurrencyStatusEnum = exports.ProvisionedConcurrencyStatusEnum || (exports.ProvisionedConcurrencyStatusEnum = {}));
    var ProvisionedConcurrencyConfigNotFoundException = class _ProvisionedConcurrencyConfigNotFoundException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ProvisionedConcurrencyConfigNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ProvisionedConcurrencyConfigNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ProvisionedConcurrencyConfigNotFoundException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.ProvisionedConcurrencyConfigNotFoundException = ProvisionedConcurrencyConfigNotFoundException;
    var UpdateRuntimeOn;
    (function(UpdateRuntimeOn2) {
      UpdateRuntimeOn2["Auto"] = "Auto";
      UpdateRuntimeOn2["FunctionUpdate"] = "FunctionUpdate";
      UpdateRuntimeOn2["Manual"] = "Manual";
    })(UpdateRuntimeOn = exports.UpdateRuntimeOn || (exports.UpdateRuntimeOn = {}));
    var EC2AccessDeniedException = class _EC2AccessDeniedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EC2AccessDeniedException",
          $fault: "server",
          ...opts
        });
        this.name = "EC2AccessDeniedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _EC2AccessDeniedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.EC2AccessDeniedException = EC2AccessDeniedException;
    var EC2ThrottledException = class _EC2ThrottledException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EC2ThrottledException",
          $fault: "server",
          ...opts
        });
        this.name = "EC2ThrottledException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _EC2ThrottledException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.EC2ThrottledException = EC2ThrottledException;
    var EC2UnexpectedException = class _EC2UnexpectedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EC2UnexpectedException",
          $fault: "server",
          ...opts
        });
        this.name = "EC2UnexpectedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _EC2UnexpectedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
        this.EC2ErrorCode = opts.EC2ErrorCode;
      }
    };
    exports.EC2UnexpectedException = EC2UnexpectedException;
    var EFSIOException = class _EFSIOException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSIOException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSIOException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EFSIOException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.EFSIOException = EFSIOException;
    var EFSMountConnectivityException = class _EFSMountConnectivityException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSMountConnectivityException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSMountConnectivityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EFSMountConnectivityException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.EFSMountConnectivityException = EFSMountConnectivityException;
    var EFSMountFailureException = class _EFSMountFailureException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSMountFailureException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSMountFailureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EFSMountFailureException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.EFSMountFailureException = EFSMountFailureException;
    var EFSMountTimeoutException = class _EFSMountTimeoutException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "EFSMountTimeoutException",
          $fault: "client",
          ...opts
        });
        this.name = "EFSMountTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _EFSMountTimeoutException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.EFSMountTimeoutException = EFSMountTimeoutException;
    var ENILimitReachedException = class _ENILimitReachedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ENILimitReachedException",
          $fault: "server",
          ...opts
        });
        this.name = "ENILimitReachedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ENILimitReachedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.ENILimitReachedException = ENILimitReachedException;
    var InvalidRequestContentException = class _InvalidRequestContentException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestContentException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestContentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestContentException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.InvalidRequestContentException = InvalidRequestContentException;
    var InvalidRuntimeException = class _InvalidRuntimeException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidRuntimeException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidRuntimeException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InvalidRuntimeException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.InvalidRuntimeException = InvalidRuntimeException;
    var InvalidSecurityGroupIDException = class _InvalidSecurityGroupIDException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidSecurityGroupIDException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidSecurityGroupIDException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InvalidSecurityGroupIDException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.InvalidSecurityGroupIDException = InvalidSecurityGroupIDException;
    var InvalidSubnetIDException = class _InvalidSubnetIDException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidSubnetIDException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidSubnetIDException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InvalidSubnetIDException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.InvalidSubnetIDException = InvalidSubnetIDException;
    var InvalidZipFileException = class _InvalidZipFileException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "InvalidZipFileException",
          $fault: "server",
          ...opts
        });
        this.name = "InvalidZipFileException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InvalidZipFileException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.InvalidZipFileException = InvalidZipFileException;
    var InvocationType;
    (function(InvocationType2) {
      InvocationType2["DryRun"] = "DryRun";
      InvocationType2["Event"] = "Event";
      InvocationType2["RequestResponse"] = "RequestResponse";
    })(InvocationType = exports.InvocationType || (exports.InvocationType = {}));
    var LogType;
    (function(LogType2) {
      LogType2["None"] = "None";
      LogType2["Tail"] = "Tail";
    })(LogType = exports.LogType || (exports.LogType = {}));
    var KMSAccessDeniedException = class _KMSAccessDeniedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSAccessDeniedException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSAccessDeniedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _KMSAccessDeniedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.KMSAccessDeniedException = KMSAccessDeniedException;
    var KMSDisabledException = class _KMSDisabledException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSDisabledException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSDisabledException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _KMSDisabledException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.KMSDisabledException = KMSDisabledException;
    var KMSInvalidStateException = class _KMSInvalidStateException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSInvalidStateException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSInvalidStateException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _KMSInvalidStateException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.KMSInvalidStateException = KMSInvalidStateException;
    var KMSNotFoundException = class _KMSNotFoundException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "KMSNotFoundException",
          $fault: "server",
          ...opts
        });
        this.name = "KMSNotFoundException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _KMSNotFoundException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.KMSNotFoundException = KMSNotFoundException;
    var RequestTooLargeException = class _RequestTooLargeException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "RequestTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "RequestTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RequestTooLargeException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.RequestTooLargeException = RequestTooLargeException;
    var ResourceNotReadyException = class _ResourceNotReadyException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotReadyException",
          $fault: "server",
          ...opts
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _ResourceNotReadyException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.ResourceNotReadyException = ResourceNotReadyException;
    var SnapStartException = class _SnapStartException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SnapStartException",
          $fault: "client",
          ...opts
        });
        this.name = "SnapStartException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapStartException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.SnapStartException = SnapStartException;
    var SnapStartNotReadyException = class _SnapStartNotReadyException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SnapStartNotReadyException",
          $fault: "client",
          ...opts
        });
        this.name = "SnapStartNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapStartNotReadyException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.SnapStartNotReadyException = SnapStartNotReadyException;
    var SnapStartTimeoutException = class _SnapStartTimeoutException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SnapStartTimeoutException",
          $fault: "client",
          ...opts
        });
        this.name = "SnapStartTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SnapStartTimeoutException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.SnapStartTimeoutException = SnapStartTimeoutException;
    var SubnetIPAddressLimitReachedException = class _SubnetIPAddressLimitReachedException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "SubnetIPAddressLimitReachedException",
          $fault: "server",
          ...opts
        });
        this.name = "SubnetIPAddressLimitReachedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _SubnetIPAddressLimitReachedException.prototype);
        this.Type = opts.Type;
        this.Message = opts.Message;
      }
    };
    exports.SubnetIPAddressLimitReachedException = SubnetIPAddressLimitReachedException;
    var UnsupportedMediaTypeException = class _UnsupportedMediaTypeException extends LambdaServiceException_1.LambdaServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedMediaTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedMediaTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedMediaTypeException.prototype);
        this.Type = opts.Type;
      }
    };
    exports.UnsupportedMediaTypeException = UnsupportedMediaTypeException;
    var FunctionVersion;
    (function(FunctionVersion2) {
      FunctionVersion2["ALL"] = "ALL";
    })(FunctionVersion = exports.FunctionVersion || (exports.FunctionVersion = {}));
    var AccountLimitFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountLimitFilterSensitiveLog = AccountLimitFilterSensitiveLog;
    var AccountUsageFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountUsageFilterSensitiveLog = AccountUsageFilterSensitiveLog;
    var AddLayerVersionPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddLayerVersionPermissionRequestFilterSensitiveLog = AddLayerVersionPermissionRequestFilterSensitiveLog;
    var AddLayerVersionPermissionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddLayerVersionPermissionResponseFilterSensitiveLog = AddLayerVersionPermissionResponseFilterSensitiveLog;
    var AddPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddPermissionRequestFilterSensitiveLog = AddPermissionRequestFilterSensitiveLog;
    var AddPermissionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AddPermissionResponseFilterSensitiveLog = AddPermissionResponseFilterSensitiveLog;
    var AliasRoutingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AliasRoutingConfigurationFilterSensitiveLog = AliasRoutingConfigurationFilterSensitiveLog;
    var AliasConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AliasConfigurationFilterSensitiveLog = AliasConfigurationFilterSensitiveLog;
    var AllowedPublishersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AllowedPublishersFilterSensitiveLog = AllowedPublishersFilterSensitiveLog;
    var AmazonManagedKafkaEventSourceConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AmazonManagedKafkaEventSourceConfigFilterSensitiveLog = AmazonManagedKafkaEventSourceConfigFilterSensitiveLog;
    var CreateAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateAliasRequestFilterSensitiveLog = CreateAliasRequestFilterSensitiveLog;
    var CodeSigningPoliciesFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CodeSigningPoliciesFilterSensitiveLog = CodeSigningPoliciesFilterSensitiveLog;
    var CreateCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateCodeSigningConfigRequestFilterSensitiveLog = CreateCodeSigningConfigRequestFilterSensitiveLog;
    var CodeSigningConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CodeSigningConfigFilterSensitiveLog = CodeSigningConfigFilterSensitiveLog;
    var CreateCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateCodeSigningConfigResponseFilterSensitiveLog = CreateCodeSigningConfigResponseFilterSensitiveLog;
    var OnFailureFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OnFailureFilterSensitiveLog = OnFailureFilterSensitiveLog;
    var OnSuccessFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OnSuccessFilterSensitiveLog = OnSuccessFilterSensitiveLog;
    var DestinationConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DestinationConfigFilterSensitiveLog = DestinationConfigFilterSensitiveLog;
    var FilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FilterFilterSensitiveLog = FilterFilterSensitiveLog;
    var FilterCriteriaFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FilterCriteriaFilterSensitiveLog = FilterCriteriaFilterSensitiveLog;
    var ScalingConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ScalingConfigFilterSensitiveLog = ScalingConfigFilterSensitiveLog;
    var SelfManagedEventSourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SelfManagedEventSourceFilterSensitiveLog = SelfManagedEventSourceFilterSensitiveLog;
    var SelfManagedKafkaEventSourceConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SelfManagedKafkaEventSourceConfigFilterSensitiveLog = SelfManagedKafkaEventSourceConfigFilterSensitiveLog;
    var SourceAccessConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SourceAccessConfigurationFilterSensitiveLog = SourceAccessConfigurationFilterSensitiveLog;
    var CreateEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateEventSourceMappingRequestFilterSensitiveLog = CreateEventSourceMappingRequestFilterSensitiveLog;
    var EventSourceMappingConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EventSourceMappingConfigurationFilterSensitiveLog = EventSourceMappingConfigurationFilterSensitiveLog;
    var FunctionCodeFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ZipFile && { ZipFile: smithy_client_1.SENSITIVE_STRING }
    });
    exports.FunctionCodeFilterSensitiveLog = FunctionCodeFilterSensitiveLog;
    var DeadLetterConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeadLetterConfigFilterSensitiveLog = DeadLetterConfigFilterSensitiveLog;
    var EnvironmentFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Variables && { Variables: smithy_client_1.SENSITIVE_STRING }
    });
    exports.EnvironmentFilterSensitiveLog = EnvironmentFilterSensitiveLog;
    var EphemeralStorageFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EphemeralStorageFilterSensitiveLog = EphemeralStorageFilterSensitiveLog;
    var FileSystemConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FileSystemConfigFilterSensitiveLog = FileSystemConfigFilterSensitiveLog;
    var ImageConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ImageConfigFilterSensitiveLog = ImageConfigFilterSensitiveLog;
    var SnapStartFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SnapStartFilterSensitiveLog = SnapStartFilterSensitiveLog;
    var TracingConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TracingConfigFilterSensitiveLog = TracingConfigFilterSensitiveLog;
    var VpcConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.VpcConfigFilterSensitiveLog = VpcConfigFilterSensitiveLog;
    var CreateFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Code && { Code: (0, exports.FunctionCodeFilterSensitiveLog)(obj.Code) },
      ...obj.Environment && { Environment: (0, exports.EnvironmentFilterSensitiveLog)(obj.Environment) }
    });
    exports.CreateFunctionRequestFilterSensitiveLog = CreateFunctionRequestFilterSensitiveLog;
    var EnvironmentErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
    });
    exports.EnvironmentErrorFilterSensitiveLog = EnvironmentErrorFilterSensitiveLog;
    var EnvironmentResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Variables && { Variables: smithy_client_1.SENSITIVE_STRING },
      ...obj.Error && { Error: (0, exports.EnvironmentErrorFilterSensitiveLog)(obj.Error) }
    });
    exports.EnvironmentResponseFilterSensitiveLog = EnvironmentResponseFilterSensitiveLog;
    var ImageConfigErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ImageConfigErrorFilterSensitiveLog = ImageConfigErrorFilterSensitiveLog;
    var ImageConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Error && { Error: (0, exports.ImageConfigErrorFilterSensitiveLog)(obj.Error) }
    });
    exports.ImageConfigResponseFilterSensitiveLog = ImageConfigResponseFilterSensitiveLog;
    var LayerFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LayerFilterSensitiveLog = LayerFilterSensitiveLog;
    var RuntimeVersionErrorFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Message && { Message: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RuntimeVersionErrorFilterSensitiveLog = RuntimeVersionErrorFilterSensitiveLog;
    var RuntimeVersionConfigFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Error && { Error: (0, exports.RuntimeVersionErrorFilterSensitiveLog)(obj.Error) }
    });
    exports.RuntimeVersionConfigFilterSensitiveLog = RuntimeVersionConfigFilterSensitiveLog;
    var SnapStartResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SnapStartResponseFilterSensitiveLog = SnapStartResponseFilterSensitiveLog;
    var TracingConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TracingConfigResponseFilterSensitiveLog = TracingConfigResponseFilterSensitiveLog;
    var VpcConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.VpcConfigResponseFilterSensitiveLog = VpcConfigResponseFilterSensitiveLog;
    var FunctionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Environment && { Environment: (0, exports.EnvironmentResponseFilterSensitiveLog)(obj.Environment) },
      ...obj.ImageConfigResponse && {
        ImageConfigResponse: (0, exports.ImageConfigResponseFilterSensitiveLog)(obj.ImageConfigResponse)
      },
      ...obj.RuntimeVersionConfig && {
        RuntimeVersionConfig: (0, exports.RuntimeVersionConfigFilterSensitiveLog)(obj.RuntimeVersionConfig)
      }
    });
    exports.FunctionConfigurationFilterSensitiveLog = FunctionConfigurationFilterSensitiveLog;
    var CorsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CorsFilterSensitiveLog = CorsFilterSensitiveLog;
    var CreateFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateFunctionUrlConfigRequestFilterSensitiveLog = CreateFunctionUrlConfigRequestFilterSensitiveLog;
    var CreateFunctionUrlConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateFunctionUrlConfigResponseFilterSensitiveLog = CreateFunctionUrlConfigResponseFilterSensitiveLog;
    var DeleteAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteAliasRequestFilterSensitiveLog = DeleteAliasRequestFilterSensitiveLog;
    var DeleteCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteCodeSigningConfigRequestFilterSensitiveLog = DeleteCodeSigningConfigRequestFilterSensitiveLog;
    var DeleteCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteCodeSigningConfigResponseFilterSensitiveLog = DeleteCodeSigningConfigResponseFilterSensitiveLog;
    var DeleteEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteEventSourceMappingRequestFilterSensitiveLog = DeleteEventSourceMappingRequestFilterSensitiveLog;
    var DeleteFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteFunctionRequestFilterSensitiveLog = DeleteFunctionRequestFilterSensitiveLog;
    var DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog = DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog;
    var DeleteFunctionConcurrencyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteFunctionConcurrencyRequestFilterSensitiveLog = DeleteFunctionConcurrencyRequestFilterSensitiveLog;
    var DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog = DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var DeleteFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteFunctionUrlConfigRequestFilterSensitiveLog = DeleteFunctionUrlConfigRequestFilterSensitiveLog;
    var DeleteLayerVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteLayerVersionRequestFilterSensitiveLog = DeleteLayerVersionRequestFilterSensitiveLog;
    var DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog = DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog;
    var GetAccountSettingsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccountSettingsRequestFilterSensitiveLog = GetAccountSettingsRequestFilterSensitiveLog;
    var GetAccountSettingsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccountSettingsResponseFilterSensitiveLog = GetAccountSettingsResponseFilterSensitiveLog;
    var GetAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAliasRequestFilterSensitiveLog = GetAliasRequestFilterSensitiveLog;
    var GetCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCodeSigningConfigRequestFilterSensitiveLog = GetCodeSigningConfigRequestFilterSensitiveLog;
    var GetCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCodeSigningConfigResponseFilterSensitiveLog = GetCodeSigningConfigResponseFilterSensitiveLog;
    var GetEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetEventSourceMappingRequestFilterSensitiveLog = GetEventSourceMappingRequestFilterSensitiveLog;
    var GetFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionRequestFilterSensitiveLog = GetFunctionRequestFilterSensitiveLog;
    var FunctionCodeLocationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FunctionCodeLocationFilterSensitiveLog = FunctionCodeLocationFilterSensitiveLog;
    var ConcurrencyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ConcurrencyFilterSensitiveLog = ConcurrencyFilterSensitiveLog;
    var GetFunctionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Configuration && { Configuration: (0, exports.FunctionConfigurationFilterSensitiveLog)(obj.Configuration) }
    });
    exports.GetFunctionResponseFilterSensitiveLog = GetFunctionResponseFilterSensitiveLog;
    var GetFunctionCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionCodeSigningConfigRequestFilterSensitiveLog = GetFunctionCodeSigningConfigRequestFilterSensitiveLog;
    var GetFunctionCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionCodeSigningConfigResponseFilterSensitiveLog = GetFunctionCodeSigningConfigResponseFilterSensitiveLog;
    var GetFunctionConcurrencyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionConcurrencyRequestFilterSensitiveLog = GetFunctionConcurrencyRequestFilterSensitiveLog;
    var GetFunctionConcurrencyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionConcurrencyResponseFilterSensitiveLog = GetFunctionConcurrencyResponseFilterSensitiveLog;
    var GetFunctionConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionConfigurationRequestFilterSensitiveLog = GetFunctionConfigurationRequestFilterSensitiveLog;
    var FunctionEventInvokeConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FunctionEventInvokeConfigFilterSensitiveLog = FunctionEventInvokeConfigFilterSensitiveLog;
    var GetFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionEventInvokeConfigRequestFilterSensitiveLog = GetFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var GetFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionUrlConfigRequestFilterSensitiveLog = GetFunctionUrlConfigRequestFilterSensitiveLog;
    var GetFunctionUrlConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFunctionUrlConfigResponseFilterSensitiveLog = GetFunctionUrlConfigResponseFilterSensitiveLog;
    var GetLayerVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLayerVersionRequestFilterSensitiveLog = GetLayerVersionRequestFilterSensitiveLog;
    var LayerVersionContentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LayerVersionContentOutputFilterSensitiveLog = LayerVersionContentOutputFilterSensitiveLog;
    var GetLayerVersionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLayerVersionResponseFilterSensitiveLog = GetLayerVersionResponseFilterSensitiveLog;
    var GetLayerVersionByArnRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLayerVersionByArnRequestFilterSensitiveLog = GetLayerVersionByArnRequestFilterSensitiveLog;
    var GetLayerVersionPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLayerVersionPolicyRequestFilterSensitiveLog = GetLayerVersionPolicyRequestFilterSensitiveLog;
    var GetLayerVersionPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetLayerVersionPolicyResponseFilterSensitiveLog = GetLayerVersionPolicyResponseFilterSensitiveLog;
    var GetPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPolicyRequestFilterSensitiveLog = GetPolicyRequestFilterSensitiveLog;
    var GetPolicyResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetPolicyResponseFilterSensitiveLog = GetPolicyResponseFilterSensitiveLog;
    var GetProvisionedConcurrencyConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetProvisionedConcurrencyConfigRequestFilterSensitiveLog = GetProvisionedConcurrencyConfigRequestFilterSensitiveLog;
    var GetProvisionedConcurrencyConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetProvisionedConcurrencyConfigResponseFilterSensitiveLog = GetProvisionedConcurrencyConfigResponseFilterSensitiveLog;
    var GetRuntimeManagementConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRuntimeManagementConfigRequestFilterSensitiveLog = GetRuntimeManagementConfigRequestFilterSensitiveLog;
    var GetRuntimeManagementConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetRuntimeManagementConfigResponseFilterSensitiveLog = GetRuntimeManagementConfigResponseFilterSensitiveLog;
    var InvocationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    });
    exports.InvocationRequestFilterSensitiveLog = InvocationRequestFilterSensitiveLog;
    var InvocationResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: smithy_client_1.SENSITIVE_STRING }
    });
    exports.InvocationResponseFilterSensitiveLog = InvocationResponseFilterSensitiveLog;
    var InvokeAsyncRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InvokeAsyncRequestFilterSensitiveLog = InvokeAsyncRequestFilterSensitiveLog;
    var InvokeAsyncResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.InvokeAsyncResponseFilterSensitiveLog = InvokeAsyncResponseFilterSensitiveLog;
    var ListAliasesRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAliasesRequestFilterSensitiveLog = ListAliasesRequestFilterSensitiveLog;
    var ListAliasesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAliasesResponseFilterSensitiveLog = ListAliasesResponseFilterSensitiveLog;
    var ListCodeSigningConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListCodeSigningConfigsRequestFilterSensitiveLog = ListCodeSigningConfigsRequestFilterSensitiveLog;
    var ListCodeSigningConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListCodeSigningConfigsResponseFilterSensitiveLog = ListCodeSigningConfigsResponseFilterSensitiveLog;
    var ListEventSourceMappingsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListEventSourceMappingsRequestFilterSensitiveLog = ListEventSourceMappingsRequestFilterSensitiveLog;
    var ListEventSourceMappingsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListEventSourceMappingsResponseFilterSensitiveLog = ListEventSourceMappingsResponseFilterSensitiveLog;
    var ListFunctionEventInvokeConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionEventInvokeConfigsRequestFilterSensitiveLog = ListFunctionEventInvokeConfigsRequestFilterSensitiveLog;
    var ListFunctionEventInvokeConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionEventInvokeConfigsResponseFilterSensitiveLog = ListFunctionEventInvokeConfigsResponseFilterSensitiveLog;
    var ListFunctionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionsRequestFilterSensitiveLog = ListFunctionsRequestFilterSensitiveLog;
    var ListFunctionsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Functions && { Functions: obj.Functions.map((item) => (0, exports.FunctionConfigurationFilterSensitiveLog)(item)) }
    });
    exports.ListFunctionsResponseFilterSensitiveLog = ListFunctionsResponseFilterSensitiveLog;
    var ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog = ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog;
    var ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog = ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog;
    var ListFunctionUrlConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionUrlConfigsRequestFilterSensitiveLog = ListFunctionUrlConfigsRequestFilterSensitiveLog;
    var FunctionUrlConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FunctionUrlConfigFilterSensitiveLog = FunctionUrlConfigFilterSensitiveLog;
    var ListFunctionUrlConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListFunctionUrlConfigsResponseFilterSensitiveLog = ListFunctionUrlConfigsResponseFilterSensitiveLog;
    var ListLayersRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListLayersRequestFilterSensitiveLog = ListLayersRequestFilterSensitiveLog;
    var LayerVersionsListItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LayerVersionsListItemFilterSensitiveLog = LayerVersionsListItemFilterSensitiveLog;
    var LayersListItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LayersListItemFilterSensitiveLog = LayersListItemFilterSensitiveLog;
    var ListLayersResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListLayersResponseFilterSensitiveLog = ListLayersResponseFilterSensitiveLog;
    var ListLayerVersionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListLayerVersionsRequestFilterSensitiveLog = ListLayerVersionsRequestFilterSensitiveLog;
    var ListLayerVersionsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListLayerVersionsResponseFilterSensitiveLog = ListLayerVersionsResponseFilterSensitiveLog;
    var ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog = ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog;
    var ProvisionedConcurrencyConfigListItemFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ProvisionedConcurrencyConfigListItemFilterSensitiveLog = ProvisionedConcurrencyConfigListItemFilterSensitiveLog;
    var ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog = ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog;
    var ListTagsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTagsRequestFilterSensitiveLog = ListTagsRequestFilterSensitiveLog;
    var ListTagsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTagsResponseFilterSensitiveLog = ListTagsResponseFilterSensitiveLog;
    var ListVersionsByFunctionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListVersionsByFunctionRequestFilterSensitiveLog = ListVersionsByFunctionRequestFilterSensitiveLog;
    var ListVersionsByFunctionResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Versions && { Versions: obj.Versions.map((item) => (0, exports.FunctionConfigurationFilterSensitiveLog)(item)) }
    });
    exports.ListVersionsByFunctionResponseFilterSensitiveLog = ListVersionsByFunctionResponseFilterSensitiveLog;
    var LayerVersionContentInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ZipFile && { ZipFile: smithy_client_1.SENSITIVE_STRING }
    });
    exports.LayerVersionContentInputFilterSensitiveLog = LayerVersionContentInputFilterSensitiveLog;
    var PublishLayerVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Content && { Content: (0, exports.LayerVersionContentInputFilterSensitiveLog)(obj.Content) }
    });
    exports.PublishLayerVersionRequestFilterSensitiveLog = PublishLayerVersionRequestFilterSensitiveLog;
    var PublishLayerVersionResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PublishLayerVersionResponseFilterSensitiveLog = PublishLayerVersionResponseFilterSensitiveLog;
    var PublishVersionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PublishVersionRequestFilterSensitiveLog = PublishVersionRequestFilterSensitiveLog;
    var PutFunctionCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutFunctionCodeSigningConfigRequestFilterSensitiveLog = PutFunctionCodeSigningConfigRequestFilterSensitiveLog;
    var PutFunctionCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutFunctionCodeSigningConfigResponseFilterSensitiveLog = PutFunctionCodeSigningConfigResponseFilterSensitiveLog;
    var PutFunctionConcurrencyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutFunctionConcurrencyRequestFilterSensitiveLog = PutFunctionConcurrencyRequestFilterSensitiveLog;
    var PutFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutFunctionEventInvokeConfigRequestFilterSensitiveLog = PutFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var PutProvisionedConcurrencyConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutProvisionedConcurrencyConfigRequestFilterSensitiveLog = PutProvisionedConcurrencyConfigRequestFilterSensitiveLog;
    var PutProvisionedConcurrencyConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutProvisionedConcurrencyConfigResponseFilterSensitiveLog = PutProvisionedConcurrencyConfigResponseFilterSensitiveLog;
    var PutRuntimeManagementConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutRuntimeManagementConfigRequestFilterSensitiveLog = PutRuntimeManagementConfigRequestFilterSensitiveLog;
    var PutRuntimeManagementConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PutRuntimeManagementConfigResponseFilterSensitiveLog = PutRuntimeManagementConfigResponseFilterSensitiveLog;
    var RemoveLayerVersionPermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemoveLayerVersionPermissionRequestFilterSensitiveLog = RemoveLayerVersionPermissionRequestFilterSensitiveLog;
    var RemovePermissionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RemovePermissionRequestFilterSensitiveLog = RemovePermissionRequestFilterSensitiveLog;
    var TagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
    var UntagResourceRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
    var UpdateAliasRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateAliasRequestFilterSensitiveLog = UpdateAliasRequestFilterSensitiveLog;
    var UpdateCodeSigningConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateCodeSigningConfigRequestFilterSensitiveLog = UpdateCodeSigningConfigRequestFilterSensitiveLog;
    var UpdateCodeSigningConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateCodeSigningConfigResponseFilterSensitiveLog = UpdateCodeSigningConfigResponseFilterSensitiveLog;
    var UpdateEventSourceMappingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateEventSourceMappingRequestFilterSensitiveLog = UpdateEventSourceMappingRequestFilterSensitiveLog;
    var UpdateFunctionCodeRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ZipFile && { ZipFile: smithy_client_1.SENSITIVE_STRING }
    });
    exports.UpdateFunctionCodeRequestFilterSensitiveLog = UpdateFunctionCodeRequestFilterSensitiveLog;
    var UpdateFunctionConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Environment && { Environment: (0, exports.EnvironmentFilterSensitiveLog)(obj.Environment) }
    });
    exports.UpdateFunctionConfigurationRequestFilterSensitiveLog = UpdateFunctionConfigurationRequestFilterSensitiveLog;
    var UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog = UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog;
    var UpdateFunctionUrlConfigRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateFunctionUrlConfigRequestFilterSensitiveLog = UpdateFunctionUrlConfigRequestFilterSensitiveLog;
    var UpdateFunctionUrlConfigResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateFunctionUrlConfigResponseFilterSensitiveLog = UpdateFunctionUrlConfigResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js
var require_FieldPosition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/FieldPosition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FieldPosition = void 0;
    var FieldPosition;
    (function(FieldPosition2) {
      FieldPosition2[FieldPosition2["HEADER"] = 0] = "HEADER";
      FieldPosition2[FieldPosition2["TRAILER"] = 1] = "TRAILER";
    })(FieldPosition = exports.FieldPosition || (exports.FieldPosition = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js
var require_Field = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Field.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Field = void 0;
    var FieldPosition_1 = require_FieldPosition();
    var Field = class {
      constructor({ name, kind = FieldPosition_1.FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
      }
      add(value) {
        this.values.push(value);
      }
      set(values) {
        this.values = values;
      }
      remove(value) {
        this.values = this.values.filter((v) => v !== value);
      }
      toString() {
        return this.values.map((v) => v.includes(",") || v.includes(" ") ? `"${v}"` : v).join(", ");
      }
      get() {
        return this.values;
      }
    };
    exports.Field = Field;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js
var require_Fields = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/Fields.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fields = void 0;
    var Fields = class {
      constructor({ fields = [], encoding = "utf-8" }) {
        this.entries = {};
        fields.forEach(this.setField.bind(this));
        this.encoding = encoding;
      }
      setField(field) {
        this.entries[field.name] = field;
      }
      getField(name) {
        return this.entries[name];
      }
      removeField(name) {
        delete this.entries[name];
      }
      getByType(kind) {
        return Object.values(this.entries).filter((field) => field.kind === kind);
      }
    };
    exports.Fields = Fields;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class _HttpRequest {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new _HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+protocol-http@3.272.0/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Field(), exports);
    tslib_1.__exportStar(require_FieldPosition(), exports);
    tslib_1.__exportStar(require_Fields(), exports);
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_restJson1PutFunctionCodeSigningConfigCommand = exports.serializeAws_restJson1PublishVersionCommand = exports.serializeAws_restJson1PublishLayerVersionCommand = exports.serializeAws_restJson1ListVersionsByFunctionCommand = exports.serializeAws_restJson1ListTagsCommand = exports.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = exports.serializeAws_restJson1ListLayerVersionsCommand = exports.serializeAws_restJson1ListLayersCommand = exports.serializeAws_restJson1ListFunctionUrlConfigsCommand = exports.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = exports.serializeAws_restJson1ListFunctionsCommand = exports.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = exports.serializeAws_restJson1ListEventSourceMappingsCommand = exports.serializeAws_restJson1ListCodeSigningConfigsCommand = exports.serializeAws_restJson1ListAliasesCommand = exports.serializeAws_restJson1InvokeAsyncCommand = exports.serializeAws_restJson1InvokeCommand = exports.serializeAws_restJson1GetRuntimeManagementConfigCommand = exports.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = exports.serializeAws_restJson1GetPolicyCommand = exports.serializeAws_restJson1GetLayerVersionPolicyCommand = exports.serializeAws_restJson1GetLayerVersionByArnCommand = exports.serializeAws_restJson1GetLayerVersionCommand = exports.serializeAws_restJson1GetFunctionUrlConfigCommand = exports.serializeAws_restJson1GetFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1GetFunctionConfigurationCommand = exports.serializeAws_restJson1GetFunctionConcurrencyCommand = exports.serializeAws_restJson1GetFunctionCodeSigningConfigCommand = exports.serializeAws_restJson1GetFunctionCommand = exports.serializeAws_restJson1GetEventSourceMappingCommand = exports.serializeAws_restJson1GetCodeSigningConfigCommand = exports.serializeAws_restJson1GetAliasCommand = exports.serializeAws_restJson1GetAccountSettingsCommand = exports.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = exports.serializeAws_restJson1DeleteLayerVersionCommand = exports.serializeAws_restJson1DeleteFunctionUrlConfigCommand = exports.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1DeleteFunctionConcurrencyCommand = exports.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = exports.serializeAws_restJson1DeleteFunctionCommand = exports.serializeAws_restJson1DeleteEventSourceMappingCommand = exports.serializeAws_restJson1DeleteCodeSigningConfigCommand = exports.serializeAws_restJson1DeleteAliasCommand = exports.serializeAws_restJson1CreateFunctionUrlConfigCommand = exports.serializeAws_restJson1CreateFunctionCommand = exports.serializeAws_restJson1CreateEventSourceMappingCommand = exports.serializeAws_restJson1CreateCodeSigningConfigCommand = exports.serializeAws_restJson1CreateAliasCommand = exports.serializeAws_restJson1AddPermissionCommand = exports.serializeAws_restJson1AddLayerVersionPermissionCommand = void 0;
    exports.deserializeAws_restJson1InvokeAsyncCommand = exports.deserializeAws_restJson1InvokeCommand = exports.deserializeAws_restJson1GetRuntimeManagementConfigCommand = exports.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = exports.deserializeAws_restJson1GetPolicyCommand = exports.deserializeAws_restJson1GetLayerVersionPolicyCommand = exports.deserializeAws_restJson1GetLayerVersionByArnCommand = exports.deserializeAws_restJson1GetLayerVersionCommand = exports.deserializeAws_restJson1GetFunctionUrlConfigCommand = exports.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1GetFunctionConfigurationCommand = exports.deserializeAws_restJson1GetFunctionConcurrencyCommand = exports.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = exports.deserializeAws_restJson1GetFunctionCommand = exports.deserializeAws_restJson1GetEventSourceMappingCommand = exports.deserializeAws_restJson1GetCodeSigningConfigCommand = exports.deserializeAws_restJson1GetAliasCommand = exports.deserializeAws_restJson1GetAccountSettingsCommand = exports.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = exports.deserializeAws_restJson1DeleteLayerVersionCommand = exports.deserializeAws_restJson1DeleteFunctionUrlConfigCommand = exports.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1DeleteFunctionConcurrencyCommand = exports.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = exports.deserializeAws_restJson1DeleteFunctionCommand = exports.deserializeAws_restJson1DeleteEventSourceMappingCommand = exports.deserializeAws_restJson1DeleteCodeSigningConfigCommand = exports.deserializeAws_restJson1DeleteAliasCommand = exports.deserializeAws_restJson1CreateFunctionUrlConfigCommand = exports.deserializeAws_restJson1CreateFunctionCommand = exports.deserializeAws_restJson1CreateEventSourceMappingCommand = exports.deserializeAws_restJson1CreateCodeSigningConfigCommand = exports.deserializeAws_restJson1CreateAliasCommand = exports.deserializeAws_restJson1AddPermissionCommand = exports.deserializeAws_restJson1AddLayerVersionPermissionCommand = exports.serializeAws_restJson1UpdateFunctionUrlConfigCommand = exports.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1UpdateFunctionConfigurationCommand = exports.serializeAws_restJson1UpdateFunctionCodeCommand = exports.serializeAws_restJson1UpdateEventSourceMappingCommand = exports.serializeAws_restJson1UpdateCodeSigningConfigCommand = exports.serializeAws_restJson1UpdateAliasCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1RemovePermissionCommand = exports.serializeAws_restJson1RemoveLayerVersionPermissionCommand = exports.serializeAws_restJson1PutRuntimeManagementConfigCommand = exports.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = exports.serializeAws_restJson1PutFunctionEventInvokeConfigCommand = exports.serializeAws_restJson1PutFunctionConcurrencyCommand = void 0;
    exports.deserializeAws_restJson1UpdateFunctionUrlConfigCommand = exports.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1UpdateFunctionConfigurationCommand = exports.deserializeAws_restJson1UpdateFunctionCodeCommand = exports.deserializeAws_restJson1UpdateEventSourceMappingCommand = exports.deserializeAws_restJson1UpdateCodeSigningConfigCommand = exports.deserializeAws_restJson1UpdateAliasCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1RemovePermissionCommand = exports.deserializeAws_restJson1RemoveLayerVersionPermissionCommand = exports.deserializeAws_restJson1PutRuntimeManagementConfigCommand = exports.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = exports.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = exports.deserializeAws_restJson1PutFunctionConcurrencyCommand = exports.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = exports.deserializeAws_restJson1PublishVersionCommand = exports.deserializeAws_restJson1PublishLayerVersionCommand = exports.deserializeAws_restJson1ListVersionsByFunctionCommand = exports.deserializeAws_restJson1ListTagsCommand = exports.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = exports.deserializeAws_restJson1ListLayerVersionsCommand = exports.deserializeAws_restJson1ListLayersCommand = exports.deserializeAws_restJson1ListFunctionUrlConfigsCommand = exports.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = exports.deserializeAws_restJson1ListFunctionsCommand = exports.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = exports.deserializeAws_restJson1ListEventSourceMappingsCommand = exports.deserializeAws_restJson1ListCodeSigningConfigsCommand = exports.deserializeAws_restJson1ListAliasesCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var LambdaServiceException_1 = require_LambdaServiceException();
    var models_0_1 = require_models_0();
    var serializeAws_restJson1AddLayerVersionPermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      const query = map({
        RevisionId: [, input.RevisionId]
      });
      let body;
      body = JSON.stringify({
        ...input.Action != null && { Action: input.Action },
        ...input.OrganizationId != null && { OrganizationId: input.OrganizationId },
        ...input.Principal != null && { Principal: input.Principal },
        ...input.StatementId != null && { StatementId: input.StatementId }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1AddLayerVersionPermissionCommand = serializeAws_restJson1AddLayerVersionPermissionCommand;
    var serializeAws_restJson1AddPermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.Action != null && { Action: input.Action },
        ...input.EventSourceToken != null && { EventSourceToken: input.EventSourceToken },
        ...input.FunctionUrlAuthType != null && { FunctionUrlAuthType: input.FunctionUrlAuthType },
        ...input.Principal != null && { Principal: input.Principal },
        ...input.PrincipalOrgID != null && { PrincipalOrgID: input.PrincipalOrgID },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.SourceAccount != null && { SourceAccount: input.SourceAccount },
        ...input.SourceArn != null && { SourceArn: input.SourceArn },
        ...input.StatementId != null && { StatementId: input.StatementId }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1AddPermissionCommand = serializeAws_restJson1AddPermissionCommand;
    var serializeAws_restJson1CreateAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.Description != null && { Description: input.Description },
        ...input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion },
        ...input.Name != null && { Name: input.Name },
        ...input.RoutingConfig != null && {
          RoutingConfig: serializeAws_restJson1AliasRoutingConfiguration(input.RoutingConfig, context)
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateAliasCommand = serializeAws_restJson1CreateAliasCommand;
    var serializeAws_restJson1CreateCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs`;
      let body;
      body = JSON.stringify({
        ...input.AllowedPublishers != null && {
          AllowedPublishers: serializeAws_restJson1AllowedPublishers(input.AllowedPublishers, context)
        },
        ...input.CodeSigningPolicies != null && {
          CodeSigningPolicies: serializeAws_restJson1CodeSigningPolicies(input.CodeSigningPolicies, context)
        },
        ...input.Description != null && { Description: input.Description }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateCodeSigningConfigCommand = serializeAws_restJson1CreateCodeSigningConfigCommand;
    var serializeAws_restJson1CreateEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings`;
      let body;
      body = JSON.stringify({
        ...input.AmazonManagedKafkaEventSourceConfig != null && {
          AmazonManagedKafkaEventSourceConfig: serializeAws_restJson1AmazonManagedKafkaEventSourceConfig(input.AmazonManagedKafkaEventSourceConfig, context)
        },
        ...input.BatchSize != null && { BatchSize: input.BatchSize },
        ...input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError },
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.EventSourceArn != null && { EventSourceArn: input.EventSourceArn },
        ...input.FilterCriteria != null && {
          FilterCriteria: serializeAws_restJson1FilterCriteria(input.FilterCriteria, context)
        },
        ...input.FunctionName != null && { FunctionName: input.FunctionName },
        ...input.FunctionResponseTypes != null && {
          FunctionResponseTypes: serializeAws_restJson1FunctionResponseTypeList(input.FunctionResponseTypes, context)
        },
        ...input.MaximumBatchingWindowInSeconds != null && {
          MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds
        },
        ...input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts },
        ...input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor },
        ...input.Queues != null && { Queues: serializeAws_restJson1Queues(input.Queues, context) },
        ...input.ScalingConfig != null && {
          ScalingConfig: serializeAws_restJson1ScalingConfig(input.ScalingConfig, context)
        },
        ...input.SelfManagedEventSource != null && {
          SelfManagedEventSource: serializeAws_restJson1SelfManagedEventSource(input.SelfManagedEventSource, context)
        },
        ...input.SelfManagedKafkaEventSourceConfig != null && {
          SelfManagedKafkaEventSourceConfig: serializeAws_restJson1SelfManagedKafkaEventSourceConfig(input.SelfManagedKafkaEventSourceConfig, context)
        },
        ...input.SourceAccessConfigurations != null && {
          SourceAccessConfigurations: serializeAws_restJson1SourceAccessConfigurations(input.SourceAccessConfigurations, context)
        },
        ...input.StartingPosition != null && { StartingPosition: input.StartingPosition },
        ...input.StartingPositionTimestamp != null && {
          StartingPositionTimestamp: Math.round(input.StartingPositionTimestamp.getTime() / 1e3)
        },
        ...input.Topics != null && { Topics: serializeAws_restJson1Topics(input.Topics, context) },
        ...input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateEventSourceMappingCommand = serializeAws_restJson1CreateEventSourceMappingCommand;
    var serializeAws_restJson1CreateFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions`;
      let body;
      body = JSON.stringify({
        ...input.Architectures != null && {
          Architectures: serializeAws_restJson1ArchitecturesList(input.Architectures, context)
        },
        ...input.Code != null && { Code: serializeAws_restJson1FunctionCode(input.Code, context) },
        ...input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn },
        ...input.DeadLetterConfig != null && {
          DeadLetterConfig: serializeAws_restJson1DeadLetterConfig(input.DeadLetterConfig, context)
        },
        ...input.Description != null && { Description: input.Description },
        ...input.Environment != null && { Environment: serializeAws_restJson1Environment(input.Environment, context) },
        ...input.EphemeralStorage != null && {
          EphemeralStorage: serializeAws_restJson1EphemeralStorage(input.EphemeralStorage, context)
        },
        ...input.FileSystemConfigs != null && {
          FileSystemConfigs: serializeAws_restJson1FileSystemConfigList(input.FileSystemConfigs, context)
        },
        ...input.FunctionName != null && { FunctionName: input.FunctionName },
        ...input.Handler != null && { Handler: input.Handler },
        ...input.ImageConfig != null && { ImageConfig: serializeAws_restJson1ImageConfig(input.ImageConfig, context) },
        ...input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn },
        ...input.Layers != null && { Layers: serializeAws_restJson1LayerList(input.Layers, context) },
        ...input.MemorySize != null && { MemorySize: input.MemorySize },
        ...input.PackageType != null && { PackageType: input.PackageType },
        ...input.Publish != null && { Publish: input.Publish },
        ...input.Role != null && { Role: input.Role },
        ...input.Runtime != null && { Runtime: input.Runtime },
        ...input.SnapStart != null && { SnapStart: serializeAws_restJson1SnapStart(input.SnapStart, context) },
        ...input.Tags != null && { Tags: serializeAws_restJson1Tags(input.Tags, context) },
        ...input.Timeout != null && { Timeout: input.Timeout },
        ...input.TracingConfig != null && {
          TracingConfig: serializeAws_restJson1TracingConfig(input.TracingConfig, context)
        },
        ...input.VpcConfig != null && { VpcConfig: serializeAws_restJson1VpcConfig(input.VpcConfig, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateFunctionCommand = serializeAws_restJson1CreateFunctionCommand;
    var serializeAws_restJson1CreateFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.AuthType != null && { AuthType: input.AuthType },
        ...input.Cors != null && { Cors: serializeAws_restJson1Cors(input.Cors, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1CreateFunctionUrlConfigCommand = serializeAws_restJson1CreateFunctionUrlConfigCommand;
    var serializeAws_restJson1DeleteAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases/{Name}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1DeleteAliasCommand = serializeAws_restJson1DeleteAliasCommand;
    var serializeAws_restJson1DeleteCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1DeleteCodeSigningConfigCommand = serializeAws_restJson1DeleteCodeSigningConfigCommand;
    var serializeAws_restJson1DeleteEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings/{UUID}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1DeleteEventSourceMappingCommand = serializeAws_restJson1DeleteEventSourceMappingCommand;
    var serializeAws_restJson1DeleteFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1DeleteFunctionCommand = serializeAws_restJson1DeleteFunctionCommand;
    var serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-06-30/functions/{FunctionName}/code-signing-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand;
    var serializeAws_restJson1DeleteFunctionConcurrencyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-10-31/functions/{FunctionName}/concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1DeleteFunctionConcurrencyCommand = serializeAws_restJson1DeleteFunctionConcurrencyCommand;
    var serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1DeleteFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1DeleteFunctionUrlConfigCommand = serializeAws_restJson1DeleteFunctionUrlConfigCommand;
    var serializeAws_restJson1DeleteLayerVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1DeleteLayerVersionCommand = serializeAws_restJson1DeleteLayerVersionCommand;
    var serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand;
    var serializeAws_restJson1GetAccountSettingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2016-08-19/account-settings`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetAccountSettingsCommand = serializeAws_restJson1GetAccountSettingsCommand;
    var serializeAws_restJson1GetAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases/{Name}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetAliasCommand = serializeAws_restJson1GetAliasCommand;
    var serializeAws_restJson1GetCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetCodeSigningConfigCommand = serializeAws_restJson1GetCodeSigningConfigCommand;
    var serializeAws_restJson1GetEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings/{UUID}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetEventSourceMappingCommand = serializeAws_restJson1GetEventSourceMappingCommand;
    var serializeAws_restJson1GetFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetFunctionCommand = serializeAws_restJson1GetFunctionCommand;
    var serializeAws_restJson1GetFunctionCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-06-30/functions/{FunctionName}/code-signing-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetFunctionCodeSigningConfigCommand = serializeAws_restJson1GetFunctionCodeSigningConfigCommand;
    var serializeAws_restJson1GetFunctionConcurrencyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetFunctionConcurrencyCommand = serializeAws_restJson1GetFunctionConcurrencyCommand;
    var serializeAws_restJson1GetFunctionConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetFunctionConfigurationCommand = serializeAws_restJson1GetFunctionConfigurationCommand;
    var serializeAws_restJson1GetFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetFunctionEventInvokeConfigCommand = serializeAws_restJson1GetFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1GetFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetFunctionUrlConfigCommand = serializeAws_restJson1GetFunctionUrlConfigCommand;
    var serializeAws_restJson1GetLayerVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetLayerVersionCommand = serializeAws_restJson1GetLayerVersionCommand;
    var serializeAws_restJson1GetLayerVersionByArnCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers`;
      const query = map({
        find: [, "LayerVersion"],
        Arn: [, (0, smithy_client_1.expectNonNull)(input.Arn, `Arn`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetLayerVersionByArnCommand = serializeAws_restJson1GetLayerVersionByArnCommand;
    var serializeAws_restJson1GetLayerVersionPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1GetLayerVersionPolicyCommand = serializeAws_restJson1GetLayerVersionPolicyCommand;
    var serializeAws_restJson1GetPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/policy`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetPolicyCommand = serializeAws_restJson1GetPolicyCommand;
    var serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand = serializeAws_restJson1GetProvisionedConcurrencyConfigCommand;
    var serializeAws_restJson1GetRuntimeManagementConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-07-20/functions/{FunctionName}/runtime-management-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRuntimeManagementConfigCommand = serializeAws_restJson1GetRuntimeManagementConfigCommand;
    var serializeAws_restJson1InvokeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "x-amz-invocation-type": input.InvocationType,
        "x-amz-log-type": input.LogType,
        "x-amz-client-context": input.ClientContext
      });
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/invocations`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      if (input.Payload !== void 0) {
        body = input.Payload;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1InvokeCommand = serializeAws_restJson1InvokeCommand;
    var serializeAws_restJson1InvokeAsyncCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/octet-stream"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2014-11-13/functions/{FunctionName}/invoke-async`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      if (input.InvokeArgs !== void 0) {
        body = input.InvokeArgs;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1InvokeAsyncCommand = serializeAws_restJson1InvokeAsyncCommand;
    var serializeAws_restJson1ListAliasesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAliasesCommand = serializeAws_restJson1ListAliasesCommand;
    var serializeAws_restJson1ListCodeSigningConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs`;
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListCodeSigningConfigsCommand = serializeAws_restJson1ListCodeSigningConfigsCommand;
    var serializeAws_restJson1ListEventSourceMappingsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings`;
      const query = map({
        EventSourceArn: [, input.EventSourceArn],
        FunctionName: [, input.FunctionName],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListEventSourceMappingsCommand = serializeAws_restJson1ListEventSourceMappingsCommand;
    var serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config/list`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand = serializeAws_restJson1ListFunctionEventInvokeConfigsCommand;
    var serializeAws_restJson1ListFunctionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions`;
      const query = map({
        MasterRegion: [, input.MasterRegion],
        FunctionVersion: [, input.FunctionVersion],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListFunctionsCommand = serializeAws_restJson1ListFunctionsCommand;
    var serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand;
    var serializeAws_restJson1ListFunctionUrlConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/urls`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListFunctionUrlConfigsCommand = serializeAws_restJson1ListFunctionUrlConfigsCommand;
    var serializeAws_restJson1ListLayersCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers`;
      const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListLayersCommand = serializeAws_restJson1ListLayersCommand;
    var serializeAws_restJson1ListLayerVersionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      const query = map({
        CompatibleRuntime: [, input.CompatibleRuntime],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        CompatibleArchitecture: [, input.CompatibleArchitecture]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListLayerVersionsCommand = serializeAws_restJson1ListLayerVersionsCommand;
    var serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        List: [, "ALL"],
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand;
    var serializeAws_restJson1ListTagsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-03-31/tags/{Resource}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1ListTagsCommand = serializeAws_restJson1ListTagsCommand;
    var serializeAws_restJson1ListVersionsByFunctionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Marker: [, input.Marker],
        MaxItems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListVersionsByFunctionCommand = serializeAws_restJson1ListVersionsByFunctionCommand;
    var serializeAws_restJson1PublishLayerVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      let body;
      body = JSON.stringify({
        ...input.CompatibleArchitectures != null && {
          CompatibleArchitectures: serializeAws_restJson1CompatibleArchitectures(input.CompatibleArchitectures, context)
        },
        ...input.CompatibleRuntimes != null && {
          CompatibleRuntimes: serializeAws_restJson1CompatibleRuntimes(input.CompatibleRuntimes, context)
        },
        ...input.Content != null && { Content: serializeAws_restJson1LayerVersionContentInput(input.Content, context) },
        ...input.Description != null && { Description: input.Description },
        ...input.LicenseInfo != null && { LicenseInfo: input.LicenseInfo }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1PublishLayerVersionCommand = serializeAws_restJson1PublishLayerVersionCommand;
    var serializeAws_restJson1PublishVersionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/versions`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.CodeSha256 != null && { CodeSha256: input.CodeSha256 },
        ...input.Description != null && { Description: input.Description },
        ...input.RevisionId != null && { RevisionId: input.RevisionId }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1PublishVersionCommand = serializeAws_restJson1PublishVersionCommand;
    var serializeAws_restJson1PutFunctionCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-06-30/functions/{FunctionName}/code-signing-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.CodeSigningConfigArn != null && { CodeSigningConfigArn: input.CodeSigningConfigArn }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1PutFunctionCodeSigningConfigCommand = serializeAws_restJson1PutFunctionCodeSigningConfigCommand;
    var serializeAws_restJson1PutFunctionConcurrencyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-10-31/functions/{FunctionName}/concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.ReservedConcurrentExecutions != null && {
          ReservedConcurrentExecutions: input.ReservedConcurrentExecutions
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1PutFunctionConcurrencyCommand = serializeAws_restJson1PutFunctionConcurrencyCommand;
    var serializeAws_restJson1PutFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1PutFunctionEventInvokeConfigCommand = serializeAws_restJson1PutFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-30/functions/{FunctionName}/provisioned-concurrency`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, (0, smithy_client_1.expectNonNull)(input.Qualifier, `Qualifier`)]
      });
      let body;
      body = JSON.stringify({
        ...input.ProvisionedConcurrentExecutions != null && {
          ProvisionedConcurrentExecutions: input.ProvisionedConcurrentExecutions
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand = serializeAws_restJson1PutProvisionedConcurrencyConfigCommand;
    var serializeAws_restJson1PutRuntimeManagementConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-07-20/functions/{FunctionName}/runtime-management-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.RuntimeVersionArn != null && { RuntimeVersionArn: input.RuntimeVersionArn },
        ...input.UpdateRuntimeOn != null && { UpdateRuntimeOn: input.UpdateRuntimeOn }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1PutRuntimeManagementConfigCommand = serializeAws_restJson1PutRuntimeManagementConfigCommand;
    var serializeAws_restJson1RemoveLayerVersionPermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "LayerName", () => input.LayerName, "{LayerName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "VersionNumber", () => input.VersionNumber.toString(), "{VersionNumber}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
      const query = map({
        RevisionId: [, input.RevisionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1RemoveLayerVersionPermissionCommand = serializeAws_restJson1RemoveLayerVersionPermissionCommand;
    var serializeAws_restJson1RemovePermissionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/policy/{StatementId}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "StatementId", () => input.StatementId, "{StatementId}", false);
      const query = map({
        Qualifier: [, input.Qualifier],
        RevisionId: [, input.RevisionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1RemovePermissionCommand = serializeAws_restJson1RemovePermissionCommand;
    var serializeAws_restJson1TagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-03-31/tags/{Resource}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
      let body;
      body = JSON.stringify({
        ...input.Tags != null && { Tags: serializeAws_restJson1Tags(input.Tags, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
    var serializeAws_restJson1UntagResourceCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2017-03-31/tags/{Resource}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Resource", () => input.Resource, "{Resource}", false);
      const query = map({
        tagKeys: [
          (0, smithy_client_1.expectNonNull)(input.TagKeys, `TagKeys`) != null,
          () => (input.TagKeys || []).map((_entry) => _entry)
        ]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
    var serializeAws_restJson1UpdateAliasCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/aliases/{Name}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
      let body;
      body = JSON.stringify({
        ...input.Description != null && { Description: input.Description },
        ...input.FunctionVersion != null && { FunctionVersion: input.FunctionVersion },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.RoutingConfig != null && {
          RoutingConfig: serializeAws_restJson1AliasRoutingConfiguration(input.RoutingConfig, context)
        }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1UpdateAliasCommand = serializeAws_restJson1UpdateAliasCommand;
    var serializeAws_restJson1UpdateCodeSigningConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2020-04-22/code-signing-configs/{CodeSigningConfigArn}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CodeSigningConfigArn", () => input.CodeSigningConfigArn, "{CodeSigningConfigArn}", false);
      let body;
      body = JSON.stringify({
        ...input.AllowedPublishers != null && {
          AllowedPublishers: serializeAws_restJson1AllowedPublishers(input.AllowedPublishers, context)
        },
        ...input.CodeSigningPolicies != null && {
          CodeSigningPolicies: serializeAws_restJson1CodeSigningPolicies(input.CodeSigningPolicies, context)
        },
        ...input.Description != null && { Description: input.Description }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1UpdateCodeSigningConfigCommand = serializeAws_restJson1UpdateCodeSigningConfigCommand;
    var serializeAws_restJson1UpdateEventSourceMappingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/event-source-mappings/{UUID}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "UUID", () => input.UUID, "{UUID}", false);
      let body;
      body = JSON.stringify({
        ...input.BatchSize != null && { BatchSize: input.BatchSize },
        ...input.BisectBatchOnFunctionError != null && { BisectBatchOnFunctionError: input.BisectBatchOnFunctionError },
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.FilterCriteria != null && {
          FilterCriteria: serializeAws_restJson1FilterCriteria(input.FilterCriteria, context)
        },
        ...input.FunctionName != null && { FunctionName: input.FunctionName },
        ...input.FunctionResponseTypes != null && {
          FunctionResponseTypes: serializeAws_restJson1FunctionResponseTypeList(input.FunctionResponseTypes, context)
        },
        ...input.MaximumBatchingWindowInSeconds != null && {
          MaximumBatchingWindowInSeconds: input.MaximumBatchingWindowInSeconds
        },
        ...input.MaximumRecordAgeInSeconds != null && { MaximumRecordAgeInSeconds: input.MaximumRecordAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts },
        ...input.ParallelizationFactor != null && { ParallelizationFactor: input.ParallelizationFactor },
        ...input.ScalingConfig != null && {
          ScalingConfig: serializeAws_restJson1ScalingConfig(input.ScalingConfig, context)
        },
        ...input.SourceAccessConfigurations != null && {
          SourceAccessConfigurations: serializeAws_restJson1SourceAccessConfigurations(input.SourceAccessConfigurations, context)
        },
        ...input.TumblingWindowInSeconds != null && { TumblingWindowInSeconds: input.TumblingWindowInSeconds }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1UpdateEventSourceMappingCommand = serializeAws_restJson1UpdateEventSourceMappingCommand;
    var serializeAws_restJson1UpdateFunctionCodeCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/code`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.Architectures != null && {
          Architectures: serializeAws_restJson1ArchitecturesList(input.Architectures, context)
        },
        ...input.DryRun != null && { DryRun: input.DryRun },
        ...input.ImageUri != null && { ImageUri: input.ImageUri },
        ...input.Publish != null && { Publish: input.Publish },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3Key != null && { S3Key: input.S3Key },
        ...input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion },
        ...input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1UpdateFunctionCodeCommand = serializeAws_restJson1UpdateFunctionCodeCommand;
    var serializeAws_restJson1UpdateFunctionConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2015-03-31/functions/{FunctionName}/configuration`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      let body;
      body = JSON.stringify({
        ...input.DeadLetterConfig != null && {
          DeadLetterConfig: serializeAws_restJson1DeadLetterConfig(input.DeadLetterConfig, context)
        },
        ...input.Description != null && { Description: input.Description },
        ...input.Environment != null && { Environment: serializeAws_restJson1Environment(input.Environment, context) },
        ...input.EphemeralStorage != null && {
          EphemeralStorage: serializeAws_restJson1EphemeralStorage(input.EphemeralStorage, context)
        },
        ...input.FileSystemConfigs != null && {
          FileSystemConfigs: serializeAws_restJson1FileSystemConfigList(input.FileSystemConfigs, context)
        },
        ...input.Handler != null && { Handler: input.Handler },
        ...input.ImageConfig != null && { ImageConfig: serializeAws_restJson1ImageConfig(input.ImageConfig, context) },
        ...input.KMSKeyArn != null && { KMSKeyArn: input.KMSKeyArn },
        ...input.Layers != null && { Layers: serializeAws_restJson1LayerList(input.Layers, context) },
        ...input.MemorySize != null && { MemorySize: input.MemorySize },
        ...input.RevisionId != null && { RevisionId: input.RevisionId },
        ...input.Role != null && { Role: input.Role },
        ...input.Runtime != null && { Runtime: input.Runtime },
        ...input.SnapStart != null && { SnapStart: serializeAws_restJson1SnapStart(input.SnapStart, context) },
        ...input.Timeout != null && { Timeout: input.Timeout },
        ...input.TracingConfig != null && {
          TracingConfig: serializeAws_restJson1TracingConfig(input.TracingConfig, context)
        },
        ...input.VpcConfig != null && { VpcConfig: serializeAws_restJson1VpcConfig(input.VpcConfig, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1UpdateFunctionConfigurationCommand = serializeAws_restJson1UpdateFunctionConfigurationCommand;
    var serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2019-09-25/functions/{FunctionName}/event-invoke-config`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.DestinationConfig != null && {
          DestinationConfig: serializeAws_restJson1DestinationConfig(input.DestinationConfig, context)
        },
        ...input.MaximumEventAgeInSeconds != null && { MaximumEventAgeInSeconds: input.MaximumEventAgeInSeconds },
        ...input.MaximumRetryAttempts != null && { MaximumRetryAttempts: input.MaximumRetryAttempts }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand;
    var serializeAws_restJson1UpdateFunctionUrlConfigCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/2021-10-31/functions/{FunctionName}/url`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "FunctionName", () => input.FunctionName, "{FunctionName}", false);
      const query = map({
        Qualifier: [, input.Qualifier]
      });
      let body;
      body = JSON.stringify({
        ...input.AuthType != null && { AuthType: input.AuthType },
        ...input.Cors != null && { Cors: serializeAws_restJson1Cors(input.Cors, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1UpdateFunctionUrlConfigCommand = serializeAws_restJson1UpdateFunctionUrlConfigCommand;
    var deserializeAws_restJson1AddLayerVersionPermissionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1AddLayerVersionPermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Statement != null) {
        contents.Statement = (0, smithy_client_1.expectString)(data.Statement);
      }
      return contents;
    };
    exports.deserializeAws_restJson1AddLayerVersionPermissionCommand = deserializeAws_restJson1AddLayerVersionPermissionCommand;
    var deserializeAws_restJson1AddLayerVersionPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
          throw await deserializeAws_restJson1PolicyLengthExceededExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1AddPermissionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1AddPermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Statement != null) {
        contents.Statement = (0, smithy_client_1.expectString)(data.Statement);
      }
      return contents;
    };
    exports.deserializeAws_restJson1AddPermissionCommand = deserializeAws_restJson1AddPermissionCommand;
    var deserializeAws_restJson1AddPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PolicyLengthExceededException":
        case "com.amazonaws.lambda#PolicyLengthExceededException":
          throw await deserializeAws_restJson1PolicyLengthExceededExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateAliasCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
      }
      if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateAliasCommand = deserializeAws_restJson1CreateAliasCommand;
    var deserializeAws_restJson1CreateAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateCodeSigningConfigCommand = deserializeAws_restJson1CreateCodeSigningConfigCommand;
    var deserializeAws_restJson1CreateCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateEventSourceMappingCommand = deserializeAws_restJson1CreateEventSourceMappingCommand;
    var deserializeAws_restJson1CreateEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateFunctionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateFunctionCommand = deserializeAws_restJson1CreateFunctionCommand;
    var deserializeAws_restJson1CreateFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
          throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
          throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1CreateFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
      }
      if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
      }
      if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateFunctionUrlConfigCommand = deserializeAws_restJson1CreateFunctionUrlConfigCommand;
    var deserializeAws_restJson1CreateFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteAliasCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteAliasCommand = deserializeAws_restJson1DeleteAliasCommand;
    var deserializeAws_restJson1DeleteAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteCodeSigningConfigCommand = deserializeAws_restJson1DeleteCodeSigningConfigCommand;
    var deserializeAws_restJson1DeleteCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports.deserializeAws_restJson1DeleteEventSourceMappingCommand = deserializeAws_restJson1DeleteEventSourceMappingCommand;
    var deserializeAws_restJson1DeleteEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
          throw await deserializeAws_restJson1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteFunctionCommand = deserializeAws_restJson1DeleteFunctionCommand;
    var deserializeAws_restJson1DeleteFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand = deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand;
    var deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionConcurrencyCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionConcurrencyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteFunctionConcurrencyCommand = deserializeAws_restJson1DeleteFunctionConcurrencyCommand;
    var deserializeAws_restJson1DeleteFunctionConcurrencyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand = deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteFunctionUrlConfigCommand = deserializeAws_restJson1DeleteFunctionUrlConfigCommand;
    var deserializeAws_restJson1DeleteFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteLayerVersionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteLayerVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteLayerVersionCommand = deserializeAws_restJson1DeleteLayerVersionCommand;
    var deserializeAws_restJson1DeleteLayerVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand = deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand;
    var deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetAccountSettingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAccountSettingsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AccountLimit != null) {
        contents.AccountLimit = deserializeAws_restJson1AccountLimit(data.AccountLimit, context);
      }
      if (data.AccountUsage != null) {
        contents.AccountUsage = deserializeAws_restJson1AccountUsage(data.AccountUsage, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetAccountSettingsCommand = deserializeAws_restJson1GetAccountSettingsCommand;
    var deserializeAws_restJson1GetAccountSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetAliasCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
      }
      if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetAliasCommand = deserializeAws_restJson1GetAliasCommand;
    var deserializeAws_restJson1GetAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetCodeSigningConfigCommand = deserializeAws_restJson1GetCodeSigningConfigCommand;
    var deserializeAws_restJson1GetCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetEventSourceMappingCommand = deserializeAws_restJson1GetEventSourceMappingCommand;
    var deserializeAws_restJson1GetEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Code != null) {
        contents.Code = deserializeAws_restJson1FunctionCodeLocation(data.Code, context);
      }
      if (data.Concurrency != null) {
        contents.Concurrency = deserializeAws_restJson1Concurrency(data.Concurrency, context);
      }
      if (data.Configuration != null) {
        contents.Configuration = deserializeAws_restJson1FunctionConfiguration(data.Configuration, context);
      }
      if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1Tags(data.Tags, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetFunctionCommand = deserializeAws_restJson1GetFunctionCommand;
    var deserializeAws_restJson1GetFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = (0, smithy_client_1.expectString)(data.CodeSigningConfigArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand = deserializeAws_restJson1GetFunctionCodeSigningConfigCommand;
    var deserializeAws_restJson1GetFunctionCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionConcurrencyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionConcurrencyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.ReservedConcurrentExecutions);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetFunctionConcurrencyCommand = deserializeAws_restJson1GetFunctionConcurrencyCommand;
    var deserializeAws_restJson1GetFunctionConcurrencyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetFunctionConfigurationCommand = deserializeAws_restJson1GetFunctionConfigurationCommand;
    var deserializeAws_restJson1GetFunctionConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand = deserializeAws_restJson1GetFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1GetFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
      }
      if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
      }
      if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
      }
      if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = (0, smithy_client_1.expectString)(data.LastModifiedTime);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetFunctionUrlConfigCommand = deserializeAws_restJson1GetFunctionUrlConfigCommand;
    var deserializeAws_restJson1GetFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetLayerVersionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
      }
      if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
      }
      if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
      }
      if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
      }
      if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
      }
      if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetLayerVersionCommand = deserializeAws_restJson1GetLayerVersionCommand;
    var deserializeAws_restJson1GetLayerVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetLayerVersionByArnCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionByArnCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
      }
      if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
      }
      if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
      }
      if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
      }
      if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
      }
      if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetLayerVersionByArnCommand = deserializeAws_restJson1GetLayerVersionByArnCommand;
    var deserializeAws_restJson1GetLayerVersionByArnCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetLayerVersionPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetLayerVersionPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Policy != null) {
        contents.Policy = (0, smithy_client_1.expectString)(data.Policy);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetLayerVersionPolicyCommand = deserializeAws_restJson1GetLayerVersionPolicyCommand;
    var deserializeAws_restJson1GetLayerVersionPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Policy != null) {
        contents.Policy = (0, smithy_client_1.expectString)(data.Policy);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetPolicyCommand = deserializeAws_restJson1GetPolicyCommand;
    var deserializeAws_restJson1GetPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetProvisionedConcurrencyConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AllocatedProvisionedConcurrentExecutions);
      }
      if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AvailableProvisionedConcurrentExecutions);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.RequestedProvisionedConcurrentExecutions);
      }
      if (data.Status != null) {
        contents.Status = (0, smithy_client_1.expectString)(data.Status);
      }
      if (data.StatusReason != null) {
        contents.StatusReason = (0, smithy_client_1.expectString)(data.StatusReason);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand = deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand;
    var deserializeAws_restJson1GetProvisionedConcurrencyConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ProvisionedConcurrencyConfigNotFoundException":
        case "com.amazonaws.lambda#ProvisionedConcurrencyConfigNotFoundException":
          throw await deserializeAws_restJson1ProvisionedConcurrencyConfigNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1GetRuntimeManagementConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRuntimeManagementConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = (0, smithy_client_1.expectString)(data.RuntimeVersionArn);
      }
      if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = (0, smithy_client_1.expectString)(data.UpdateRuntimeOn);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetRuntimeManagementConfigCommand = deserializeAws_restJson1GetRuntimeManagementConfigCommand;
    var deserializeAws_restJson1GetRuntimeManagementConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1InvokeCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1InvokeCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        FunctionError: [, output.headers["x-amz-function-error"]],
        LogResult: [, output.headers["x-amz-log-result"]],
        ExecutedVersion: [, output.headers["x-amz-executed-version"]]
      });
      const data = await collectBody(output.body, context);
      contents.Payload = data;
      map(contents, {
        StatusCode: [, output.statusCode]
      });
      return contents;
    };
    exports.deserializeAws_restJson1InvokeCommand = deserializeAws_restJson1InvokeCommand;
    var deserializeAws_restJson1InvokeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "EC2AccessDeniedException":
        case "com.amazonaws.lambda#EC2AccessDeniedException":
          throw await deserializeAws_restJson1EC2AccessDeniedExceptionResponse(parsedOutput, context);
        case "EC2ThrottledException":
        case "com.amazonaws.lambda#EC2ThrottledException":
          throw await deserializeAws_restJson1EC2ThrottledExceptionResponse(parsedOutput, context);
        case "EC2UnexpectedException":
        case "com.amazonaws.lambda#EC2UnexpectedException":
          throw await deserializeAws_restJson1EC2UnexpectedExceptionResponse(parsedOutput, context);
        case "EFSIOException":
        case "com.amazonaws.lambda#EFSIOException":
          throw await deserializeAws_restJson1EFSIOExceptionResponse(parsedOutput, context);
        case "EFSMountConnectivityException":
        case "com.amazonaws.lambda#EFSMountConnectivityException":
          throw await deserializeAws_restJson1EFSMountConnectivityExceptionResponse(parsedOutput, context);
        case "EFSMountFailureException":
        case "com.amazonaws.lambda#EFSMountFailureException":
          throw await deserializeAws_restJson1EFSMountFailureExceptionResponse(parsedOutput, context);
        case "EFSMountTimeoutException":
        case "com.amazonaws.lambda#EFSMountTimeoutException":
          throw await deserializeAws_restJson1EFSMountTimeoutExceptionResponse(parsedOutput, context);
        case "ENILimitReachedException":
        case "com.amazonaws.lambda#ENILimitReachedException":
          throw await deserializeAws_restJson1ENILimitReachedExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
          throw await deserializeAws_restJson1InvalidRequestContentExceptionResponse(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
          throw await deserializeAws_restJson1InvalidRuntimeExceptionResponse(parsedOutput, context);
        case "InvalidSecurityGroupIDException":
        case "com.amazonaws.lambda#InvalidSecurityGroupIDException":
          throw await deserializeAws_restJson1InvalidSecurityGroupIDExceptionResponse(parsedOutput, context);
        case "InvalidSubnetIDException":
        case "com.amazonaws.lambda#InvalidSubnetIDException":
          throw await deserializeAws_restJson1InvalidSubnetIDExceptionResponse(parsedOutput, context);
        case "InvalidZipFileException":
        case "com.amazonaws.lambda#InvalidZipFileException":
          throw await deserializeAws_restJson1InvalidZipFileExceptionResponse(parsedOutput, context);
        case "KMSAccessDeniedException":
        case "com.amazonaws.lambda#KMSAccessDeniedException":
          throw await deserializeAws_restJson1KMSAccessDeniedExceptionResponse(parsedOutput, context);
        case "KMSDisabledException":
        case "com.amazonaws.lambda#KMSDisabledException":
          throw await deserializeAws_restJson1KMSDisabledExceptionResponse(parsedOutput, context);
        case "KMSInvalidStateException":
        case "com.amazonaws.lambda#KMSInvalidStateException":
          throw await deserializeAws_restJson1KMSInvalidStateExceptionResponse(parsedOutput, context);
        case "KMSNotFoundException":
        case "com.amazonaws.lambda#KMSNotFoundException":
          throw await deserializeAws_restJson1KMSNotFoundExceptionResponse(parsedOutput, context);
        case "RequestTooLargeException":
        case "com.amazonaws.lambda#RequestTooLargeException":
          throw await deserializeAws_restJson1RequestTooLargeExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.lambda#ResourceNotReadyException":
          throw await deserializeAws_restJson1ResourceNotReadyExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "SnapStartException":
        case "com.amazonaws.lambda#SnapStartException":
          throw await deserializeAws_restJson1SnapStartExceptionResponse(parsedOutput, context);
        case "SnapStartNotReadyException":
        case "com.amazonaws.lambda#SnapStartNotReadyException":
          throw await deserializeAws_restJson1SnapStartNotReadyExceptionResponse(parsedOutput, context);
        case "SnapStartTimeoutException":
        case "com.amazonaws.lambda#SnapStartTimeoutException":
          throw await deserializeAws_restJson1SnapStartTimeoutExceptionResponse(parsedOutput, context);
        case "SubnetIPAddressLimitReachedException":
        case "com.amazonaws.lambda#SubnetIPAddressLimitReachedException":
          throw await deserializeAws_restJson1SubnetIPAddressLimitReachedExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnsupportedMediaTypeException":
        case "com.amazonaws.lambda#UnsupportedMediaTypeException":
          throw await deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1InvokeAsyncCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1InvokeAsyncCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      map(contents, {
        Status: [, output.statusCode]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1InvokeAsyncCommand = deserializeAws_restJson1InvokeAsyncCommand;
    var deserializeAws_restJson1InvokeAsyncCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestContentException":
        case "com.amazonaws.lambda#InvalidRequestContentException":
          throw await deserializeAws_restJson1InvalidRequestContentExceptionResponse(parsedOutput, context);
        case "InvalidRuntimeException":
        case "com.amazonaws.lambda#InvalidRuntimeException":
          throw await deserializeAws_restJson1InvalidRuntimeExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAliasesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAliasesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Aliases != null) {
        contents.Aliases = deserializeAws_restJson1AliasList(data.Aliases, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAliasesCommand = deserializeAws_restJson1ListAliasesCommand;
    var deserializeAws_restJson1ListAliasesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListCodeSigningConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListCodeSigningConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfigs != null) {
        contents.CodeSigningConfigs = deserializeAws_restJson1CodeSigningConfigList(data.CodeSigningConfigs, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListCodeSigningConfigsCommand = deserializeAws_restJson1ListCodeSigningConfigsCommand;
    var deserializeAws_restJson1ListCodeSigningConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListEventSourceMappingsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEventSourceMappingsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.EventSourceMappings != null) {
        contents.EventSourceMappings = deserializeAws_restJson1EventSourceMappingsList(data.EventSourceMappings, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListEventSourceMappingsCommand = deserializeAws_restJson1ListEventSourceMappingsCommand;
    var deserializeAws_restJson1ListEventSourceMappingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionEventInvokeConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionEventInvokeConfigs != null) {
        contents.FunctionEventInvokeConfigs = deserializeAws_restJson1FunctionEventInvokeConfigList(data.FunctionEventInvokeConfigs, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand = deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand;
    var deserializeAws_restJson1ListFunctionEventInvokeConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Functions != null) {
        contents.Functions = deserializeAws_restJson1FunctionList(data.Functions, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListFunctionsCommand = deserializeAws_restJson1ListFunctionsCommand;
    var deserializeAws_restJson1ListFunctionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionArns != null) {
        contents.FunctionArns = deserializeAws_restJson1FunctionArnList(data.FunctionArns, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand = deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand;
    var deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListFunctionUrlConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListFunctionUrlConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionUrlConfigs != null) {
        contents.FunctionUrlConfigs = deserializeAws_restJson1FunctionUrlConfigList(data.FunctionUrlConfigs, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListFunctionUrlConfigsCommand = deserializeAws_restJson1ListFunctionUrlConfigsCommand;
    var deserializeAws_restJson1ListFunctionUrlConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListLayersCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListLayersCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersList(data.Layers, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListLayersCommand = deserializeAws_restJson1ListLayersCommand;
    var deserializeAws_restJson1ListLayersCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListLayerVersionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListLayerVersionsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.LayerVersions != null) {
        contents.LayerVersions = deserializeAws_restJson1LayerVersionsList(data.LayerVersions, context);
      }
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListLayerVersionsCommand = deserializeAws_restJson1ListLayerVersionsCommand;
    var deserializeAws_restJson1ListLayerVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      if (data.ProvisionedConcurrencyConfigs != null) {
        contents.ProvisionedConcurrencyConfigs = deserializeAws_restJson1ProvisionedConcurrencyConfigList(data.ProvisionedConcurrencyConfigs, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand = deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand;
    var deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListTagsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Tags != null) {
        contents.Tags = deserializeAws_restJson1Tags(data.Tags, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListTagsCommand = deserializeAws_restJson1ListTagsCommand;
    var deserializeAws_restJson1ListTagsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListVersionsByFunctionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListVersionsByFunctionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.NextMarker != null) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data.NextMarker);
      }
      if (data.Versions != null) {
        contents.Versions = deserializeAws_restJson1FunctionList(data.Versions, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListVersionsByFunctionCommand = deserializeAws_restJson1ListVersionsByFunctionCommand;
    var deserializeAws_restJson1ListVersionsByFunctionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PublishLayerVersionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PublishLayerVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CompatibleArchitectures != null) {
        contents.CompatibleArchitectures = deserializeAws_restJson1CompatibleArchitectures(data.CompatibleArchitectures, context);
      }
      if (data.CompatibleRuntimes != null) {
        contents.CompatibleRuntimes = deserializeAws_restJson1CompatibleRuntimes(data.CompatibleRuntimes, context);
      }
      if (data.Content != null) {
        contents.Content = deserializeAws_restJson1LayerVersionContentOutput(data.Content, context);
      }
      if (data.CreatedDate != null) {
        contents.CreatedDate = (0, smithy_client_1.expectString)(data.CreatedDate);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.LayerArn != null) {
        contents.LayerArn = (0, smithy_client_1.expectString)(data.LayerArn);
      }
      if (data.LayerVersionArn != null) {
        contents.LayerVersionArn = (0, smithy_client_1.expectString)(data.LayerVersionArn);
      }
      if (data.LicenseInfo != null) {
        contents.LicenseInfo = (0, smithy_client_1.expectString)(data.LicenseInfo);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectLong)(data.Version);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PublishLayerVersionCommand = deserializeAws_restJson1PublishLayerVersionCommand;
    var deserializeAws_restJson1PublishLayerVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PublishVersionCommand = async (output, context) => {
      if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PublishVersionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PublishVersionCommand = deserializeAws_restJson1PublishVersionCommand;
    var deserializeAws_restJson1PublishVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfigArn != null) {
        contents.CodeSigningConfigArn = (0, smithy_client_1.expectString)(data.CodeSigningConfigArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand = deserializeAws_restJson1PutFunctionCodeSigningConfigCommand;
    var deserializeAws_restJson1PutFunctionCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutFunctionConcurrencyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionConcurrencyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.ReservedConcurrentExecutions != null) {
        contents.ReservedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.ReservedConcurrentExecutions);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PutFunctionConcurrencyCommand = deserializeAws_restJson1PutFunctionConcurrencyCommand;
    var deserializeAws_restJson1PutFunctionConcurrencyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand = deserializeAws_restJson1PutFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1PutFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutProvisionedConcurrencyConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AllocatedProvisionedConcurrentExecutions != null) {
        contents.AllocatedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AllocatedProvisionedConcurrentExecutions);
      }
      if (data.AvailableProvisionedConcurrentExecutions != null) {
        contents.AvailableProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.AvailableProvisionedConcurrentExecutions);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.RequestedProvisionedConcurrentExecutions != null) {
        contents.RequestedProvisionedConcurrentExecutions = (0, smithy_client_1.expectInt32)(data.RequestedProvisionedConcurrentExecutions);
      }
      if (data.Status != null) {
        contents.Status = (0, smithy_client_1.expectString)(data.Status);
      }
      if (data.StatusReason != null) {
        contents.StatusReason = (0, smithy_client_1.expectString)(data.StatusReason);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand = deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand;
    var deserializeAws_restJson1PutProvisionedConcurrencyConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1PutRuntimeManagementConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutRuntimeManagementConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.RuntimeVersionArn != null) {
        contents.RuntimeVersionArn = (0, smithy_client_1.expectString)(data.RuntimeVersionArn);
      }
      if (data.UpdateRuntimeOn != null) {
        contents.UpdateRuntimeOn = (0, smithy_client_1.expectString)(data.UpdateRuntimeOn);
      }
      return contents;
    };
    exports.deserializeAws_restJson1PutRuntimeManagementConfigCommand = deserializeAws_restJson1PutRuntimeManagementConfigCommand;
    var deserializeAws_restJson1PutRuntimeManagementConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RemoveLayerVersionPermissionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemoveLayerVersionPermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1RemoveLayerVersionPermissionCommand = deserializeAws_restJson1RemoveLayerVersionPermissionCommand;
    var deserializeAws_restJson1RemoveLayerVersionPermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RemovePermissionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1RemovePermissionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1RemovePermissionCommand = deserializeAws_restJson1RemovePermissionCommand;
    var deserializeAws_restJson1RemovePermissionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1TagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
    var deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
    var deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateAliasCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAliasCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AliasArn != null) {
        contents.AliasArn = (0, smithy_client_1.expectString)(data.AliasArn);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.FunctionVersion != null) {
        contents.FunctionVersion = (0, smithy_client_1.expectString)(data.FunctionVersion);
      }
      if (data.Name != null) {
        contents.Name = (0, smithy_client_1.expectString)(data.Name);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.RoutingConfig != null) {
        contents.RoutingConfig = deserializeAws_restJson1AliasRoutingConfiguration(data.RoutingConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateAliasCommand = deserializeAws_restJson1UpdateAliasCommand;
    var deserializeAws_restJson1UpdateAliasCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateCodeSigningConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateCodeSigningConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CodeSigningConfig != null) {
        contents.CodeSigningConfig = deserializeAws_restJson1CodeSigningConfig(data.CodeSigningConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateCodeSigningConfigCommand = deserializeAws_restJson1UpdateCodeSigningConfigCommand;
    var deserializeAws_restJson1UpdateCodeSigningConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateEventSourceMappingCommand = async (output, context) => {
      if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEventSourceMappingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AmazonManagedKafkaEventSourceConfig != null) {
        contents.AmazonManagedKafkaEventSourceConfig = deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(data.AmazonManagedKafkaEventSourceConfig, context);
      }
      if (data.BatchSize != null) {
        contents.BatchSize = (0, smithy_client_1.expectInt32)(data.BatchSize);
      }
      if (data.BisectBatchOnFunctionError != null) {
        contents.BisectBatchOnFunctionError = (0, smithy_client_1.expectBoolean)(data.BisectBatchOnFunctionError);
      }
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.EventSourceArn != null) {
        contents.EventSourceArn = (0, smithy_client_1.expectString)(data.EventSourceArn);
      }
      if (data.FilterCriteria != null) {
        contents.FilterCriteria = deserializeAws_restJson1FilterCriteria(data.FilterCriteria, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionResponseTypes != null) {
        contents.FunctionResponseTypes = deserializeAws_restJson1FunctionResponseTypeList(data.FunctionResponseTypes, context);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.LastProcessingResult != null) {
        contents.LastProcessingResult = (0, smithy_client_1.expectString)(data.LastProcessingResult);
      }
      if (data.MaximumBatchingWindowInSeconds != null) {
        contents.MaximumBatchingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumBatchingWindowInSeconds);
      }
      if (data.MaximumRecordAgeInSeconds != null) {
        contents.MaximumRecordAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumRecordAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      if (data.ParallelizationFactor != null) {
        contents.ParallelizationFactor = (0, smithy_client_1.expectInt32)(data.ParallelizationFactor);
      }
      if (data.Queues != null) {
        contents.Queues = deserializeAws_restJson1Queues(data.Queues, context);
      }
      if (data.ScalingConfig != null) {
        contents.ScalingConfig = deserializeAws_restJson1ScalingConfig(data.ScalingConfig, context);
      }
      if (data.SelfManagedEventSource != null) {
        contents.SelfManagedEventSource = deserializeAws_restJson1SelfManagedEventSource(data.SelfManagedEventSource, context);
      }
      if (data.SelfManagedKafkaEventSourceConfig != null) {
        contents.SelfManagedKafkaEventSourceConfig = deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(data.SelfManagedKafkaEventSourceConfig, context);
      }
      if (data.SourceAccessConfigurations != null) {
        contents.SourceAccessConfigurations = deserializeAws_restJson1SourceAccessConfigurations(data.SourceAccessConfigurations, context);
      }
      if (data.StartingPosition != null) {
        contents.StartingPosition = (0, smithy_client_1.expectString)(data.StartingPosition);
      }
      if (data.StartingPositionTimestamp != null) {
        contents.StartingPositionTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.StartingPositionTimestamp)));
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateTransitionReason != null) {
        contents.StateTransitionReason = (0, smithy_client_1.expectString)(data.StateTransitionReason);
      }
      if (data.Topics != null) {
        contents.Topics = deserializeAws_restJson1Topics(data.Topics, context);
      }
      if (data.TumblingWindowInSeconds != null) {
        contents.TumblingWindowInSeconds = (0, smithy_client_1.expectInt32)(data.TumblingWindowInSeconds);
      }
      if (data.UUID != null) {
        contents.UUID = (0, smithy_client_1.expectString)(data.UUID);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateEventSourceMappingCommand = deserializeAws_restJson1UpdateEventSourceMappingCommand;
    var deserializeAws_restJson1UpdateEventSourceMappingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.lambda#ResourceInUseException":
          throw await deserializeAws_restJson1ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionCodeCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionCodeCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateFunctionCodeCommand = deserializeAws_restJson1UpdateFunctionCodeCommand;
    var deserializeAws_restJson1UpdateFunctionCodeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeStorageExceededException":
        case "com.amazonaws.lambda#CodeStorageExceededException":
          throw await deserializeAws_restJson1CodeStorageExceededExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
          throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
          throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Architectures != null) {
        contents.Architectures = deserializeAws_restJson1ArchitecturesList(data.Architectures, context);
      }
      if (data.CodeSha256 != null) {
        contents.CodeSha256 = (0, smithy_client_1.expectString)(data.CodeSha256);
      }
      if (data.CodeSize != null) {
        contents.CodeSize = (0, smithy_client_1.expectLong)(data.CodeSize);
      }
      if (data.DeadLetterConfig != null) {
        contents.DeadLetterConfig = deserializeAws_restJson1DeadLetterConfig(data.DeadLetterConfig, context);
      }
      if (data.Description != null) {
        contents.Description = (0, smithy_client_1.expectString)(data.Description);
      }
      if (data.Environment != null) {
        contents.Environment = deserializeAws_restJson1EnvironmentResponse(data.Environment, context);
      }
      if (data.EphemeralStorage != null) {
        contents.EphemeralStorage = deserializeAws_restJson1EphemeralStorage(data.EphemeralStorage, context);
      }
      if (data.FileSystemConfigs != null) {
        contents.FileSystemConfigs = deserializeAws_restJson1FileSystemConfigList(data.FileSystemConfigs, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionName != null) {
        contents.FunctionName = (0, smithy_client_1.expectString)(data.FunctionName);
      }
      if (data.Handler != null) {
        contents.Handler = (0, smithy_client_1.expectString)(data.Handler);
      }
      if (data.ImageConfigResponse != null) {
        contents.ImageConfigResponse = deserializeAws_restJson1ImageConfigResponse(data.ImageConfigResponse, context);
      }
      if (data.KMSKeyArn != null) {
        contents.KMSKeyArn = (0, smithy_client_1.expectString)(data.KMSKeyArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectString)(data.LastModified);
      }
      if (data.LastUpdateStatus != null) {
        contents.LastUpdateStatus = (0, smithy_client_1.expectString)(data.LastUpdateStatus);
      }
      if (data.LastUpdateStatusReason != null) {
        contents.LastUpdateStatusReason = (0, smithy_client_1.expectString)(data.LastUpdateStatusReason);
      }
      if (data.LastUpdateStatusReasonCode != null) {
        contents.LastUpdateStatusReasonCode = (0, smithy_client_1.expectString)(data.LastUpdateStatusReasonCode);
      }
      if (data.Layers != null) {
        contents.Layers = deserializeAws_restJson1LayersReferenceList(data.Layers, context);
      }
      if (data.MasterArn != null) {
        contents.MasterArn = (0, smithy_client_1.expectString)(data.MasterArn);
      }
      if (data.MemorySize != null) {
        contents.MemorySize = (0, smithy_client_1.expectInt32)(data.MemorySize);
      }
      if (data.PackageType != null) {
        contents.PackageType = (0, smithy_client_1.expectString)(data.PackageType);
      }
      if (data.RevisionId != null) {
        contents.RevisionId = (0, smithy_client_1.expectString)(data.RevisionId);
      }
      if (data.Role != null) {
        contents.Role = (0, smithy_client_1.expectString)(data.Role);
      }
      if (data.Runtime != null) {
        contents.Runtime = (0, smithy_client_1.expectString)(data.Runtime);
      }
      if (data.RuntimeVersionConfig != null) {
        contents.RuntimeVersionConfig = deserializeAws_restJson1RuntimeVersionConfig(data.RuntimeVersionConfig, context);
      }
      if (data.SigningJobArn != null) {
        contents.SigningJobArn = (0, smithy_client_1.expectString)(data.SigningJobArn);
      }
      if (data.SigningProfileVersionArn != null) {
        contents.SigningProfileVersionArn = (0, smithy_client_1.expectString)(data.SigningProfileVersionArn);
      }
      if (data.SnapStart != null) {
        contents.SnapStart = deserializeAws_restJson1SnapStartResponse(data.SnapStart, context);
      }
      if (data.State != null) {
        contents.State = (0, smithy_client_1.expectString)(data.State);
      }
      if (data.StateReason != null) {
        contents.StateReason = (0, smithy_client_1.expectString)(data.StateReason);
      }
      if (data.StateReasonCode != null) {
        contents.StateReasonCode = (0, smithy_client_1.expectString)(data.StateReasonCode);
      }
      if (data.Timeout != null) {
        contents.Timeout = (0, smithy_client_1.expectInt32)(data.Timeout);
      }
      if (data.TracingConfig != null) {
        contents.TracingConfig = deserializeAws_restJson1TracingConfigResponse(data.TracingConfig, context);
      }
      if (data.Version != null) {
        contents.Version = (0, smithy_client_1.expectString)(data.Version);
      }
      if (data.VpcConfig != null) {
        contents.VpcConfig = deserializeAws_restJson1VpcConfigResponse(data.VpcConfig, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateFunctionConfigurationCommand = deserializeAws_restJson1UpdateFunctionConfigurationCommand;
    var deserializeAws_restJson1UpdateFunctionConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CodeSigningConfigNotFoundException":
        case "com.amazonaws.lambda#CodeSigningConfigNotFoundException":
          throw await deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse(parsedOutput, context);
        case "CodeVerificationFailedException":
        case "com.amazonaws.lambda#CodeVerificationFailedException":
          throw await deserializeAws_restJson1CodeVerificationFailedExceptionResponse(parsedOutput, context);
        case "InvalidCodeSignatureException":
        case "com.amazonaws.lambda#InvalidCodeSignatureException":
          throw await deserializeAws_restJson1InvalidCodeSignatureExceptionResponse(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.lambda#PreconditionFailedException":
          throw await deserializeAws_restJson1PreconditionFailedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.DestinationConfig != null) {
        contents.DestinationConfig = deserializeAws_restJson1DestinationConfig(data.DestinationConfig, context);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.LastModified != null) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.LastModified)));
      }
      if (data.MaximumEventAgeInSeconds != null) {
        contents.MaximumEventAgeInSeconds = (0, smithy_client_1.expectInt32)(data.MaximumEventAgeInSeconds);
      }
      if (data.MaximumRetryAttempts != null) {
        contents.MaximumRetryAttempts = (0, smithy_client_1.expectInt32)(data.MaximumRetryAttempts);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand = deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand;
    var deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1UpdateFunctionUrlConfigCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateFunctionUrlConfigCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AuthType != null) {
        contents.AuthType = (0, smithy_client_1.expectString)(data.AuthType);
      }
      if (data.Cors != null) {
        contents.Cors = deserializeAws_restJson1Cors(data.Cors, context);
      }
      if (data.CreationTime != null) {
        contents.CreationTime = (0, smithy_client_1.expectString)(data.CreationTime);
      }
      if (data.FunctionArn != null) {
        contents.FunctionArn = (0, smithy_client_1.expectString)(data.FunctionArn);
      }
      if (data.FunctionUrl != null) {
        contents.FunctionUrl = (0, smithy_client_1.expectString)(data.FunctionUrl);
      }
      if (data.LastModifiedTime != null) {
        contents.LastModifiedTime = (0, smithy_client_1.expectString)(data.LastModifiedTime);
      }
      return contents;
    };
    exports.deserializeAws_restJson1UpdateFunctionUrlConfigCommand = deserializeAws_restJson1UpdateFunctionUrlConfigCommand;
    var deserializeAws_restJson1UpdateFunctionUrlConfigCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.lambda#InvalidParameterValueException":
          throw await deserializeAws_restJson1InvalidParameterValueExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.lambda#ResourceConflictException":
          throw await deserializeAws_restJson1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lambda#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lambda#ServiceException":
          throw await deserializeAws_restJson1ServiceExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lambda#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: LambdaServiceException_1.LambdaServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1CodeSigningConfigNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.CodeSigningConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1CodeStorageExceededExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.CodeStorageExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1CodeVerificationFailedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.CodeVerificationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EC2AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EC2AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EC2ThrottledExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EC2ThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EC2UnexpectedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.EC2ErrorCode != null) {
        contents.EC2ErrorCode = (0, smithy_client_1.expectString)(data.EC2ErrorCode);
      }
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EC2UnexpectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSIOExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSIOException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSMountConnectivityExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSMountConnectivityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSMountFailureExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSMountFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1EFSMountTimeoutExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.EFSMountTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ENILimitReachedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ENILimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidCodeSignatureExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidCodeSignatureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidParameterValueExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestContentExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRuntimeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidRuntimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidSecurityGroupIDExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidSecurityGroupIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidSubnetIDExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidSubnetIDException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidZipFileExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.InvalidZipFileException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSAccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSAccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSDisabledExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSInvalidStateExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1KMSNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.KMSNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1PolicyLengthExceededExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.PolicyLengthExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1PreconditionFailedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ProvisionedConcurrencyConfigNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ProvisionedConcurrencyConfigNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1RequestTooLargeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.RequestTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceConflictExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotReadyExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ServiceExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SnapStartExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SnapStartException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SnapStartNotReadyExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SnapStartNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SnapStartTimeoutExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SnapStartTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SubnetIPAddressLimitReachedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Message != null) {
        contents.Message = (0, smithy_client_1.expectString)(data.Message);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      const exception = new models_0_1.SubnetIPAddressLimitReachedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]]
      });
      const data = parsedOutput.body;
      if (data.Reason != null) {
        contents.Reason = (0, smithy_client_1.expectString)(data.Reason);
      }
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.Type != null) {
        contents.Type = (0, smithy_client_1.expectString)(data.Type);
      }
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnsupportedMediaTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1AdditionalVersionWeights = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.serializeFloat)(value);
        return acc;
      }, {});
    };
    var serializeAws_restJson1AliasRoutingConfiguration = (input, context) => {
      return {
        ...input.AdditionalVersionWeights != null && {
          AdditionalVersionWeights: serializeAws_restJson1AdditionalVersionWeights(input.AdditionalVersionWeights, context)
        }
      };
    };
    var serializeAws_restJson1AllowedPublishers = (input, context) => {
      return {
        ...input.SigningProfileVersionArns != null && {
          SigningProfileVersionArns: serializeAws_restJson1SigningProfileVersionArns(input.SigningProfileVersionArns, context)
        }
      };
    };
    var serializeAws_restJson1AllowMethodsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1AllowOriginsList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1AmazonManagedKafkaEventSourceConfig = (input, context) => {
      return {
        ...input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }
      };
    };
    var serializeAws_restJson1ArchitecturesList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1CodeSigningPolicies = (input, context) => {
      return {
        ...input.UntrustedArtifactOnDeployment != null && {
          UntrustedArtifactOnDeployment: input.UntrustedArtifactOnDeployment
        }
      };
    };
    var serializeAws_restJson1CompatibleArchitectures = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1CompatibleRuntimes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1Cors = (input, context) => {
      return {
        ...input.AllowCredentials != null && { AllowCredentials: input.AllowCredentials },
        ...input.AllowHeaders != null && { AllowHeaders: serializeAws_restJson1HeadersList(input.AllowHeaders, context) },
        ...input.AllowMethods != null && {
          AllowMethods: serializeAws_restJson1AllowMethodsList(input.AllowMethods, context)
        },
        ...input.AllowOrigins != null && {
          AllowOrigins: serializeAws_restJson1AllowOriginsList(input.AllowOrigins, context)
        },
        ...input.ExposeHeaders != null && {
          ExposeHeaders: serializeAws_restJson1HeadersList(input.ExposeHeaders, context)
        },
        ...input.MaxAge != null && { MaxAge: input.MaxAge }
      };
    };
    var serializeAws_restJson1DeadLetterConfig = (input, context) => {
      return {
        ...input.TargetArn != null && { TargetArn: input.TargetArn }
      };
    };
    var serializeAws_restJson1DestinationConfig = (input, context) => {
      return {
        ...input.OnFailure != null && { OnFailure: serializeAws_restJson1OnFailure(input.OnFailure, context) },
        ...input.OnSuccess != null && { OnSuccess: serializeAws_restJson1OnSuccess(input.OnSuccess, context) }
      };
    };
    var serializeAws_restJson1EndpointLists = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1Endpoints = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = serializeAws_restJson1EndpointLists(value, context);
        return acc;
      }, {});
    };
    var serializeAws_restJson1Environment = (input, context) => {
      return {
        ...input.Variables != null && { Variables: serializeAws_restJson1EnvironmentVariables(input.Variables, context) }
      };
    };
    var serializeAws_restJson1EnvironmentVariables = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_restJson1EphemeralStorage = (input, context) => {
      return {
        ...input.Size != null && { Size: input.Size }
      };
    };
    var serializeAws_restJson1FileSystemConfig = (input, context) => {
      return {
        ...input.Arn != null && { Arn: input.Arn },
        ...input.LocalMountPath != null && { LocalMountPath: input.LocalMountPath }
      };
    };
    var serializeAws_restJson1FileSystemConfigList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_restJson1FileSystemConfig(entry, context);
      });
    };
    var serializeAws_restJson1Filter = (input, context) => {
      return {
        ...input.Pattern != null && { Pattern: input.Pattern }
      };
    };
    var serializeAws_restJson1FilterCriteria = (input, context) => {
      return {
        ...input.Filters != null && { Filters: serializeAws_restJson1FilterList(input.Filters, context) }
      };
    };
    var serializeAws_restJson1FilterList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_restJson1Filter(entry, context);
      });
    };
    var serializeAws_restJson1FunctionCode = (input, context) => {
      return {
        ...input.ImageUri != null && { ImageUri: input.ImageUri },
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3Key != null && { S3Key: input.S3Key },
        ...input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion },
        ...input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }
      };
    };
    var serializeAws_restJson1FunctionResponseTypeList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1HeadersList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1ImageConfig = (input, context) => {
      return {
        ...input.Command != null && { Command: serializeAws_restJson1StringList(input.Command, context) },
        ...input.EntryPoint != null && { EntryPoint: serializeAws_restJson1StringList(input.EntryPoint, context) },
        ...input.WorkingDirectory != null && { WorkingDirectory: input.WorkingDirectory }
      };
    };
    var serializeAws_restJson1LayerList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1LayerVersionContentInput = (input, context) => {
      return {
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3Key != null && { S3Key: input.S3Key },
        ...input.S3ObjectVersion != null && { S3ObjectVersion: input.S3ObjectVersion },
        ...input.ZipFile != null && { ZipFile: context.base64Encoder(input.ZipFile) }
      };
    };
    var serializeAws_restJson1OnFailure = (input, context) => {
      return {
        ...input.Destination != null && { Destination: input.Destination }
      };
    };
    var serializeAws_restJson1OnSuccess = (input, context) => {
      return {
        ...input.Destination != null && { Destination: input.Destination }
      };
    };
    var serializeAws_restJson1Queues = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1ScalingConfig = (input, context) => {
      return {
        ...input.MaximumConcurrency != null && { MaximumConcurrency: input.MaximumConcurrency }
      };
    };
    var serializeAws_restJson1SecurityGroupIds = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1SelfManagedEventSource = (input, context) => {
      return {
        ...input.Endpoints != null && { Endpoints: serializeAws_restJson1Endpoints(input.Endpoints, context) }
      };
    };
    var serializeAws_restJson1SelfManagedKafkaEventSourceConfig = (input, context) => {
      return {
        ...input.ConsumerGroupId != null && { ConsumerGroupId: input.ConsumerGroupId }
      };
    };
    var serializeAws_restJson1SigningProfileVersionArns = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1SnapStart = (input, context) => {
      return {
        ...input.ApplyOn != null && { ApplyOn: input.ApplyOn }
      };
    };
    var serializeAws_restJson1SourceAccessConfiguration = (input, context) => {
      return {
        ...input.Type != null && { Type: input.Type },
        ...input.URI != null && { URI: input.URI }
      };
    };
    var serializeAws_restJson1SourceAccessConfigurations = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_restJson1SourceAccessConfiguration(entry, context);
      });
    };
    var serializeAws_restJson1StringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1SubnetIds = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1Tags = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = value;
        return acc;
      }, {});
    };
    var serializeAws_restJson1Topics = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_restJson1TracingConfig = (input, context) => {
      return {
        ...input.Mode != null && { Mode: input.Mode }
      };
    };
    var serializeAws_restJson1VpcConfig = (input, context) => {
      return {
        ...input.SecurityGroupIds != null && {
          SecurityGroupIds: serializeAws_restJson1SecurityGroupIds(input.SecurityGroupIds, context)
        },
        ...input.SubnetIds != null && { SubnetIds: serializeAws_restJson1SubnetIds(input.SubnetIds, context) }
      };
    };
    var deserializeAws_restJson1AccountLimit = (output, context) => {
      return {
        CodeSizeUnzipped: (0, smithy_client_1.expectLong)(output.CodeSizeUnzipped),
        CodeSizeZipped: (0, smithy_client_1.expectLong)(output.CodeSizeZipped),
        ConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.ConcurrentExecutions),
        TotalCodeSize: (0, smithy_client_1.expectLong)(output.TotalCodeSize),
        UnreservedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.UnreservedConcurrentExecutions)
      };
    };
    var deserializeAws_restJson1AccountUsage = (output, context) => {
      return {
        FunctionCount: (0, smithy_client_1.expectLong)(output.FunctionCount),
        TotalCodeSize: (0, smithy_client_1.expectLong)(output.TotalCodeSize)
      };
    };
    var deserializeAws_restJson1AdditionalVersionWeights = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.limitedParseDouble)(value);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1AliasConfiguration = (output, context) => {
      return {
        AliasArn: (0, smithy_client_1.expectString)(output.AliasArn),
        Description: (0, smithy_client_1.expectString)(output.Description),
        FunctionVersion: (0, smithy_client_1.expectString)(output.FunctionVersion),
        Name: (0, smithy_client_1.expectString)(output.Name),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        RoutingConfig: output.RoutingConfig != null ? deserializeAws_restJson1AliasRoutingConfiguration(output.RoutingConfig, context) : void 0
      };
    };
    var deserializeAws_restJson1AliasList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AliasConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1AliasRoutingConfiguration = (output, context) => {
      return {
        AdditionalVersionWeights: output.AdditionalVersionWeights != null ? deserializeAws_restJson1AdditionalVersionWeights(output.AdditionalVersionWeights, context) : void 0
      };
    };
    var deserializeAws_restJson1AllowedPublishers = (output, context) => {
      return {
        SigningProfileVersionArns: output.SigningProfileVersionArns != null ? deserializeAws_restJson1SigningProfileVersionArns(output.SigningProfileVersionArns, context) : void 0
      };
    };
    var deserializeAws_restJson1AllowMethodsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1AllowOriginsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig = (output, context) => {
      return {
        ConsumerGroupId: (0, smithy_client_1.expectString)(output.ConsumerGroupId)
      };
    };
    var deserializeAws_restJson1ArchitecturesList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1CodeSigningConfig = (output, context) => {
      return {
        AllowedPublishers: output.AllowedPublishers != null ? deserializeAws_restJson1AllowedPublishers(output.AllowedPublishers, context) : void 0,
        CodeSigningConfigArn: (0, smithy_client_1.expectString)(output.CodeSigningConfigArn),
        CodeSigningConfigId: (0, smithy_client_1.expectString)(output.CodeSigningConfigId),
        CodeSigningPolicies: output.CodeSigningPolicies != null ? deserializeAws_restJson1CodeSigningPolicies(output.CodeSigningPolicies, context) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified)
      };
    };
    var deserializeAws_restJson1CodeSigningConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1CodeSigningConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1CodeSigningPolicies = (output, context) => {
      return {
        UntrustedArtifactOnDeployment: (0, smithy_client_1.expectString)(output.UntrustedArtifactOnDeployment)
      };
    };
    var deserializeAws_restJson1CompatibleArchitectures = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1CompatibleRuntimes = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1Concurrency = (output, context) => {
      return {
        ReservedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.ReservedConcurrentExecutions)
      };
    };
    var deserializeAws_restJson1Cors = (output, context) => {
      return {
        AllowCredentials: (0, smithy_client_1.expectBoolean)(output.AllowCredentials),
        AllowHeaders: output.AllowHeaders != null ? deserializeAws_restJson1HeadersList(output.AllowHeaders, context) : void 0,
        AllowMethods: output.AllowMethods != null ? deserializeAws_restJson1AllowMethodsList(output.AllowMethods, context) : void 0,
        AllowOrigins: output.AllowOrigins != null ? deserializeAws_restJson1AllowOriginsList(output.AllowOrigins, context) : void 0,
        ExposeHeaders: output.ExposeHeaders != null ? deserializeAws_restJson1HeadersList(output.ExposeHeaders, context) : void 0,
        MaxAge: (0, smithy_client_1.expectInt32)(output.MaxAge)
      };
    };
    var deserializeAws_restJson1DeadLetterConfig = (output, context) => {
      return {
        TargetArn: (0, smithy_client_1.expectString)(output.TargetArn)
      };
    };
    var deserializeAws_restJson1DestinationConfig = (output, context) => {
      return {
        OnFailure: output.OnFailure != null ? deserializeAws_restJson1OnFailure(output.OnFailure, context) : void 0,
        OnSuccess: output.OnSuccess != null ? deserializeAws_restJson1OnSuccess(output.OnSuccess, context) : void 0
      };
    };
    var deserializeAws_restJson1EndpointLists = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1Endpoints = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = deserializeAws_restJson1EndpointLists(value, context);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1EnvironmentError = (output, context) => {
      return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_restJson1EnvironmentResponse = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_restJson1EnvironmentError(output.Error, context) : void 0,
        Variables: output.Variables != null ? deserializeAws_restJson1EnvironmentVariables(output.Variables, context) : void 0
      };
    };
    var deserializeAws_restJson1EnvironmentVariables = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1EphemeralStorage = (output, context) => {
      return {
        Size: (0, smithy_client_1.expectInt32)(output.Size)
      };
    };
    var deserializeAws_restJson1EventSourceMappingConfiguration = (output, context) => {
      return {
        AmazonManagedKafkaEventSourceConfig: output.AmazonManagedKafkaEventSourceConfig != null ? deserializeAws_restJson1AmazonManagedKafkaEventSourceConfig(output.AmazonManagedKafkaEventSourceConfig, context) : void 0,
        BatchSize: (0, smithy_client_1.expectInt32)(output.BatchSize),
        BisectBatchOnFunctionError: (0, smithy_client_1.expectBoolean)(output.BisectBatchOnFunctionError),
        DestinationConfig: output.DestinationConfig != null ? deserializeAws_restJson1DestinationConfig(output.DestinationConfig, context) : void 0,
        EventSourceArn: (0, smithy_client_1.expectString)(output.EventSourceArn),
        FilterCriteria: output.FilterCriteria != null ? deserializeAws_restJson1FilterCriteria(output.FilterCriteria, context) : void 0,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionResponseTypes: output.FunctionResponseTypes != null ? deserializeAws_restJson1FunctionResponseTypeList(output.FunctionResponseTypes, context) : void 0,
        LastModified: output.LastModified != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModified))) : void 0,
        LastProcessingResult: (0, smithy_client_1.expectString)(output.LastProcessingResult),
        MaximumBatchingWindowInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumBatchingWindowInSeconds),
        MaximumRecordAgeInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumRecordAgeInSeconds),
        MaximumRetryAttempts: (0, smithy_client_1.expectInt32)(output.MaximumRetryAttempts),
        ParallelizationFactor: (0, smithy_client_1.expectInt32)(output.ParallelizationFactor),
        Queues: output.Queues != null ? deserializeAws_restJson1Queues(output.Queues, context) : void 0,
        ScalingConfig: output.ScalingConfig != null ? deserializeAws_restJson1ScalingConfig(output.ScalingConfig, context) : void 0,
        SelfManagedEventSource: output.SelfManagedEventSource != null ? deserializeAws_restJson1SelfManagedEventSource(output.SelfManagedEventSource, context) : void 0,
        SelfManagedKafkaEventSourceConfig: output.SelfManagedKafkaEventSourceConfig != null ? deserializeAws_restJson1SelfManagedKafkaEventSourceConfig(output.SelfManagedKafkaEventSourceConfig, context) : void 0,
        SourceAccessConfigurations: output.SourceAccessConfigurations != null ? deserializeAws_restJson1SourceAccessConfigurations(output.SourceAccessConfigurations, context) : void 0,
        StartingPosition: (0, smithy_client_1.expectString)(output.StartingPosition),
        StartingPositionTimestamp: output.StartingPositionTimestamp != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartingPositionTimestamp))) : void 0,
        State: (0, smithy_client_1.expectString)(output.State),
        StateTransitionReason: (0, smithy_client_1.expectString)(output.StateTransitionReason),
        Topics: output.Topics != null ? deserializeAws_restJson1Topics(output.Topics, context) : void 0,
        TumblingWindowInSeconds: (0, smithy_client_1.expectInt32)(output.TumblingWindowInSeconds),
        UUID: (0, smithy_client_1.expectString)(output.UUID)
      };
    };
    var deserializeAws_restJson1EventSourceMappingsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1EventSourceMappingConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FileSystemConfig = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        LocalMountPath: (0, smithy_client_1.expectString)(output.LocalMountPath)
      };
    };
    var deserializeAws_restJson1FileSystemConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FileSystemConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1Filter = (output, context) => {
      return {
        Pattern: (0, smithy_client_1.expectString)(output.Pattern)
      };
    };
    var deserializeAws_restJson1FilterCriteria = (output, context) => {
      return {
        Filters: output.Filters != null ? deserializeAws_restJson1FilterList(output.Filters, context) : void 0
      };
    };
    var deserializeAws_restJson1FilterList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1Filter(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionArnList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionCodeLocation = (output, context) => {
      return {
        ImageUri: (0, smithy_client_1.expectString)(output.ImageUri),
        Location: (0, smithy_client_1.expectString)(output.Location),
        RepositoryType: (0, smithy_client_1.expectString)(output.RepositoryType),
        ResolvedImageUri: (0, smithy_client_1.expectString)(output.ResolvedImageUri)
      };
    };
    var deserializeAws_restJson1FunctionConfiguration = (output, context) => {
      return {
        Architectures: output.Architectures != null ? deserializeAws_restJson1ArchitecturesList(output.Architectures, context) : void 0,
        CodeSha256: (0, smithy_client_1.expectString)(output.CodeSha256),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        DeadLetterConfig: output.DeadLetterConfig != null ? deserializeAws_restJson1DeadLetterConfig(output.DeadLetterConfig, context) : void 0,
        Description: (0, smithy_client_1.expectString)(output.Description),
        Environment: output.Environment != null ? deserializeAws_restJson1EnvironmentResponse(output.Environment, context) : void 0,
        EphemeralStorage: output.EphemeralStorage != null ? deserializeAws_restJson1EphemeralStorage(output.EphemeralStorage, context) : void 0,
        FileSystemConfigs: output.FileSystemConfigs != null ? deserializeAws_restJson1FileSystemConfigList(output.FileSystemConfigs, context) : void 0,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionName: (0, smithy_client_1.expectString)(output.FunctionName),
        Handler: (0, smithy_client_1.expectString)(output.Handler),
        ImageConfigResponse: output.ImageConfigResponse != null ? deserializeAws_restJson1ImageConfigResponse(output.ImageConfigResponse, context) : void 0,
        KMSKeyArn: (0, smithy_client_1.expectString)(output.KMSKeyArn),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
        LastUpdateStatus: (0, smithy_client_1.expectString)(output.LastUpdateStatus),
        LastUpdateStatusReason: (0, smithy_client_1.expectString)(output.LastUpdateStatusReason),
        LastUpdateStatusReasonCode: (0, smithy_client_1.expectString)(output.LastUpdateStatusReasonCode),
        Layers: output.Layers != null ? deserializeAws_restJson1LayersReferenceList(output.Layers, context) : void 0,
        MasterArn: (0, smithy_client_1.expectString)(output.MasterArn),
        MemorySize: (0, smithy_client_1.expectInt32)(output.MemorySize),
        PackageType: (0, smithy_client_1.expectString)(output.PackageType),
        RevisionId: (0, smithy_client_1.expectString)(output.RevisionId),
        Role: (0, smithy_client_1.expectString)(output.Role),
        Runtime: (0, smithy_client_1.expectString)(output.Runtime),
        RuntimeVersionConfig: output.RuntimeVersionConfig != null ? deserializeAws_restJson1RuntimeVersionConfig(output.RuntimeVersionConfig, context) : void 0,
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn),
        SnapStart: output.SnapStart != null ? deserializeAws_restJson1SnapStartResponse(output.SnapStart, context) : void 0,
        State: (0, smithy_client_1.expectString)(output.State),
        StateReason: (0, smithy_client_1.expectString)(output.StateReason),
        StateReasonCode: (0, smithy_client_1.expectString)(output.StateReasonCode),
        Timeout: (0, smithy_client_1.expectInt32)(output.Timeout),
        TracingConfig: output.TracingConfig != null ? deserializeAws_restJson1TracingConfigResponse(output.TracingConfig, context) : void 0,
        Version: (0, smithy_client_1.expectString)(output.Version),
        VpcConfig: output.VpcConfig != null ? deserializeAws_restJson1VpcConfigResponse(output.VpcConfig, context) : void 0
      };
    };
    var deserializeAws_restJson1FunctionEventInvokeConfig = (output, context) => {
      return {
        DestinationConfig: output.DestinationConfig != null ? deserializeAws_restJson1DestinationConfig(output.DestinationConfig, context) : void 0,
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        LastModified: output.LastModified != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastModified))) : void 0,
        MaximumEventAgeInSeconds: (0, smithy_client_1.expectInt32)(output.MaximumEventAgeInSeconds),
        MaximumRetryAttempts: (0, smithy_client_1.expectInt32)(output.MaximumRetryAttempts)
      };
    };
    var deserializeAws_restJson1FunctionEventInvokeConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FunctionEventInvokeConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FunctionConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionResponseTypeList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1FunctionUrlConfig = (output, context) => {
      return {
        AuthType: (0, smithy_client_1.expectString)(output.AuthType),
        Cors: output.Cors != null ? deserializeAws_restJson1Cors(output.Cors, context) : void 0,
        CreationTime: (0, smithy_client_1.expectString)(output.CreationTime),
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        FunctionUrl: (0, smithy_client_1.expectString)(output.FunctionUrl),
        LastModifiedTime: (0, smithy_client_1.expectString)(output.LastModifiedTime)
      };
    };
    var deserializeAws_restJson1FunctionUrlConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1FunctionUrlConfig(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1HeadersList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1ImageConfig = (output, context) => {
      return {
        Command: output.Command != null ? deserializeAws_restJson1StringList(output.Command, context) : void 0,
        EntryPoint: output.EntryPoint != null ? deserializeAws_restJson1StringList(output.EntryPoint, context) : void 0,
        WorkingDirectory: (0, smithy_client_1.expectString)(output.WorkingDirectory)
      };
    };
    var deserializeAws_restJson1ImageConfigError = (output, context) => {
      return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_restJson1ImageConfigResponse = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_restJson1ImageConfigError(output.Error, context) : void 0,
        ImageConfig: output.ImageConfig != null ? deserializeAws_restJson1ImageConfig(output.ImageConfig, context) : void 0
      };
    };
    var deserializeAws_restJson1Layer = (output, context) => {
      return {
        Arn: (0, smithy_client_1.expectString)(output.Arn),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn)
      };
    };
    var deserializeAws_restJson1LayersList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1LayersListItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1LayersListItem = (output, context) => {
      return {
        LatestMatchingVersion: output.LatestMatchingVersion != null ? deserializeAws_restJson1LayerVersionsListItem(output.LatestMatchingVersion, context) : void 0,
        LayerArn: (0, smithy_client_1.expectString)(output.LayerArn),
        LayerName: (0, smithy_client_1.expectString)(output.LayerName)
      };
    };
    var deserializeAws_restJson1LayersReferenceList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1Layer(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1LayerVersionContentOutput = (output, context) => {
      return {
        CodeSha256: (0, smithy_client_1.expectString)(output.CodeSha256),
        CodeSize: (0, smithy_client_1.expectLong)(output.CodeSize),
        Location: (0, smithy_client_1.expectString)(output.Location),
        SigningJobArn: (0, smithy_client_1.expectString)(output.SigningJobArn),
        SigningProfileVersionArn: (0, smithy_client_1.expectString)(output.SigningProfileVersionArn)
      };
    };
    var deserializeAws_restJson1LayerVersionsList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1LayerVersionsListItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1LayerVersionsListItem = (output, context) => {
      return {
        CompatibleArchitectures: output.CompatibleArchitectures != null ? deserializeAws_restJson1CompatibleArchitectures(output.CompatibleArchitectures, context) : void 0,
        CompatibleRuntimes: output.CompatibleRuntimes != null ? deserializeAws_restJson1CompatibleRuntimes(output.CompatibleRuntimes, context) : void 0,
        CreatedDate: (0, smithy_client_1.expectString)(output.CreatedDate),
        Description: (0, smithy_client_1.expectString)(output.Description),
        LayerVersionArn: (0, smithy_client_1.expectString)(output.LayerVersionArn),
        LicenseInfo: (0, smithy_client_1.expectString)(output.LicenseInfo),
        Version: (0, smithy_client_1.expectLong)(output.Version)
      };
    };
    var deserializeAws_restJson1OnFailure = (output, context) => {
      return {
        Destination: (0, smithy_client_1.expectString)(output.Destination)
      };
    };
    var deserializeAws_restJson1OnSuccess = (output, context) => {
      return {
        Destination: (0, smithy_client_1.expectString)(output.Destination)
      };
    };
    var deserializeAws_restJson1ProvisionedConcurrencyConfigList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1ProvisionedConcurrencyConfigListItem(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1ProvisionedConcurrencyConfigListItem = (output, context) => {
      return {
        AllocatedProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.AllocatedProvisionedConcurrentExecutions),
        AvailableProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.AvailableProvisionedConcurrentExecutions),
        FunctionArn: (0, smithy_client_1.expectString)(output.FunctionArn),
        LastModified: (0, smithy_client_1.expectString)(output.LastModified),
        RequestedProvisionedConcurrentExecutions: (0, smithy_client_1.expectInt32)(output.RequestedProvisionedConcurrentExecutions),
        Status: (0, smithy_client_1.expectString)(output.Status),
        StatusReason: (0, smithy_client_1.expectString)(output.StatusReason)
      };
    };
    var deserializeAws_restJson1Queues = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1RuntimeVersionConfig = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_restJson1RuntimeVersionError(output.Error, context) : void 0,
        RuntimeVersionArn: (0, smithy_client_1.expectString)(output.RuntimeVersionArn)
      };
    };
    var deserializeAws_restJson1RuntimeVersionError = (output, context) => {
      return {
        ErrorCode: (0, smithy_client_1.expectString)(output.ErrorCode),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_restJson1ScalingConfig = (output, context) => {
      return {
        MaximumConcurrency: (0, smithy_client_1.expectInt32)(output.MaximumConcurrency)
      };
    };
    var deserializeAws_restJson1SecurityGroupIds = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1SelfManagedEventSource = (output, context) => {
      return {
        Endpoints: output.Endpoints != null ? deserializeAws_restJson1Endpoints(output.Endpoints, context) : void 0
      };
    };
    var deserializeAws_restJson1SelfManagedKafkaEventSourceConfig = (output, context) => {
      return {
        ConsumerGroupId: (0, smithy_client_1.expectString)(output.ConsumerGroupId)
      };
    };
    var deserializeAws_restJson1SigningProfileVersionArns = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1SnapStartResponse = (output, context) => {
      return {
        ApplyOn: (0, smithy_client_1.expectString)(output.ApplyOn),
        OptimizationStatus: (0, smithy_client_1.expectString)(output.OptimizationStatus)
      };
    };
    var deserializeAws_restJson1SourceAccessConfiguration = (output, context) => {
      return {
        Type: (0, smithy_client_1.expectString)(output.Type),
        URI: (0, smithy_client_1.expectString)(output.URI)
      };
    };
    var deserializeAws_restJson1SourceAccessConfigurations = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1SourceAccessConfiguration(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1StringList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1SubnetIds = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1Tags = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
      }, {});
    };
    var deserializeAws_restJson1Topics = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_restJson1TracingConfigResponse = (output, context) => {
      return {
        Mode: (0, smithy_client_1.expectString)(output.Mode)
      };
    };
    var deserializeAws_restJson1VpcConfigResponse = (output, context) => {
      return {
        SecurityGroupIds: output.SecurityGroupIds != null ? deserializeAws_restJson1SecurityGroupIds(output.SecurityGroupIds, context) : void 0,
        SubnetIds: output.SubnetIds != null ? deserializeAws_restJson1SubnetIds(output.SubnetIds, context) : void 0,
        VpcId: (0, smithy_client_1.expectString)(output.VpcId)
      };
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddLayerVersionPermissionCommand.js
var require_AddLayerVersionPermissionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddLayerVersionPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddLayerVersionPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var AddLayerVersionPermissionCommand = class _AddLayerVersionPermissionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AddLayerVersionPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "AddLayerVersionPermissionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddLayerVersionPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddLayerVersionPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1AddLayerVersionPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1AddLayerVersionPermissionCommand)(output, context);
      }
    };
    exports.AddLayerVersionPermissionCommand = AddLayerVersionPermissionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddPermissionCommand.js
var require_AddPermissionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/AddPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var AddPermissionCommand = class _AddPermissionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AddPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "AddPermissionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AddPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AddPermissionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1AddPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1AddPermissionCommand)(output, context);
      }
    };
    exports.AddPermissionCommand = AddPermissionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateAliasCommand.js
var require_CreateAliasCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var CreateAliasCommand = class _CreateAliasCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateAliasCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AliasConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateAliasCommand)(output, context);
      }
    };
    exports.CreateAliasCommand = CreateAliasCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateCodeSigningConfigCommand.js
var require_CreateCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var CreateCodeSigningConfigCommand = class _CreateCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateCodeSigningConfigCommand)(output, context);
      }
    };
    exports.CreateCodeSigningConfigCommand = CreateCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateEventSourceMappingCommand.js
var require_CreateEventSourceMappingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateEventSourceMappingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var CreateEventSourceMappingCommand = class _CreateEventSourceMappingCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateEventSourceMappingCommand)(output, context);
      }
    };
    exports.CreateEventSourceMappingCommand = CreateEventSourceMappingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionCommand.js
var require_CreateFunctionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var CreateFunctionCommand = class _CreateFunctionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateFunctionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateFunctionCommand)(output, context);
      }
    };
    exports.CreateFunctionCommand = CreateFunctionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionUrlConfigCommand.js
var require_CreateFunctionUrlConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/CreateFunctionUrlConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var CreateFunctionUrlConfigCommand = class _CreateFunctionUrlConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "CreateFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateFunctionUrlConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateFunctionUrlConfigCommand)(output, context);
      }
    };
    exports.CreateFunctionUrlConfigCommand = CreateFunctionUrlConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteAliasCommand.js
var require_DeleteAliasCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteAliasCommand = class _DeleteAliasCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteAliasCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteAliasCommand)(output, context);
      }
    };
    exports.DeleteAliasCommand = DeleteAliasCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteCodeSigningConfigCommand.js
var require_DeleteCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteCodeSigningConfigCommand = class _DeleteCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteCodeSigningConfigCommand)(output, context);
      }
    };
    exports.DeleteCodeSigningConfigCommand = DeleteCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteEventSourceMappingCommand.js
var require_DeleteEventSourceMappingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteEventSourceMappingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteEventSourceMappingCommand = class _DeleteEventSourceMappingCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteEventSourceMappingCommand)(output, context);
      }
    };
    exports.DeleteEventSourceMappingCommand = DeleteEventSourceMappingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCodeSigningConfigCommand.js
var require_DeleteFunctionCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFunctionCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteFunctionCodeSigningConfigCommand = class _DeleteFunctionCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteFunctionCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionCodeSigningConfigCommand)(output, context);
      }
    };
    exports.DeleteFunctionCodeSigningConfigCommand = DeleteFunctionCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCommand.js
var require_DeleteFunctionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteFunctionCommand = class _DeleteFunctionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionCommand)(output, context);
      }
    };
    exports.DeleteFunctionCommand = DeleteFunctionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionConcurrencyCommand.js
var require_DeleteFunctionConcurrencyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionConcurrencyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFunctionConcurrencyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteFunctionConcurrencyCommand = class _DeleteFunctionConcurrencyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteFunctionConcurrencyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionConcurrencyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionConcurrencyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionConcurrencyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionConcurrencyCommand)(output, context);
      }
    };
    exports.DeleteFunctionConcurrencyCommand = DeleteFunctionConcurrencyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionEventInvokeConfigCommand.js
var require_DeleteFunctionEventInvokeConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionEventInvokeConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteFunctionEventInvokeConfigCommand = class _DeleteFunctionEventInvokeConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports.DeleteFunctionEventInvokeConfigCommand = DeleteFunctionEventInvokeConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionUrlConfigCommand.js
var require_DeleteFunctionUrlConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteFunctionUrlConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteFunctionUrlConfigCommand = class _DeleteFunctionUrlConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteFunctionUrlConfigCommand)(output, context);
      }
    };
    exports.DeleteFunctionUrlConfigCommand = DeleteFunctionUrlConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteLayerVersionCommand.js
var require_DeleteLayerVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteLayerVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteLayerVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteLayerVersionCommand = class _DeleteLayerVersionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteLayerVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteLayerVersionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteLayerVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteLayerVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteLayerVersionCommand)(output, context);
      }
    };
    exports.DeleteLayerVersionCommand = DeleteLayerVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteProvisionedConcurrencyConfigCommand.js
var require_DeleteProvisionedConcurrencyConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/DeleteProvisionedConcurrencyConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteProvisionedConcurrencyConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var DeleteProvisionedConcurrencyConfigCommand = class _DeleteProvisionedConcurrencyConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteProvisionedConcurrencyConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "DeleteProvisionedConcurrencyConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteProvisionedConcurrencyConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1DeleteProvisionedConcurrencyConfigCommand)(output, context);
      }
    };
    exports.DeleteProvisionedConcurrencyConfigCommand = DeleteProvisionedConcurrencyConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAccountSettingsCommand.js
var require_GetAccountSettingsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAccountSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccountSettingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetAccountSettingsCommand = class _GetAccountSettingsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccountSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetAccountSettingsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccountSettingsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccountSettingsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetAccountSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetAccountSettingsCommand)(output, context);
      }
    };
    exports.GetAccountSettingsCommand = GetAccountSettingsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAliasCommand.js
var require_GetAliasCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetAliasCommand = class _GetAliasCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetAliasCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AliasConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetAliasCommand)(output, context);
      }
    };
    exports.GetAliasCommand = GetAliasCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetCodeSigningConfigCommand.js
var require_GetCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetCodeSigningConfigCommand = class _GetCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetCodeSigningConfigCommand)(output, context);
      }
    };
    exports.GetCodeSigningConfigCommand = GetCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetEventSourceMappingCommand.js
var require_GetEventSourceMappingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetEventSourceMappingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetEventSourceMappingCommand = class _GetEventSourceMappingCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetEventSourceMappingCommand)(output, context);
      }
    };
    exports.GetEventSourceMappingCommand = GetEventSourceMappingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCodeSigningConfigCommand.js
var require_GetFunctionCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFunctionCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetFunctionCodeSigningConfigCommand = class _GetFunctionCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFunctionCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionCodeSigningConfigCommand)(output, context);
      }
    };
    exports.GetFunctionCodeSigningConfigCommand = GetFunctionCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCommand.js
var require_GetFunctionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetFunctionCommand = class _GetFunctionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionCommand)(output, context);
      }
    };
    exports.GetFunctionCommand = GetFunctionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConcurrencyCommand.js
var require_GetFunctionConcurrencyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConcurrencyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFunctionConcurrencyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetFunctionConcurrencyCommand = class _GetFunctionConcurrencyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFunctionConcurrencyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionConcurrencyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionConcurrencyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionConcurrencyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionConcurrencyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionConcurrencyCommand)(output, context);
      }
    };
    exports.GetFunctionConcurrencyCommand = GetFunctionConcurrencyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConfigurationCommand.js
var require_GetFunctionConfigurationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFunctionConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetFunctionConfigurationCommand = class _GetFunctionConfigurationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFunctionConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionConfigurationCommand)(output, context);
      }
    };
    exports.GetFunctionConfigurationCommand = GetFunctionConfigurationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionEventInvokeConfigCommand.js
var require_GetFunctionEventInvokeConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionEventInvokeConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetFunctionEventInvokeConfigCommand = class _GetFunctionEventInvokeConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionEventInvokeConfigFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports.GetFunctionEventInvokeConfigCommand = GetFunctionEventInvokeConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionUrlConfigCommand.js
var require_GetFunctionUrlConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetFunctionUrlConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetFunctionUrlConfigCommand = class _GetFunctionUrlConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFunctionUrlConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetFunctionUrlConfigCommand)(output, context);
      }
    };
    exports.GetFunctionUrlConfigCommand = GetFunctionUrlConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionByArnCommand.js
var require_GetLayerVersionByArnCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionByArnCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetLayerVersionByArnCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetLayerVersionByArnCommand = class _GetLayerVersionByArnCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetLayerVersionByArnCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetLayerVersionByArnCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLayerVersionByArnRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLayerVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetLayerVersionByArnCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetLayerVersionByArnCommand)(output, context);
      }
    };
    exports.GetLayerVersionByArnCommand = GetLayerVersionByArnCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionCommand.js
var require_GetLayerVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetLayerVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetLayerVersionCommand = class _GetLayerVersionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetLayerVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetLayerVersionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLayerVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLayerVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetLayerVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetLayerVersionCommand)(output, context);
      }
    };
    exports.GetLayerVersionCommand = GetLayerVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionPolicyCommand.js
var require_GetLayerVersionPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetLayerVersionPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetLayerVersionPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetLayerVersionPolicyCommand = class _GetLayerVersionPolicyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetLayerVersionPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetLayerVersionPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetLayerVersionPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetLayerVersionPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetLayerVersionPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetLayerVersionPolicyCommand)(output, context);
      }
    };
    exports.GetLayerVersionPolicyCommand = GetLayerVersionPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetPolicyCommand.js
var require_GetPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetPolicyCommand = class _GetPolicyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetPolicyResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetPolicyCommand)(output, context);
      }
    };
    exports.GetPolicyCommand = GetPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetProvisionedConcurrencyConfigCommand.js
var require_GetProvisionedConcurrencyConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetProvisionedConcurrencyConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetProvisionedConcurrencyConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetProvisionedConcurrencyConfigCommand = class _GetProvisionedConcurrencyConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetProvisionedConcurrencyConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetProvisionedConcurrencyConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetProvisionedConcurrencyConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetProvisionedConcurrencyConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetProvisionedConcurrencyConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetProvisionedConcurrencyConfigCommand)(output, context);
      }
    };
    exports.GetProvisionedConcurrencyConfigCommand = GetProvisionedConcurrencyConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetRuntimeManagementConfigCommand.js
var require_GetRuntimeManagementConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/GetRuntimeManagementConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRuntimeManagementConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRuntimeManagementConfigCommand = class _GetRuntimeManagementConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRuntimeManagementConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "GetRuntimeManagementConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRuntimeManagementConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRuntimeManagementConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRuntimeManagementConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRuntimeManagementConfigCommand)(output, context);
      }
    };
    exports.GetRuntimeManagementConfigCommand = GetRuntimeManagementConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeAsyncCommand.js
var require_InvokeAsyncCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeAsyncCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvokeAsyncCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var InvokeAsyncCommand = class _InvokeAsyncCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _InvokeAsyncCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "InvokeAsyncCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.InvokeAsyncRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.InvokeAsyncResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1InvokeAsyncCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1InvokeAsyncCommand)(output, context);
      }
    };
    exports.InvokeAsyncCommand = InvokeAsyncCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeCommand.js
var require_InvokeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/InvokeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvokeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var InvokeCommand2 = class _InvokeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _InvokeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "InvokeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.InvocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.InvocationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1InvokeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1InvokeCommand)(output, context);
      }
    };
    exports.InvokeCommand = InvokeCommand2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListAliasesCommand.js
var require_ListAliasesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListAliasesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAliasesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAliasesCommand = class _ListAliasesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAliasesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListAliasesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAliasesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAliasesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAliasesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAliasesCommand)(output, context);
      }
    };
    exports.ListAliasesCommand = ListAliasesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListCodeSigningConfigsCommand.js
var require_ListCodeSigningConfigsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListCodeSigningConfigsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListCodeSigningConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListCodeSigningConfigsCommand = class _ListCodeSigningConfigsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListCodeSigningConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListCodeSigningConfigsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListCodeSigningConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListCodeSigningConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListCodeSigningConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListCodeSigningConfigsCommand)(output, context);
      }
    };
    exports.ListCodeSigningConfigsCommand = ListCodeSigningConfigsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListEventSourceMappingsCommand.js
var require_ListEventSourceMappingsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListEventSourceMappingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListEventSourceMappingsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListEventSourceMappingsCommand = class _ListEventSourceMappingsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListEventSourceMappingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListEventSourceMappingsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListEventSourceMappingsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListEventSourceMappingsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListEventSourceMappingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListEventSourceMappingsCommand)(output, context);
      }
    };
    exports.ListEventSourceMappingsCommand = ListEventSourceMappingsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionEventInvokeConfigsCommand.js
var require_ListFunctionEventInvokeConfigsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionEventInvokeConfigsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListFunctionEventInvokeConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListFunctionEventInvokeConfigsCommand = class _ListFunctionEventInvokeConfigsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListFunctionEventInvokeConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionEventInvokeConfigsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionEventInvokeConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionEventInvokeConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionEventInvokeConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionEventInvokeConfigsCommand)(output, context);
      }
    };
    exports.ListFunctionEventInvokeConfigsCommand = ListFunctionEventInvokeConfigsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsByCodeSigningConfigCommand.js
var require_ListFunctionsByCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsByCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListFunctionsByCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListFunctionsByCodeSigningConfigCommand = class _ListFunctionsByCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListFunctionsByCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionsByCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionsByCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionsByCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionsByCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionsByCodeSigningConfigCommand)(output, context);
      }
    };
    exports.ListFunctionsByCodeSigningConfigCommand = ListFunctionsByCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsCommand.js
var require_ListFunctionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListFunctionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListFunctionsCommand = class _ListFunctionsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListFunctionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionsCommand)(output, context);
      }
    };
    exports.ListFunctionsCommand = ListFunctionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionUrlConfigsCommand.js
var require_ListFunctionUrlConfigsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListFunctionUrlConfigsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListFunctionUrlConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListFunctionUrlConfigsCommand = class _ListFunctionUrlConfigsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListFunctionUrlConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListFunctionUrlConfigsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListFunctionUrlConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListFunctionUrlConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListFunctionUrlConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListFunctionUrlConfigsCommand)(output, context);
      }
    };
    exports.ListFunctionUrlConfigsCommand = ListFunctionUrlConfigsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayersCommand.js
var require_ListLayersCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayersCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListLayersCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListLayersCommand = class _ListLayersCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListLayersCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListLayersCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListLayersRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListLayersResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListLayersCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListLayersCommand)(output, context);
      }
    };
    exports.ListLayersCommand = ListLayersCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayerVersionsCommand.js
var require_ListLayerVersionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListLayerVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListLayerVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListLayerVersionsCommand = class _ListLayerVersionsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListLayerVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListLayerVersionsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListLayerVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListLayerVersionsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListLayerVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListLayerVersionsCommand)(output, context);
      }
    };
    exports.ListLayerVersionsCommand = ListLayerVersionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListProvisionedConcurrencyConfigsCommand.js
var require_ListProvisionedConcurrencyConfigsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListProvisionedConcurrencyConfigsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListProvisionedConcurrencyConfigsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListProvisionedConcurrencyConfigsCommand = class _ListProvisionedConcurrencyConfigsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListProvisionedConcurrencyConfigsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListProvisionedConcurrencyConfigsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListProvisionedConcurrencyConfigsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListProvisionedConcurrencyConfigsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListProvisionedConcurrencyConfigsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListProvisionedConcurrencyConfigsCommand)(output, context);
      }
    };
    exports.ListProvisionedConcurrencyConfigsCommand = ListProvisionedConcurrencyConfigsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListTagsCommand.js
var require_ListTagsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListTagsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListTagsCommand = class _ListTagsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTagsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListTagsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTagsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTagsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListTagsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListTagsCommand)(output, context);
      }
    };
    exports.ListTagsCommand = ListTagsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListVersionsByFunctionCommand.js
var require_ListVersionsByFunctionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/ListVersionsByFunctionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListVersionsByFunctionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListVersionsByFunctionCommand = class _ListVersionsByFunctionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListVersionsByFunctionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "ListVersionsByFunctionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListVersionsByFunctionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListVersionsByFunctionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListVersionsByFunctionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListVersionsByFunctionCommand)(output, context);
      }
    };
    exports.ListVersionsByFunctionCommand = ListVersionsByFunctionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishLayerVersionCommand.js
var require_PublishLayerVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishLayerVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PublishLayerVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PublishLayerVersionCommand = class _PublishLayerVersionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PublishLayerVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PublishLayerVersionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PublishLayerVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PublishLayerVersionResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PublishLayerVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PublishLayerVersionCommand)(output, context);
      }
    };
    exports.PublishLayerVersionCommand = PublishLayerVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishVersionCommand.js
var require_PublishVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PublishVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PublishVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PublishVersionCommand = class _PublishVersionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PublishVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PublishVersionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PublishVersionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PublishVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PublishVersionCommand)(output, context);
      }
    };
    exports.PublishVersionCommand = PublishVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionCodeSigningConfigCommand.js
var require_PutFunctionCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutFunctionCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PutFunctionCodeSigningConfigCommand = class _PutFunctionCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutFunctionCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutFunctionCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutFunctionCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutFunctionCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutFunctionCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutFunctionCodeSigningConfigCommand)(output, context);
      }
    };
    exports.PutFunctionCodeSigningConfigCommand = PutFunctionCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionConcurrencyCommand.js
var require_PutFunctionConcurrencyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionConcurrencyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutFunctionConcurrencyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PutFunctionConcurrencyCommand = class _PutFunctionConcurrencyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutFunctionConcurrencyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutFunctionConcurrencyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutFunctionConcurrencyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ConcurrencyFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutFunctionConcurrencyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutFunctionConcurrencyCommand)(output, context);
      }
    };
    exports.PutFunctionConcurrencyCommand = PutFunctionConcurrencyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionEventInvokeConfigCommand.js
var require_PutFunctionEventInvokeConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutFunctionEventInvokeConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PutFunctionEventInvokeConfigCommand = class _PutFunctionEventInvokeConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionEventInvokeConfigFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports.PutFunctionEventInvokeConfigCommand = PutFunctionEventInvokeConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutProvisionedConcurrencyConfigCommand.js
var require_PutProvisionedConcurrencyConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutProvisionedConcurrencyConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutProvisionedConcurrencyConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PutProvisionedConcurrencyConfigCommand = class _PutProvisionedConcurrencyConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutProvisionedConcurrencyConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutProvisionedConcurrencyConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutProvisionedConcurrencyConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutProvisionedConcurrencyConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutProvisionedConcurrencyConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutProvisionedConcurrencyConfigCommand)(output, context);
      }
    };
    exports.PutProvisionedConcurrencyConfigCommand = PutProvisionedConcurrencyConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutRuntimeManagementConfigCommand.js
var require_PutRuntimeManagementConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/PutRuntimeManagementConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutRuntimeManagementConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var PutRuntimeManagementConfigCommand = class _PutRuntimeManagementConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PutRuntimeManagementConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "PutRuntimeManagementConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutRuntimeManagementConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutRuntimeManagementConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1PutRuntimeManagementConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1PutRuntimeManagementConfigCommand)(output, context);
      }
    };
    exports.PutRuntimeManagementConfigCommand = PutRuntimeManagementConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemoveLayerVersionPermissionCommand.js
var require_RemoveLayerVersionPermissionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemoveLayerVersionPermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveLayerVersionPermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var RemoveLayerVersionPermissionCommand = class _RemoveLayerVersionPermissionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RemoveLayerVersionPermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "RemoveLayerVersionPermissionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemoveLayerVersionPermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RemoveLayerVersionPermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RemoveLayerVersionPermissionCommand)(output, context);
      }
    };
    exports.RemoveLayerVersionPermissionCommand = RemoveLayerVersionPermissionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemovePermissionCommand.js
var require_RemovePermissionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/RemovePermissionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemovePermissionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var RemovePermissionCommand = class _RemovePermissionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RemovePermissionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "RemovePermissionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RemovePermissionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RemovePermissionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RemovePermissionCommand)(output, context);
      }
    };
    exports.RemovePermissionCommand = RemovePermissionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var TagResourceCommand = class _TagResourceCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UntagResourceCommand = class _UntagResourceCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateAliasCommand.js
var require_UpdateAliasCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateAliasCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateAliasCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateAliasCommand = class _UpdateAliasCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateAliasCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateAliasCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateAliasRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AliasConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateAliasCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateAliasCommand)(output, context);
      }
    };
    exports.UpdateAliasCommand = UpdateAliasCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateCodeSigningConfigCommand.js
var require_UpdateCodeSigningConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateCodeSigningConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateCodeSigningConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateCodeSigningConfigCommand = class _UpdateCodeSigningConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateCodeSigningConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateCodeSigningConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateCodeSigningConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateCodeSigningConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateCodeSigningConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateCodeSigningConfigCommand)(output, context);
      }
    };
    exports.UpdateCodeSigningConfigCommand = UpdateCodeSigningConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateEventSourceMappingCommand.js
var require_UpdateEventSourceMappingCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateEventSourceMappingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateEventSourceMappingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateEventSourceMappingCommand = class _UpdateEventSourceMappingCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateEventSourceMappingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateEventSourceMappingCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateEventSourceMappingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EventSourceMappingConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateEventSourceMappingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateEventSourceMappingCommand)(output, context);
      }
    };
    exports.UpdateEventSourceMappingCommand = UpdateEventSourceMappingCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionCodeCommand.js
var require_UpdateFunctionCodeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionCodeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateFunctionCodeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateFunctionCodeCommand = class _UpdateFunctionCodeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateFunctionCodeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionCodeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionCodeRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionCodeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionCodeCommand)(output, context);
      }
    };
    exports.UpdateFunctionCodeCommand = UpdateFunctionCodeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionConfigurationCommand.js
var require_UpdateFunctionConfigurationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateFunctionConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateFunctionConfigurationCommand = class _UpdateFunctionConfigurationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateFunctionConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionConfigurationCommand)(output, context);
      }
    };
    exports.UpdateFunctionConfigurationCommand = UpdateFunctionConfigurationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionEventInvokeConfigCommand.js
var require_UpdateFunctionEventInvokeConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionEventInvokeConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateFunctionEventInvokeConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateFunctionEventInvokeConfigCommand = class _UpdateFunctionEventInvokeConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateFunctionEventInvokeConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionEventInvokeConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionEventInvokeConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.FunctionEventInvokeConfigFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionEventInvokeConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionEventInvokeConfigCommand)(output, context);
      }
    };
    exports.UpdateFunctionEventInvokeConfigCommand = UpdateFunctionEventInvokeConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionUrlConfigCommand.js
var require_UpdateFunctionUrlConfigCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/UpdateFunctionUrlConfigCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateFunctionUrlConfigCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var UpdateFunctionUrlConfigCommand = class _UpdateFunctionUrlConfigCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateFunctionUrlConfigCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "LambdaClient";
        const commandName = "UpdateFunctionUrlConfigCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateFunctionUrlConfigRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateFunctionUrlConfigResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1UpdateFunctionUrlConfigCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1UpdateFunctionUrlConfigCommand)(output, context);
      }
    };
    exports.UpdateFunctionUrlConfigCommand = UpdateFunctionUrlConfigCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-config-provider@3.208.0/node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs9();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+config-resolver@3.272.0/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-content-length@3.272.0/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-content-length@3.272.0/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.278.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-host-header@3.278.0/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs8();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
          host += `:${request.port}`;
        request.headers["host"] = host;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const response = await next(args);
      const { clientName, commandName, logger: logger2, inputFilterSensitiveLog, outputFilterSensitiveLog, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      if (!logger2) {
        return response;
      }
      if (typeof logger2.info === "function") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger2.info({
          clientName,
          commandName,
          input: (overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : inputFilterSensitiveLog)(args.input),
          output: (overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : outputFilterSensitiveLog)(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-logger@3.272.0/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.272.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-recursion-detection@3.272.0/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = "STANDARD";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+service-error-classification@3.272.0/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isServerError = exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports.isServerError = isServerError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs15();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js
var require_defaultRetryBackoffStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js
var require_defaultRetryToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryToken = void 0;
    var constants_1 = require_constants3();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost = (_a = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _a !== void 0 ? _a : constants_1.RETRY_COST;
      const timeoutRetryCost = (_b = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _b !== void 0 ? _b : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy = (_c = options === null || options === void 0 ? void 0 : options.retryBackoffStrategy) !== null && _c !== void 0 ? _c : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(constants_1.MAXIMUM_RETRY_DELAY, initialRetryDelay);
      let lastRetryCost = void 0;
      let retryCount = initialRetryCount !== null && initialRetryCount !== void 0 ? initialRetryCount : 0;
      const getCapacityAmount = (errorType) => errorType === "TRANSIENT" ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase = errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity += releaseAmount !== null && releaseAmount !== void 0 ? releaseAmount : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens
      };
    };
    exports.getDefaultRetryToken = getDefaultRetryToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/types.js
var require_types2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-retry@3.272.0/node_modules/@aws-sdk/util-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_constants3(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js
import crypto from "crypto";
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool, poolPtr;
var init_rng = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js"() {
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/md5.js
import crypto2 from "crypto";
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto2.createHash("md5").update(bytes).digest();
}
var md5_default;
var init_md5 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/md5.js"() {
    md5_default = md5;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/sha1.js
import crypto3 from "crypto";
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto3.createHash("sha1").update(bytes).digest();
}
var sha1_default;
var init_sha1 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/sha1.js"() {
    sha1_default = sha1;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

// ../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs16();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs16();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs15();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports.asSdkError = asSdkError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs15();
    var util_retry_1 = require_dist_cjs16();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs16();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var util_retry_1 = require_dist_cjs16();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_retry_1 = require_dist_cjs16();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs15();
    var util_retry_1 = require_dist_cjs16();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetyErrorInto(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetyErrorInto = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports.getRetryAfterHint = getRetryAfterHint;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-retry@3.272.0/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports);
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class _ProviderError extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, _ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class _CredentialsProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, _CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js
var require_TokenProviderError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class _TokenProviderError extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, _TokenProviderError.prototype);
      }
    };
    exports.TokenProviderError = TokenProviderError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+property-provider@3.272.0/node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_TokenProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-hex-encoding@3.201.0/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-hex-encoding@3.201.0/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+is-array-buffer@3.201.0/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+is-array-buffer@3.201.0/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-buffer-from@3.208.0/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-buffer-from@3.208.0/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs20();
    var buffer_1 = __require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js
var require_fromUtf8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js
var require_toUint8Array = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports.toUint8Array = toUint8Array;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js
var require_toUtf8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-utf8@3.254.0/node_modules/@aws-sdk/util-utf8/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports);
    tslib_1.__exportStar(require_toUint8Array(), exports);
    tslib_1.__exportStar(require_toUtf8(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_utf8_1 = require_dist_cjs22();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-uri-escape@3.201.0/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs23();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs20();
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_utf8_1 = require_dist_cjs22();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports.cloneQuery)(query) : void 0
    });
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs19();
    var util_middleware_1 = require_dist_cjs4();
    var util_utf8_1 = require_dist_cjs22();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// ../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+signature-v4@3.272.0/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs18();
    var signature_v4_1 = require_dist_cjs24();
    var util_middleware_1 = require_dist_cjs4();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-signing@3.272.0/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-user-agent@3.272.0/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "lambda"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/package.json
var require_package = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-lambda",
      description: "AWS SDK for JavaScript Lambda Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo lambda"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.279.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/credential-provider-node": "3.279.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "@aws-sdk/util-waiter": "3.272.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-lambda",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-lambda"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var STSServiceException = class _STSServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponseFilterSensitiveLog = exports.GetSessionTokenRequestFilterSensitiveLog = exports.GetFederationTokenResponseFilterSensitiveLog = exports.FederatedUserFilterSensitiveLog = exports.GetFederationTokenRequestFilterSensitiveLog = exports.GetCallerIdentityResponseFilterSensitiveLog = exports.GetCallerIdentityRequestFilterSensitiveLog = exports.GetAccessKeyInfoResponseFilterSensitiveLog = exports.GetAccessKeyInfoRequestFilterSensitiveLog = exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports.AssumeRoleResponseFilterSensitiveLog = exports.CredentialsFilterSensitiveLog = exports.AssumeRoleRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.PolicyDescriptorTypeFilterSensitiveLog = exports.AssumedRoleUserFilterSensitiveLog = exports.InvalidAuthorizationMessageException = exports.IDPCommunicationErrorException = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class _ExpiredTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class _MalformedPolicyDocumentException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class _PackedPolicyTooLargeException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class _RegionDisabledException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class _IDPRejectedClaimException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class _InvalidIdentityTokenException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class _IDPCommunicationErrorException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class _InvalidAuthorizationMessageException extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/util.js
var require_util2 = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util2();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js
var require_OptionsBuilder = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true,
        eNotation: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false,
      transformAttributeName: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports.buildOptions = buildOptions;
    exports.defaultOptions = defaultOptions;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js
var require_xmlNode = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports, module) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        if (key === "__proto__")
          key = "#__proto__";
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node.tagname === "__proto__")
          node.tagname = "#__proto__";
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module.exports = XmlNode;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js
var require_DocTypeReader = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports, module) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<" && !comment) {
            if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") {
              i += 7;
              entity = true;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") {
              i += 9;
            } else if (
              //comment
              xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-"
            ) {
              comment = true;
            } else {
              throw new Error("Invalid DOCTYPE");
            }
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
                angleBracketsCount--;
              }
            } else {
              if (entity) {
                parseEntityExp(exp, entities);
                entity = false;
              }
              angleBracketsCount--;
            }
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, "g"),
          val: match[3]
        };
      }
    }
    module.exports = readDocType;
  }
});

// ../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js
var require_strnum = __commonJS({
  "../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js"(exports, module) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module.exports = toNumber;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js
var require_OrderedObjParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports, module) {
    "use strict";
    var util = require_util2();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities)
            val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          let aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (this.options.transformAttributeName) {
              aName = this.options.transformAttributeName(aName);
            }
            if (aName === "__proto__")
              aName = "#__proto__";
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val == void 0)
                val = "";
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    module.exports = OrderedObjParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/node2json.js
var require_node2json = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[":@"]) {
            assignAttributes(val, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode)
              val[options.textNodeName] = "";
            else
              val = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || propCount === 1 && obj[options.textNodeName])
        return true;
      return false;
    }
    exports.prettify = prettify;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js
var require_XMLParser = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports, module) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module.exports = XMLParser;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js
var require_orderedJs2Xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports, module) {
    var EOL = "\n";
    function toXml(jArray, options) {
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL;
      }
      return arrToStr(jArray, options, "", indentation);
    }
    function arrToStr(arr, options, jPath, indentation) {
      let xmlStr = "";
      let isPreviousElementTag = false;
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += tagText;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.cdataPropName) {
          if (isPreviousElementTag) {
            xmlStr += indentation;
          }
          xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          isPreviousElementTag = false;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          isPreviousElementTag = true;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          isPreviousElementTag = true;
          continue;
        }
        let newIdentation = indentation;
        if (newIdentation !== "") {
          newIdentation += options.indentBy;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        const tagStart = indentation + `<${tagName}${attStr}`;
        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else if (tagValue && tagValue.endsWith(">")) {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        } else {
          xmlStr += tagStart + ">";
          if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
            xmlStr += indentation + options.indentBy + tagValue + indentation;
          } else {
            xmlStr += tagValue;
          }
          xmlStr += `</${tagName}>`;
        }
        isPreviousElementTag = true;
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module.exports = toXml;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js
var require_json2xml = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports, module) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: []
      // transformTagName: false,
      // transformAttributeName: false,
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextValNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextValNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextValNode(item, key, "", level);
            }
          }
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    Builder.prototype.buildAttrPairStr = function(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val + '"';
    };
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjectNode(result.val, key, result.attrStr, level);
      }
    }
    Builder.prototype.buildObjectNode = function(val, key, attrStr, level) {
      if (val === "") {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        }
      } else {
        let tagEndExp = "</" + key + this.tagEndChar;
        let piClosingChar = "";
        if (key[0] === "?") {
          piClosingChar = "?";
          tagEndExp = "";
        }
        if (attrStr && val.indexOf("<") === -1) {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
          return this.indentate(level) + `<!--${val}-->` + this.newLine;
        } else {
          return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
        }
      }
    };
    Builder.prototype.closeTag = function(key) {
      let closeTag = "";
      if (this.options.unpairedTags.indexOf(key) !== -1) {
        if (!this.options.suppressUnpairedNode)
          closeTag = "/";
      } else if (this.options.suppressEmptyNode) {
        closeTag = "/";
      } else {
        closeTag = `></${key}`;
      }
      return closeTag;
    };
    Builder.prototype.buildTextValNode = function(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else if (key[0] === "?") {
        return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "") {
          return this.indentate(level) + "<" + key + attrStr + this.closeTag(key) + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    };
    Builder.prototype.replaceEntitiesValue = function(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    };
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module.exports = Builder;
  }
});

// ../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/fxp.js
var require_fxp = __commonJS({
  "../../node_modules/.pnpm/fast-xml-parser@4.1.2/node_modules/fast-xml-parser/src/fxp.js"(exports, module) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        if (input.TransitiveTagKeys?.length === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (input.PolicyArns?.length === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class _AssumeRoleCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class _AssumeRoleWithSAMLCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class _AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class _DecodeAuthorizationMessageCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class _GetAccessKeyInfoCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class _GetCallerIdentityCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class _GetFederationTokenCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs25();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class _GetSessionTokenCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+middleware-sdk-sts@3.272.0/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+middleware-sdk-sts@3.272.0/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs25();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/credential-provider-node": "3.279.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-sdk-sts": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "fast-xml-parser": "4.1.2",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger: logger2, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger: logger2,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger: logger2, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger: logger2,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs18();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-env@3.272.0/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = __require("os");
    var path_1 = __require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = __require("crypto");
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = __require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConfigFilepath = exports.ENV_CONFIG_PATH = void 0;
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports.getConfigFilepath = getConfigFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCredentialsFilepath = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = __require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports.getProfileData = getProfileData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = __require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports.slurpFile = slurpFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js
var require_getSsoSessionData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports.getSsoSessionData = getSsoSessionData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js
var require_loadSsoSessionData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports.loadSsoSessionData = loadSsoSessionData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+shared-ini-file-loader@3.272.0/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types3(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs18();
    var buffer_1 = __require("buffer");
    var http_1 = __require("http");
    function httpRequest2(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs18();
    var url_1 = __require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs18();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-config-provider@3.272.0/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs30();
    var url_parser_1 = require_dist_cjs2();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger2) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger2.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger2 = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger2);
          }
        } catch (e) {
          if (pastCredentials) {
            logger2.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger2);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs18();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-imds@3.272.0/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs28();
    var credential_provider_imds_1 = require_dist_cjs31();
    var property_provider_1 = require_dist_cjs18();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs18();
    var child_process_1 = __require("child_process");
    var util_1 = __require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-process@3.272.0/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = exports.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs32();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOServiceException = class _SSOServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequestFilterSensitiveLog = exports.ListAccountsResponseFilterSensitiveLog = exports.ListAccountsRequestFilterSensitiveLog = exports.ListAccountRolesResponseFilterSensitiveLog = exports.RoleInfoFilterSensitiveLog = exports.ListAccountRolesRequestFilterSensitiveLog = exports.GetRoleCredentialsResponseFilterSensitiveLog = exports.RoleCredentialsFilterSensitiveLog = exports.GetRoleCredentialsRequestFilterSensitiveLog = exports.AccountInfoFilterSensitiveLog = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class _InvalidRequestException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class _ResourceNotFoundException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class _TooManyRequestsException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class _UnauthorizedException extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson12 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return contents;
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var GetRoleCredentialsCommand = class _GetRoleCredentialsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var ListAccountRolesCommand = class _ListAccountRolesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var ListAccountsCommand = class _ListAccountsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var LogoutCommand = class _LogoutCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+hash-node@3.272.0/node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+hash-node@3.272.0/node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var util_utf8_1 = require_dist_cjs22();
    var buffer_1 = __require("buffer");
    var crypto_1 = __require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// ../../node_modules/.pnpm/@aws-sdk+querystring-builder@3.272.0/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+querystring-builder@3.272.0/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs23();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = __require("stream");
    function writeRequestBody(httpRequest2, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest2.on("continue", () => {
          writeBody(httpRequest2, request.body);
        });
      } else {
        writeBody(httpRequest2, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest2, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest2);
      } else if (body) {
        httpRequest2.end(Buffer.from(body));
      } else {
        httpRequest2.end();
      }
    }
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs34();
    var http_1 = __require("http");
    var https_1 = __require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs34();
    var http2_1 = __require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = __require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+node-http-handler@3.272.0/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = __require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-body-length-node@3.208.0/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/promise.js
var require_promise = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/promise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.newLiftedPromise = exports.makeSelfCleaningPromise = void 0;
    function makeSelfCleaningPromise(promise, cleaner) {
      if (!cleaner) {
        return promise;
      }
      return promise.finally(() => {
        cleaner();
      });
    }
    exports.makeSelfCleaningPromise = makeSelfCleaningPromise;
    function newLiftedPromise(promiseBody) {
      let localResolve = void 0;
      let localReject = void 0;
      let promise = new Promise((resolve, reject) => {
        localResolve = resolve;
        localReject = reject;
      });
      if (!localResolve || !localReject) {
        throw new Error("Failed to bind resolve and reject when making lifted promise");
      }
      if (promiseBody) {
        promiseBody(localResolve, localReject);
      }
      return {
        promise,
        resolve: localResolve,
        reject: localReject
      };
    }
    exports.newLiftedPromise = newLiftedPromise;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/cancel.js
var require_cancel = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/cancel.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.newCancellablePromiseFromNextEvent = exports.CancelController = exports.EVENT_NAME = void 0;
    var events_1 = __require("events");
    var promise = __importStar2(require_promise());
    exports.EVENT_NAME = "cancelled";
    var CancelController = class {
      constructor(options) {
        this.cancelled = false;
        if (options && options.emitterFactory) {
          this.emitter = options.emitterFactory();
        } else {
          this.emitter = new events_1.EventEmitter();
        }
      }
      /**
       * Cancels all asynchronous operations associated with this controller
       */
      cancel() {
        if (!this.cancelled) {
          this.cancelled = true;
          this.emitter.emit(exports.EVENT_NAME);
          this.emitter.removeAllListeners(exports.EVENT_NAME);
        }
      }
      /**
       * Checks whether or not the controller is in the cancelled state
       */
      hasBeenCancelled() {
        return this.cancelled;
      }
      /**
       * Registers a callback to be notified when cancel() is invoked externally.  In general, the callback
       * will cancel an asynchronous operation by rejecting the associated promise.
       *
       * IMPORTANT: The listener is invoked synchronously if the controller has already been cancelled.
       *
       * @param listener - function to invoke on cancel; invoked synchronously if the controller has been cancelled
       *
       * @return undefined if the controller has already been cancelled, otherwise a function object whose invocation
       * will remove the listener from the controller's event emitter.
       *
       */
      addListener(listener) {
        if (this.cancelled) {
          listener();
          return void 0;
        }
        this.emitter.on(exports.EVENT_NAME, listener);
        return () => {
          this.emitter.removeListener(exports.EVENT_NAME, listener);
        };
      }
    };
    exports.CancelController = CancelController;
    function newCancellablePromiseFromNextEvent(config) {
      let onEvent = void 0;
      let cancelRemoveListener = void 0;
      let liftedPromise = promise.newLiftedPromise();
      onEvent = (eventData) => {
        try {
          if (config.eventDataTransformer) {
            liftedPromise.resolve(config.eventDataTransformer(eventData));
          } else {
            liftedPromise.resolve(eventData);
          }
        } catch (err) {
          liftedPromise.reject(err);
        }
      };
      config.emitter.addListener(config.eventName, onEvent);
      if (config.cancelController) {
        cancelRemoveListener = config.cancelController.addListener(() => {
          liftedPromise.reject(config.cancelMessage);
        });
      }
      return promise.makeSelfCleaningPromise(liftedPromise.promise, () => {
        if (onEvent) {
          config.emitter.removeListener(config.eventName, onEvent);
        }
        if (cancelRemoveListener) {
          cancelRemoveListener();
        }
      });
    }
    exports.newCancellablePromiseFromNextEvent = newCancellablePromiseFromNextEvent;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/package.json
var require_package4 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/package.json"(exports, module) {
    module.exports = {
      name: "aws-crt",
      version: "1.18.0",
      description: "NodeJS/browser bindings to the aws-c-* libraries",
      homepage: "https://github.com/awslabs/aws-crt-nodejs",
      repository: {
        type: "git",
        url: "git+https://github.com/awslabs/aws-crt-nodejs.git"
      },
      contributors: [
        "AWS Common Runtime Team <aws-sdk-common-runtime@amazon.com>"
      ],
      license: "Apache-2.0",
      main: "./dist/index.js",
      browser: "./dist.browser/browser.js",
      types: "./dist/index.d.ts",
      scripts: {
        tsc: "node ./scripts/tsc.js",
        test: "npm run test:native",
        "test:node": "npm run test:native",
        "test:native": "npx jest --runInBand --verbose --config test/native/jest.config.js --forceExit",
        "test:browser": "npx jest --runInBand --verbose --config test/browser/jest.config.js --forceExit",
        "test:browser:ci": "npm run install:puppeteer && npm run test:browser",
        "install:puppeteer": "npm install --save-dev jest-puppeteer puppeteer @types/puppeteer",
        prepare: "node ./scripts/tsc.js && node ./scripts/install.js",
        install: "node ./scripts/install.js"
      },
      devDependencies: {
        "@types/crypto-js": "^3.1.43",
        "@types/jest": "^27.0.1",
        "@types/node": "^10.17.54",
        "@types/prettier": "2.6.0",
        "@types/puppeteer": "^5.4.7",
        "@types/uuid": "^3.4.8",
        "@types/ws": "^7.4.7",
        "aws-sdk": "^2.848.0",
        "https-proxy-agent": "^5.0.1",
        jest: "^27.2.1",
        "jest-puppeteer": "^5.0.4",
        "jest-runtime": "^27.2.1",
        puppeteer: "^3.3.0",
        "ts-jest": "^27.0.5",
        typedoc: "^0.22.18",
        "typedoc-plugin-merge-modules": "^3.1.0",
        typescript: "^4.7.4",
        uuid: "^8.3.2",
        yargs: "^17.2.1",
        "cmake-js": "^6.3.2",
        tar: "^6.1.11"
      },
      dependencies: {
        "@aws-sdk/util-utf8-browser": "^3.109.0",
        "@httptoolkit/websocket-stream": "^6.0.0",
        axios: "^0.24.0",
        buffer: "^6.0.3",
        "crypto-js": "^4.0.0",
        mqtt: "^4.3.7",
        process: "^0.11.10"
      }
    };
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/platform.js
var require_platform = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/platform.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crt_version = exports.package_info = exports.is_browser = exports.is_nodejs = void 0;
    function is_nodejs() {
      return typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node !== "undefined";
    }
    exports.is_nodejs = is_nodejs;
    function is_browser() {
      return !is_nodejs();
    }
    exports.is_browser = is_browser;
    function package_info() {
      try {
        const pkg = require_package4();
        return pkg;
      } catch (err) {
        return {
          name: "aws-crt-nodejs",
          version: "UNKNOWN"
        };
      }
    }
    exports.package_info = package_info;
    function crt_version() {
      const pkg = package_info();
      return pkg.version;
    }
    exports.crt_version = crt_version;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/resource_safety.js
var require_resource_safety = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/resource_safety.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.using = void 0;
    function using(resource, func) {
      return __awaiter2(this, void 0, void 0, function* () {
        try {
          yield func(resource);
        } finally {
          resource.close();
        }
      });
    }
    exports.using = using;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/binding.js
var require_binding = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/binding.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cRuntime = exports.CRuntimeType = void 0;
    var path = __importStar2(__require("path"));
    var os_1 = __require("os");
    var fs_1 = __require("fs");
    var process_1 = __require("process");
    var child_process_1 = __importDefault2(__require("child_process"));
    var CRuntimeType = Object.freeze({
      NON_LINUX: "cruntime",
      MUSL: "musl",
      GLIBC: "glibc"
    });
    exports.CRuntimeType = CRuntimeType;
    function getCRuntime() {
      if ((0, os_1.platform)() !== "linux") {
        return CRuntimeType.NON_LINUX;
      }
      try {
        const spawnedProcess = child_process_1.default.spawnSync("ldd", ["--version"], { encoding: "utf8" });
        const output = spawnedProcess.stdout + spawnedProcess.stderr;
        if (output.includes(CRuntimeType.MUSL)) {
          return CRuntimeType.MUSL;
        } else {
          return CRuntimeType.GLIBC;
        }
      } catch (error) {
        return CRuntimeType.GLIBC;
      }
    }
    var upgrade_string = "Please upgrade to node >=10.16.0, or use the provided browser implementation.";
    if ("napi" in process_1.versions) {
      const napi_version = parseInt(process_1.versions["napi"]);
      if (napi_version < 4) {
        throw new Error("The AWS CRT native implementation requires that NAPI version 4 be present. " + upgrade_string);
      }
    } else {
      throw new Error("The current runtime is not reporting an NAPI version. " + upgrade_string);
    }
    var cRuntime = getCRuntime();
    exports.cRuntime = cRuntime;
    var binary_name = "aws-crt-nodejs";
    var platformDir = `${os_1.platform}-${os_1.arch}-${cRuntime}`;
    var source_root = path.resolve(__dirname, "..", "..");
    var dist = path.join(source_root, "dist");
    if ((0, fs_1.existsSync)(dist)) {
      source_root = dist;
    }
    var bin_path = path.resolve(source_root, "bin");
    var search_paths = [
      path.join(bin_path, platformDir, binary_name)
    ];
    var binding;
    for (const path2 of search_paths) {
      if ((0, fs_1.existsSync)(path2 + ".node")) {
        binding = __require(path2);
        break;
      }
    }
    if (binding == void 0) {
      throw new Error("AWS CRT binary not present in any of the following locations:\n	" + search_paths.join("\n	"));
    }
    exports.default = binding;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/error.js
var require_error = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/error.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrtError = void 0;
    var binding_1 = __importDefault2(require_binding());
    var CrtError = class extends Error {
      /** @var error - The original error. Most often an error_code, but possibly some other context */
      constructor(error) {
        super(extract_message(error));
        this.error = error;
        this.error_code = extract_code(error);
        this.error_name = extract_name(error);
      }
    };
    exports.CrtError = CrtError;
    function extract_message(error) {
      if (typeof error === "number") {
        return binding_1.default.error_code_to_string(error);
      } else if (error instanceof CrtError) {
        return error.message;
      }
      return error.toString();
    }
    function extract_code(error) {
      if (typeof error === "number") {
        return error;
      } else if (error instanceof CrtError) {
        return error.error_code;
      }
      return void 0;
    }
    function extract_name(error) {
      if (typeof error === "number") {
        return binding_1.default.error_code_to_name(error);
      } else if (error instanceof CrtError) {
        return error.error_name;
      }
      return void 0;
    }
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/native_resource.js
var require_native_resource = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/native_resource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativeResourceMixin = exports.NativeResource = void 0;
    var NativeResource = class {
      constructor(handle) {
        this.handle = handle;
      }
      /** @internal */
      native_handle() {
        return this.handle;
      }
    };
    exports.NativeResource = NativeResource;
    function NativeResourceMixin(Base) {
      return class extends Base {
        /** @internal */
        constructor(...args) {
          const handle = args.shift();
          super(...args);
          this._handle = handle;
        }
        /** @internal */
        _super(handle) {
          this._handle = handle;
        }
        /** @internal */
        native_handle() {
          return this._handle;
        }
      };
    }
    exports.NativeResourceMixin = NativeResourceMixin;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/io.js
var require_io = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/io.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;
    var TlsVersion;
    (function(TlsVersion2) {
      TlsVersion2[TlsVersion2["SSLv3"] = 0] = "SSLv3";
      TlsVersion2[TlsVersion2["TLSv1"] = 1] = "TLSv1";
      TlsVersion2[TlsVersion2["TLSv1_1"] = 2] = "TLSv1_1";
      TlsVersion2[TlsVersion2["TLSv1_2"] = 3] = "TLSv1_2";
      TlsVersion2[TlsVersion2["TLSv1_3"] = 4] = "TLSv1_3";
      TlsVersion2[TlsVersion2["Default"] = 128] = "Default";
    })(TlsVersion = exports.TlsVersion || (exports.TlsVersion = {}));
    var SocketType;
    (function(SocketType2) {
      SocketType2[SocketType2["STREAM"] = 0] = "STREAM";
      SocketType2[SocketType2["DGRAM"] = 1] = "DGRAM";
    })(SocketType = exports.SocketType || (exports.SocketType = {}));
    var SocketDomain;
    (function(SocketDomain2) {
      SocketDomain2[SocketDomain2["IPV4"] = 0] = "IPV4";
      SocketDomain2[SocketDomain2["IPV6"] = 1] = "IPV6";
      SocketDomain2[SocketDomain2["LOCAL"] = 2] = "LOCAL";
    })(SocketDomain = exports.SocketDomain || (exports.SocketDomain = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/io.js
var require_io2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/io.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pkcs11Lib = exports.TlsConnectionOptions = exports.ServerTlsContext = exports.ClientTlsContext = exports.TlsContext = exports.TlsContextOptions = exports.SocketOptions = exports.ClientBootstrap = exports.InputStream = exports.is_alpn_available = exports.enable_logging = exports.LogLevel = exports.error_code_to_name = exports.error_code_to_string = exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var io_1 = require_io();
    var io_2 = require_io();
    Object.defineProperty(exports, "TlsVersion", { enumerable: true, get: function() {
      return io_2.TlsVersion;
    } });
    Object.defineProperty(exports, "SocketType", { enumerable: true, get: function() {
      return io_2.SocketType;
    } });
    Object.defineProperty(exports, "SocketDomain", { enumerable: true, get: function() {
      return io_2.SocketDomain;
    } });
    var error_1 = require_error();
    function error_code_to_string(error_code) {
      return binding_1.default.error_code_to_string(error_code);
    }
    exports.error_code_to_string = error_code_to_string;
    function error_code_to_name(error_code) {
      return binding_1.default.error_code_to_name(error_code);
    }
    exports.error_code_to_name = error_code_to_name;
    var LogLevel;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["NONE"] = 0] = "NONE";
      LogLevel2[LogLevel2["FATAL"] = 1] = "FATAL";
      LogLevel2[LogLevel2["ERROR"] = 2] = "ERROR";
      LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
      LogLevel2[LogLevel2["INFO"] = 4] = "INFO";
      LogLevel2[LogLevel2["DEBUG"] = 5] = "DEBUG";
      LogLevel2[LogLevel2["TRACE"] = 6] = "TRACE";
    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
    function enable_logging(level) {
      binding_1.default.io_logging_enable(level);
    }
    exports.enable_logging = enable_logging;
    function is_alpn_available() {
      return binding_1.default.is_alpn_available();
    }
    exports.is_alpn_available = is_alpn_available;
    var InputStream = class extends native_resource_1.NativeResource {
      constructor(source) {
        super(binding_1.default.io_input_stream_new(16 * 1024));
        this.source = source;
        this.source.on("data", (data) => {
          data = Buffer.isBuffer(data) ? data : Buffer.from(data.toString());
          binding_1.default.io_input_stream_append(this.native_handle(), data);
        });
        this.source.on("end", () => {
          binding_1.default.io_input_stream_append(this.native_handle(), void 0);
        });
      }
    };
    exports.InputStream = InputStream;
    var ClientBootstrap = class extends native_resource_1.NativeResource {
      constructor() {
        super(binding_1.default.io_client_bootstrap_new());
      }
    };
    exports.ClientBootstrap = ClientBootstrap;
    var SocketOptions = class extends native_resource_1.NativeResource {
      constructor(type = io_1.SocketType.STREAM, domain = io_1.SocketDomain.IPV6, connect_timeout_ms = 5e3, keepalive = false, keep_alive_interval_sec = 0, keep_alive_timeout_sec = 0, keep_alive_max_failed_probes = 0) {
        super(binding_1.default.io_socket_options_new(type, domain, connect_timeout_ms, keep_alive_interval_sec, keep_alive_timeout_sec, keep_alive_max_failed_probes, keepalive));
      }
    };
    exports.SocketOptions = SocketOptions;
    var TlsContextOptions = class _TlsContextOptions {
      constructor() {
        this.min_tls_version = io_1.TlsVersion.Default;
        this.alpn_list = [];
        this.verify_peer = true;
      }
      /**
       * Overrides the default system trust store.
       * @param ca_dirpath - Only used on Unix-style systems where all trust anchors are
       * stored in a directory (e.g. /etc/ssl/certs).
       * @param ca_filepath - Single file containing all trust CAs, in PEM format
       */
      override_default_trust_store_from_path(ca_dirpath, ca_filepath) {
        this.ca_dirpath = ca_dirpath;
        this.ca_filepath = ca_filepath;
      }
      /**
       * Overrides the default system trust store.
       * @param certificate_authority - String containing all trust CAs, in PEM format
       */
      override_default_trust_store(certificate_authority) {
        this.certificate_authority = certificate_authority;
      }
      /**
       * Create options configured for mutual TLS in client mode,
       * with client certificate and private key provided as in-memory strings.
       * @param certificate - Client certificate file contents, in PEM format
       * @param private_key - Client private key file contents, in PEM format
       *
       * @returns newly configured TlsContextOptions object
       */
      static create_client_with_mtls(certificate, private_key) {
        let opt = new _TlsContextOptions();
        opt.certificate = certificate;
        opt.private_key = private_key;
        opt.verify_peer = true;
        return opt;
      }
      /**
       * Create options configured for mutual TLS in client mode,
       * with client certificate and private key provided via filepath.
       * @param certificate_filepath - Path to client certificate, in PEM format
       * @param private_key_filepath - Path to private key, in PEM format
       *
       * @returns newly configured TlsContextOptions object
       */
      static create_client_with_mtls_from_path(certificate_filepath, private_key_filepath) {
        let opt = new _TlsContextOptions();
        opt.certificate_filepath = certificate_filepath;
        opt.private_key_filepath = private_key_filepath;
        opt.verify_peer = true;
        return opt;
      }
      /**
       * Create options for mutual TLS in client mode,
       * with client certificate and private key bundled in a single PKCS#12 file.
       * @param pkcs12_filepath - Path to PKCS#12 file containing client certificate and private key.
       * @param pkcs12_password - PKCS#12 password
       *
       * @returns newly configured TlsContextOptions object
      */
      static create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password) {
        let opt = new _TlsContextOptions();
        opt.pkcs12_filepath = pkcs12_filepath;
        opt.pkcs12_password = pkcs12_password;
        opt.verify_peer = true;
        return opt;
      }
      /**
       * @deprecated Renamed [[create_client_with_mtls_pkcs12_from_path]]
       */
      static create_client_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {
        return this.create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password);
      }
      /**
       * Create options configured for mutual TLS in client mode,
       * using a PKCS#11 library for private key operations.
       *
       * NOTE: This configuration only works on Unix devices.
       *
       * @param options - PKCS#11 options
       *
       * @returns newly configured TlsContextOptions object
       */
      static create_client_with_mtls_pkcs11(options) {
        let opt = new _TlsContextOptions();
        opt.pkcs11_options = options;
        opt.verify_peer = true;
        return opt;
      }
      /**
       * Create options configured for mutual TLS in client mode,
       * using a certificate in a Windows certificate store.
       *
       * NOTE: Windows only.
       *
       * @param certificate_path - Path to certificate in a Windows certificate store.
       *      The path must use backslashes and end with the certificate's thumbprint.
       *      Example: `CurrentUser\MY\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6`
       */
      static create_client_with_mtls_windows_cert_store_path(certificate_path) {
        let opt = new _TlsContextOptions();
        opt.windows_cert_store_path = certificate_path;
        opt.verify_peer = true;
        return opt;
      }
      /**
       * Creates TLS context with peer verification disabled, along with a certificate and private key
       * @param certificate_filepath - Path to certificate, in PEM format
       * @param private_key_filepath - Path to private key, in PEM format
       *
       * @returns newly configured TlsContextOptions object
       */
      static create_server_with_mtls_from_path(certificate_filepath, private_key_filepath) {
        let opt = new _TlsContextOptions();
        opt.certificate_filepath = certificate_filepath;
        opt.private_key_filepath = private_key_filepath;
        opt.verify_peer = false;
        return opt;
      }
      /**
       * Creates TLS context with peer verification disabled, along with a certificate and private key
       * in PKCS#12 format
       * @param pkcs12_filepath - Path to certificate, in PKCS#12 format
       * @param pkcs12_password - PKCS#12 Password
       *
       * @returns newly configured TlsContextOptions object
       */
      static create_server_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {
        let opt = new _TlsContextOptions();
        opt.pkcs12_filepath = pkcs12_filepath;
        opt.pkcs12_password = pkcs12_password;
        opt.verify_peer = false;
        return opt;
      }
    };
    exports.TlsContextOptions = TlsContextOptions;
    var TlsContext = class extends native_resource_1.NativeResource {
      constructor(ctx_opt) {
        if (ctx_opt == null || ctx_opt == void 0) {
          throw new error_1.CrtError("TlsContext constructor: ctx_opt not defined");
        }
        super(binding_1.default.io_tls_ctx_new(ctx_opt.min_tls_version, ctx_opt.ca_filepath, ctx_opt.ca_dirpath, ctx_opt.certificate_authority, ctx_opt.alpn_list && ctx_opt.alpn_list.length > 0 ? ctx_opt.alpn_list.join(";") : void 0, ctx_opt.certificate_filepath, ctx_opt.certificate, ctx_opt.private_key_filepath, ctx_opt.private_key, ctx_opt.pkcs12_filepath, ctx_opt.pkcs12_password, ctx_opt.pkcs11_options, ctx_opt.windows_cert_store_path, ctx_opt.verify_peer));
      }
    };
    exports.TlsContext = TlsContext;
    var ClientTlsContext = class extends TlsContext {
      constructor(ctx_opt) {
        if (!ctx_opt) {
          ctx_opt = new TlsContextOptions();
          ctx_opt.verify_peer = true;
        }
        super(ctx_opt);
      }
    };
    exports.ClientTlsContext = ClientTlsContext;
    var ServerTlsContext = class extends TlsContext {
      constructor(ctx_opt) {
        if (!ctx_opt) {
          ctx_opt = new TlsContextOptions();
          ctx_opt.verify_peer = false;
        }
        super(ctx_opt);
      }
    };
    exports.ServerTlsContext = ServerTlsContext;
    var TlsConnectionOptions = class extends native_resource_1.NativeResource {
      constructor(tls_ctx, server_name, alpn_list = []) {
        if (tls_ctx == null || tls_ctx == void 0) {
          throw new error_1.CrtError("TlsConnectionOptions constructor: tls_ctx not defined");
        }
        super(binding_1.default.io_tls_connection_options_new(tls_ctx.native_handle(), server_name, alpn_list && alpn_list.length > 0 ? alpn_list.join(";") : void 0));
        this.tls_ctx = tls_ctx;
        this.server_name = server_name;
        this.alpn_list = alpn_list;
      }
    };
    exports.TlsConnectionOptions = TlsConnectionOptions;
    var Pkcs11Lib = class _Pkcs11Lib extends native_resource_1.NativeResource {
      /**
       * @param path - Path to PKCS#11 library.
       * @param behavior - Specifies how `C_Initialize()` and `C_Finalize()`
       *                   will be called on the PKCS#11 library.
       */
      constructor(path, behavior = _Pkcs11Lib.InitializeFinalizeBehavior.DEFAULT) {
        super(binding_1.default.io_pkcs11_lib_new(path, behavior));
      }
      /**
       * Release the PKCS#11 library immediately, without waiting for the GC.
       */
      close() {
        binding_1.default.io_pkcs11_lib_close(this.native_handle());
      }
    };
    exports.Pkcs11Lib = Pkcs11Lib;
    (function(Pkcs11Lib2) {
      let InitializeFinalizeBehavior;
      (function(InitializeFinalizeBehavior2) {
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["DEFAULT"] = 0] = "DEFAULT";
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["OMIT"] = 1] = "OMIT";
        InitializeFinalizeBehavior2[InitializeFinalizeBehavior2["STRICT"] = 2] = "STRICT";
      })(InitializeFinalizeBehavior = Pkcs11Lib2.InitializeFinalizeBehavior || (Pkcs11Lib2.InitializeFinalizeBehavior = {}));
    })(Pkcs11Lib = exports.Pkcs11Lib || (exports.Pkcs11Lib = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/auth.js
var require_auth = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/auth.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws_verify_sigv4a_signing = exports.aws_sign_request = exports.AwsSignedBodyHeaderType = exports.AwsSignedBodyValue = exports.AwsSignatureType = exports.AwsSigningAlgorithm = exports.AwsCredentialsProvider = void 0;
    var binding_1 = __importDefault2(require_binding());
    var error_1 = require_error();
    var io_1 = require_io2();
    var AwsCredentialsProvider = class extends binding_1.default.AwsCredentialsProvider {
      /**
       * Creates a new default credentials provider to be used internally for AWS credentials resolution:
       *
       *   The CRT's default provider chain currently sources in this order:
       *
       *     1. Environment
       *     2. Profile
       *     3. (conditional, off by default) ECS
       *     4. (conditional, on by default) EC2 Instance Metadata
       *
       * @param bootstrap (optional) client bootstrap to be used to establish any required network connections
       *
       * @returns a new credentials provider using default credentials resolution rules
       */
      static newDefault(bootstrap = void 0) {
        return super.newDefault(bootstrap != null ? bootstrap.native_handle() : null);
      }
      /**
       * Creates a new credentials provider that returns a fixed set of credentials.
       *
       * @param access_key access key to use in the static credentials
       * @param secret_key secret key to use in the static credentials
       * @param session_token (optional) session token to use in the static credentials
       *
       * @returns a new credentials provider that will return a fixed set of AWS credentials
       */
      static newStatic(access_key, secret_key, session_token) {
        return super.newStatic(access_key, secret_key, session_token);
      }
      /**
       * Creates a new credentials provider that sources credentials from the AWS Cognito Identity service via the
       * GetCredentialsForIdentity http API.
       *
       * @param config provider configuration necessary to make GetCredentialsForIdentity web requests
       *
       * @returns a new credentials provider that returns credentials sourced from the AWS Cognito Identity service
       */
      static newCognito(config) {
        if (config == null || config == void 0) {
          throw new error_1.CrtError("AwsCredentialsProvider newCognito: Cognito config not defined");
        }
        return super.newCognito(config, config.tlsContext != null ? config.tlsContext.native_handle() : new io_1.ClientTlsContext().native_handle(), config.bootstrap != null ? config.bootstrap.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null);
      }
      /**
       * Creates a new credentials provider that sources credentials from the the X509 service on AWS IoT Core.
       *
       * @param config provider configuration necessary to source credentials via X509
       *
       * @returns a new credentials provider that returns credentials sourced from the AWS X509 service
       */
      static newX509(config) {
        if (config == null || config == void 0) {
          throw new error_1.CrtError("AwsCredentialsProvider newX509: X509 config not defined");
        }
        return super.newX509(config, config.tlsContext.native_handle(), config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null);
      }
    };
    exports.AwsCredentialsProvider = AwsCredentialsProvider;
    var AwsSigningAlgorithm;
    (function(AwsSigningAlgorithm2) {
      AwsSigningAlgorithm2[AwsSigningAlgorithm2["SigV4"] = 0] = "SigV4";
      AwsSigningAlgorithm2[AwsSigningAlgorithm2["SigV4Asymmetric"] = 1] = "SigV4Asymmetric";
    })(AwsSigningAlgorithm = exports.AwsSigningAlgorithm || (exports.AwsSigningAlgorithm = {}));
    var AwsSignatureType;
    (function(AwsSignatureType2) {
      AwsSignatureType2[AwsSignatureType2["HttpRequestViaHeaders"] = 0] = "HttpRequestViaHeaders";
      AwsSignatureType2[AwsSignatureType2["HttpRequestViaQueryParams"] = 1] = "HttpRequestViaQueryParams";
      AwsSignatureType2[AwsSignatureType2["HttpRequestChunk"] = 2] = "HttpRequestChunk";
      AwsSignatureType2[AwsSignatureType2["HttpRequestEvent"] = 3] = "HttpRequestEvent";
    })(AwsSignatureType = exports.AwsSignatureType || (exports.AwsSignatureType = {}));
    var AwsSignedBodyValue;
    (function(AwsSignedBodyValue2) {
      AwsSignedBodyValue2["EmptySha256"] = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      AwsSignedBodyValue2["UnsignedPayload"] = "UNSIGNED-PAYLOAD";
      AwsSignedBodyValue2["StreamingAws4HmacSha256Payload"] = "STREAMING-AWS4-HMAC-SHA256-PAYLOAD";
      AwsSignedBodyValue2["StreamingAws4HmacSha256Events"] = "STREAMING-AWS4-HMAC-SHA256-EVENTS";
    })(AwsSignedBodyValue = exports.AwsSignedBodyValue || (exports.AwsSignedBodyValue = {}));
    var AwsSignedBodyHeaderType;
    (function(AwsSignedBodyHeaderType2) {
      AwsSignedBodyHeaderType2[AwsSignedBodyHeaderType2["None"] = 0] = "None";
      AwsSignedBodyHeaderType2[AwsSignedBodyHeaderType2["XAmzContentSha256"] = 1] = "XAmzContentSha256";
    })(AwsSignedBodyHeaderType = exports.AwsSignedBodyHeaderType || (exports.AwsSignedBodyHeaderType = {}));
    function aws_sign_request(request, config) {
      return __awaiter2(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
          try {
            binding_1.default.aws_sign_request(request, config, (error_code) => {
              if (error_code == 0) {
                resolve(request);
              } else {
                reject(new error_1.CrtError(error_code));
              }
            });
          } catch (error) {
            reject(error);
          }
        });
      });
    }
    exports.aws_sign_request = aws_sign_request;
    function aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y) {
      return binding_1.default.aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y);
    }
    exports.aws_verify_sigv4a_signing = aws_verify_sigv4a_signing;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/checksums.js
var require_checksums = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/checksums.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crc32c = exports.crc32 = void 0;
    var binding_1 = __importDefault2(require_binding());
    function crc32(data, previous) {
      return binding_1.default.checksums_crc32(data, previous);
    }
    exports.crc32 = crc32;
    function crc32c(data, previous) {
      return binding_1.default.checksums_crc32c(data, previous);
    }
    exports.crc32c = crc32c;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/crt.js
var require_crt = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/crt.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.native_memory_dump = exports.native_memory = void 0;
    var binding_1 = __importDefault2(require_binding());
    function native_memory() {
      return binding_1.default.native_memory();
    }
    exports.native_memory = native_memory;
    function native_memory_dump() {
      return binding_1.default.native_memory_dump();
    }
    exports.native_memory_dump = native_memory_dump;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/crypto.js
var require_crypto = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/crypto.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac_sha256 = exports.Sha256Hmac = exports.hash_sha1 = exports.Sha1Hash = exports.hash_sha256 = exports.Sha256Hash = exports.hash_md5 = exports.Md5Hash = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var Hash = class extends native_resource_1.NativeResource {
      /**
       * Hash additional data.
       * @param data Additional data to hash
       */
      update(data) {
        binding_1.default.hash_update(this.native_handle(), data);
      }
      /**
       * Completes the hash computation and returns the final hash digest.
       *
       * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.
       */
      finalize(truncate_to) {
        return binding_1.default.hash_digest(this.native_handle(), truncate_to);
      }
      constructor(hash_handle) {
        super(hash_handle);
      }
    };
    var Md5Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_md5_new());
      }
    };
    exports.Md5Hash = Md5Hash;
    function hash_md5(data, truncate_to) {
      return binding_1.default.hash_md5_compute(data, truncate_to);
    }
    exports.hash_md5 = hash_md5;
    var Sha256Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_sha256_new());
      }
    };
    exports.Sha256Hash = Sha256Hash;
    function hash_sha256(data, truncate_to) {
      return binding_1.default.hash_sha256_compute(data, truncate_to);
    }
    exports.hash_sha256 = hash_sha256;
    var Sha1Hash = class extends Hash {
      constructor() {
        super(binding_1.default.hash_sha1_new());
      }
    };
    exports.Sha1Hash = Sha1Hash;
    function hash_sha1(data, truncate_to) {
      return binding_1.default.hash_sha1_compute(data, truncate_to);
    }
    exports.hash_sha1 = hash_sha1;
    var Hmac = class extends native_resource_1.NativeResource {
      /**
       * Hash additional data.
       *
       * @param data additional data to hash
       */
      update(data) {
        binding_1.default.hmac_update(this.native_handle(), data);
      }
      /**
       * Completes the hash computation and returns the final hmac digest.
       *
       * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.
       */
      finalize(truncate_to) {
        return binding_1.default.hmac_digest(this.native_handle(), truncate_to);
      }
      constructor(hash_handle) {
        super(hash_handle);
      }
    };
    var Sha256Hmac = class extends Hmac {
      constructor(secret) {
        super(binding_1.default.hmac_sha256_new(secret));
      }
    };
    exports.Sha256Hmac = Sha256Hmac;
    function hmac_sha256(secret, data, truncate_to) {
      return binding_1.default.hmac_sha256_compute(secret, data, truncate_to);
    }
    exports.hmac_sha256 = hmac_sha256;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/event.js
var require_event = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BufferedEventEmitter = void 0;
    var events_1 = __require("events");
    var BufferedEvent = class {
      constructor(event, args) {
        this.event = event;
        this.args = args;
      }
    };
    var BufferedEventEmitter = class extends events_1.EventEmitter {
      constructor() {
        super();
        this.corked = false;
      }
      /**
       * Forces all written events to be buffered in memory. The buffered data will be
       * flushed when {@link BufferedEventEmitter.uncork} is called.
       */
      cork() {
        this.corked = true;
      }
      /**
       * Flushes all data buffered since {@link BufferedEventEmitter.cork} was called.
       *
       * NOTE: It is HIGHLY recommended that uncorking should always be done via
       * ``` process.nextTick```, not during the ```EventEmitter.on()``` call.
       */
      uncork() {
        this.corked = false;
        while (this.eventQueue) {
          const event = this.eventQueue;
          super.emit(event.event, ...event.args);
          this.eventQueue = this.eventQueue.next;
        }
      }
      /**
       * Synchronously calls each of the listeners registered for the event key supplied
       * in registration order. If the {@link BufferedEventEmitter} is currently corked,
       * the event will be buffered until {@link BufferedEventEmitter.uncork} is called.
       * @param event The name of the event
       * @param args Event payload
       */
      emit(event, ...args) {
        if (this.corked) {
          let last = this.lastQueuedEvent;
          this.lastQueuedEvent = new BufferedEvent(event, args);
          if (last) {
            last.next = this.lastQueuedEvent;
          } else {
            this.eventQueue = this.lastQueuedEvent;
          }
          return this.listeners(event).length > 0;
        }
        return super.emit(event, ...args);
      }
    };
    exports.BufferedEventEmitter = BufferedEventEmitter;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/eventstream_utils.js
var require_eventstream_utils = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/eventstream_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unmarshalInt64BigintFromBuffer = exports.marshalInt64BigintAsBuffer = exports.MIN_INT64 = exports.MAX_INT64 = exports.MIN_INT32 = exports.MAX_INT32 = exports.MIN_INT16 = exports.MAX_INT16 = exports.MIN_INT8 = exports.MAX_INT8 = void 0;
    var error_1 = require_error();
    exports.MAX_INT8 = 127;
    exports.MIN_INT8 = -128;
    exports.MAX_INT16 = 32767;
    exports.MIN_INT16 = -32768;
    exports.MAX_INT32 = 2147483647;
    exports.MIN_INT32 = -2147483648;
    exports.MAX_INT64 = BigInt("9223372036854775807");
    exports.MIN_INT64 = BigInt("-9223372036854775808");
    var MAX_UINT8_AS_BIGINT = BigInt("256");
    function marshalInt64BigintAsBuffer(value) {
      if (value < exports.MIN_INT64 || value > exports.MAX_INT64) {
        throw new error_1.CrtError("marshalInt64BigintAsBuffer expects a value that can fit in 8 bytes");
      }
      let buffer = new Uint8Array(8);
      if (value < 0) {
        value = -value - BigInt(1);
        for (let i = 0; i < 8; ++i) {
          buffer[i] = 255 - Number(value % MAX_UINT8_AS_BIGINT);
          value /= MAX_UINT8_AS_BIGINT;
        }
      } else {
        for (let i = 0; i < 8; ++i) {
          buffer[i] = Number(value % MAX_UINT8_AS_BIGINT);
          value /= MAX_UINT8_AS_BIGINT;
        }
      }
      return buffer;
    }
    exports.marshalInt64BigintAsBuffer = marshalInt64BigintAsBuffer;
    function unmarshalInt64BigintFromBuffer(buffer) {
      let value = BigInt(0);
      let byteView = new Uint8Array(buffer);
      if (byteView.length != 8) {
        throw new error_1.CrtError("unmarshalInt64BigintFromBuffer expects a byte buffer of length 8");
      }
      let shift = BigInt(1);
      let isNegative = (byteView[7] & 128) != 0;
      if (isNegative) {
        for (let i = 0; i < byteView.length; ++i) {
          let byteValue = BigInt(255 - byteView[i]);
          value += byteValue * shift;
          shift *= MAX_UINT8_AS_BIGINT;
        }
        value += BigInt(1);
        value = -value;
      } else {
        for (let i = 0; i < byteView.length; ++i) {
          let byteValue = BigInt(byteView[i]);
          value += byteValue * shift;
          shift *= MAX_UINT8_AS_BIGINT;
        }
      }
      return value;
    }
    exports.unmarshalInt64BigintFromBuffer = unmarshalInt64BigintFromBuffer;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/eventstream.js
var require_eventstream = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/eventstream.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientStream = exports.ClientConnection = exports.MessageType = exports.MessageFlags = exports.Header = exports.HeaderType = void 0;
    var native_resource_1 = require_native_resource();
    var event_1 = require_event();
    var error_1 = require_error();
    var io = __importStar2(require_io2());
    var eventstream_utils = __importStar2(require_eventstream_utils());
    var promise = __importStar2(require_promise());
    var binding_1 = __importDefault2(require_binding());
    var HeaderType;
    (function(HeaderType2) {
      HeaderType2[HeaderType2["BooleanTrue"] = 0] = "BooleanTrue";
      HeaderType2[HeaderType2["BooleanFalse"] = 1] = "BooleanFalse";
      HeaderType2[HeaderType2["Byte"] = 2] = "Byte";
      HeaderType2[HeaderType2["Int16"] = 3] = "Int16";
      HeaderType2[HeaderType2["Int32"] = 4] = "Int32";
      HeaderType2[HeaderType2["Int64"] = 5] = "Int64";
      HeaderType2[HeaderType2["ByteBuffer"] = 6] = "ByteBuffer";
      HeaderType2[HeaderType2["String"] = 7] = "String";
      HeaderType2[HeaderType2["Timestamp"] = 8] = "Timestamp";
      HeaderType2[HeaderType2["UUID"] = 9] = "UUID";
    })(HeaderType = exports.HeaderType || (exports.HeaderType = {}));
    var AWS_MAXIMUM_EVENT_STREAM_HEADER_NAME_LENGTH = 127;
    var Header = class _Header {
      /** @internal */
      constructor(name, type, value) {
        this.name = name;
        this.type = type;
        this.value = value;
      }
      static validateHeaderName(name) {
        if (name.length == 0 || name.length > AWS_MAXIMUM_EVENT_STREAM_HEADER_NAME_LENGTH) {
          throw new error_1.CrtError(`Event stream header name (${name}) is not valid`);
        }
      }
      /**
       * Create a new boolean-valued message header
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newBoolean(name, value) {
        _Header.validateHeaderName(name);
        if (value) {
          return new _Header(name, HeaderType.BooleanTrue);
        } else {
          return new _Header(name, HeaderType.BooleanFalse);
        }
      }
      /**
       * Create a new byte-valued message header
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newByte(name, value) {
        _Header.validateHeaderName(name);
        if (value >= eventstream_utils.MIN_INT8 && value <= eventstream_utils.MAX_INT8 && Number.isSafeInteger(value)) {
          return new _Header(name, HeaderType.Byte, value);
        }
        throw new error_1.CrtError(`Illegal value for eventstream byte-valued header: ${value}`);
      }
      /**
       * Create a new 16-bit-integer-valued message header
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newInt16(name, value) {
        _Header.validateHeaderName(name);
        if (value >= eventstream_utils.MIN_INT16 && value <= eventstream_utils.MAX_INT16 && Number.isSafeInteger(value)) {
          return new _Header(name, HeaderType.Int16, value);
        }
        throw new error_1.CrtError(`Illegal value for eventstream int16-valued header: ${value}`);
      }
      /**
       * Create a new 32-bit-integer-valued message header
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newInt32(name, value) {
        _Header.validateHeaderName(name);
        if (value >= eventstream_utils.MIN_INT32 && value <= eventstream_utils.MAX_INT32 && Number.isSafeInteger(value)) {
          return new _Header(name, HeaderType.Int32, value);
        }
        throw new error_1.CrtError(`Illegal value for eventstream int32-valued header: ${value}`);
      }
      /**
       * Create a new 64-bit-integer-valued message header.  number cannot represent a full 64-bit integer range but
       * its usage is so common that this exists for convenience.  Internally, we always track 64 bit integers as
       * bigints.
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newInt64FromNumber(name, value) {
        _Header.validateHeaderName(name);
        if (Number.isSafeInteger(value)) {
          return new _Header(name, HeaderType.Int64, eventstream_utils.marshalInt64BigintAsBuffer(BigInt(value)));
        }
        throw new error_1.CrtError(`Illegal value for eventstream int64-valued header: ${value}`);
      }
      /**
       * Create a new 64-bit-integer-valued message header from a big integer.
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newInt64FromBigint(name, value) {
        _Header.validateHeaderName(name);
        if (value >= eventstream_utils.MIN_INT64 && value <= eventstream_utils.MAX_INT64) {
          return new _Header(name, HeaderType.Int64, eventstream_utils.marshalInt64BigintAsBuffer(value));
        }
        throw new error_1.CrtError(`Illegal value for eventstream int64-valued header: ${value}`);
      }
      /**
       * Create a new byte-buffer-valued message header
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newByteBuffer(name, value) {
        _Header.validateHeaderName(name);
        return new _Header(name, HeaderType.ByteBuffer, value);
      }
      /**
       * Create a new string-valued message header
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newString(name, value) {
        _Header.validateHeaderName(name);
        return new _Header(name, HeaderType.String, value);
      }
      /**
       * Create a new timestamp-valued message header from an integral value in seconds since epoch.
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newTimeStampFromSecondsSinceEpoch(name, secondsSinceEpoch) {
        _Header.validateHeaderName(name);
        if (Number.isSafeInteger(secondsSinceEpoch) && secondsSinceEpoch >= 0) {
          return new _Header(name, HeaderType.Timestamp, secondsSinceEpoch);
        }
        throw new error_1.CrtError(`Illegal value for eventstream timestamp-valued header: ${secondsSinceEpoch}`);
      }
      /**
       * Create a new timestamp-valued message header from a date.
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newTimeStampFromDate(name, date) {
        _Header.validateHeaderName(name);
        const secondsSinceEpoch = date.getTime();
        if (Number.isSafeInteger(secondsSinceEpoch)) {
          return new _Header(name, HeaderType.Timestamp, secondsSinceEpoch);
        }
        throw new error_1.CrtError(`Illegal value for eventstream timestamp-valued header: ${date}`);
      }
      /**
       * Create a new UUID-valued message header.
       * WIP
       *
       * @param name name of the header
       * @param value value of the header
       */
      static newUUID(name, value) {
        _Header.validateHeaderName(name);
        if (value.byteLength == 16) {
          return new _Header(name, HeaderType.UUID, value);
        }
        throw new error_1.CrtError(`Illegal value for eventstream uuid-valued header: ${value}`);
      }
      toValue(type) {
        if (type != this.type) {
          throw new error_1.CrtError(`Header of type (${this.type}) cannot be converted to type (${type})`);
        }
        return this.value;
      }
      /**
       * All conversion functions require the header's type to be appropriately matching.  There are no error-prone
       * flexible conversion helpers.
       */
      /**
       * Returns a boolean header's value.
       */
      asBoolean() {
        switch (this.type) {
          case HeaderType.BooleanFalse:
            return false;
          case HeaderType.BooleanTrue:
            return true;
          default:
            throw new error_1.CrtError(`Header of type (${this.type}) cannot be converted to type (boolean)`);
        }
      }
      /**
       * Returns a byte header's value.
       */
      asByte() {
        return this.toValue(HeaderType.Byte);
      }
      /**
       * Returns a 16-bit integer header's value.
       */
      asInt16() {
        return this.toValue(HeaderType.Int16);
      }
      /**
       * Returns a 32-bit integer header's value.
       */
      asInt32() {
        return this.toValue(HeaderType.Int32);
      }
      /**
       * Returns a 64-bit integer header's value.
       */
      asInt64() {
        return eventstream_utils.unmarshalInt64BigintFromBuffer(this.toValue(HeaderType.Int64));
      }
      /**
       * Returns a byte buffer header's value.
       */
      asByteBuffer() {
        return this.toValue(HeaderType.ByteBuffer);
      }
      /**
       * Returns a string header's value.
       */
      asString() {
        return this.toValue(HeaderType.String);
      }
      /**
       * Returns a timestamp header's value (as seconds since epoch).
       */
      asTimestamp() {
        return this.toValue(HeaderType.Timestamp);
      }
      /**
       * Returns a UUID header's value.
       */
      asUUID() {
        return this.toValue(HeaderType.UUID);
      }
    };
    exports.Header = Header;
    var MessageFlags;
    (function(MessageFlags2) {
      MessageFlags2[MessageFlags2["None"] = 0] = "None";
      MessageFlags2[MessageFlags2["ConnectionAccepted"] = 1] = "ConnectionAccepted";
      MessageFlags2[MessageFlags2["TerminateStream"] = 2] = "TerminateStream";
    })(MessageFlags = exports.MessageFlags || (exports.MessageFlags = {}));
    var MessageType;
    (function(MessageType2) {
      MessageType2[MessageType2["ApplicationMessage"] = 0] = "ApplicationMessage";
      MessageType2[MessageType2["ApplicationError"] = 1] = "ApplicationError";
      MessageType2[MessageType2["Ping"] = 2] = "Ping";
      MessageType2[MessageType2["PingResponse"] = 3] = "PingResponse";
      MessageType2[MessageType2["Connect"] = 4] = "Connect";
      MessageType2[MessageType2["ConnectAck"] = 5] = "ConnectAck";
      MessageType2[MessageType2["ProtocolError"] = 6] = "ProtocolError";
      MessageType2[MessageType2["InternalError"] = 7] = "InternalError";
    })(MessageType = exports.MessageType || (exports.MessageType = {}));
    function mapPodHeadersToJSHeaders(headers) {
      return Array.from(headers, (header) => {
        return new Header(header.name, header.type, header.value);
      });
    }
    function mapPodMessageToJSMessage(message) {
      let jsMessage = {
        type: message.type,
        flags: message.flags,
        payload: message.payload
      };
      if (message.headers) {
        jsMessage.headers = mapPodHeadersToJSHeaders(message.headers);
      }
      return jsMessage;
    }
    var ClientConnectionState;
    (function(ClientConnectionState2) {
      ClientConnectionState2[ClientConnectionState2["None"] = 0] = "None";
      ClientConnectionState2[ClientConnectionState2["Connecting"] = 1] = "Connecting";
      ClientConnectionState2[ClientConnectionState2["Connected"] = 2] = "Connected";
      ClientConnectionState2[ClientConnectionState2["Disconnected"] = 3] = "Disconnected";
      ClientConnectionState2[ClientConnectionState2["Closed"] = 4] = "Closed";
    })(ClientConnectionState || (ClientConnectionState = {}));
    var ClientConnection = class _ClientConnection extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      /**
       * Configures and creates a new ClientConnection instance
       *
       * @param config configuration options for the event stream connection
       */
      constructor(config) {
        if (config === void 0) {
          throw new error_1.CrtError("Invalid configuration passed to eventstream ClientConnection constructor");
        }
        super();
        this.state = ClientConnectionState.None;
        this._super(binding_1.default.event_stream_client_connection_new(this, config, (connection, errorCode) => {
          _ClientConnection._s_on_disconnect(connection, errorCode);
        }, (connection, message) => {
          _ClientConnection._s_on_protocol_message(connection, message);
        }, config.socketOptions ? config.socketOptions.native_handle() : null, config.tlsCtx ? config.tlsCtx.native_handle() : null));
      }
      /**
       * Shuts down the connection (if active) and begins the process to release native resources associated with it by
       * having the native binding release the only reference to the extern object representing the connection.  Once
       * close() has been called, no more events will be emitted and all public API invocations will trigger an exception.
       *
       * Ultimately, the native resources will not be released until the connection has fully shut down and that
       * shutdown event has reached the libuv event loop.
       *
       * This function **must** be called for every ClientConnection instance or native resources will leak.
       */
      close() {
        if (this.state != ClientConnectionState.Closed) {
          this.state = ClientConnectionState.Closed;
          binding_1.default.event_stream_client_connection_close(this.native_handle());
        }
      }
      /**
       * Attempts to open a network connection to the configured remote endpoint.  Returned promise will be fulfilled if
       * the transport-level connection is successfully established, and rejected otherwise.
       *
       * connect() may only be called once.
       */
      connect(options) {
        return __awaiter2(this, void 0, void 0, function* () {
          let cleanupCancelListener = void 0;
          let connectPromise = new Promise((resolve, reject) => {
            if (!options) {
              reject(new error_1.CrtError("Invalid options passed to event stream ClientConnection.connect"));
              return;
            }
            if (this.state != ClientConnectionState.None) {
              reject(new error_1.CrtError(`Event stream connection in a state (${this.state}) where connect() is not allowed.`));
              return;
            }
            this.state = ClientConnectionState.Connecting;
            if (options.cancelController) {
              let cancel = () => {
                reject(new error_1.CrtError(`Event stream connection connect() cancelled by external request.`));
                setImmediate(() => {
                  this.close();
                });
              };
              cleanupCancelListener = options.cancelController.addListener(cancel);
              if (!cleanupCancelListener) {
                return;
              }
            }
            function curriedPromiseCallback(connection, errorCode) {
              return _ClientConnection._s_on_connection_setup(resolve, reject, connection, errorCode);
            }
            try {
              binding_1.default.event_stream_client_connection_connect(this.native_handle(), curriedPromiseCallback);
            } catch (e) {
              this.state = ClientConnectionState.Disconnected;
              reject(e);
            }
          });
          return promise.makeSelfCleaningPromise(connectPromise, cleanupCancelListener);
        });
      }
      /**
       * Attempts to send an event stream protocol message over an open connection.
       *
       * @param options configuration -- including the message itself -- for sending a protocol message
       *
       * Returns a promise that will be fulfilled when the message is successfully flushed to the wire, and rejected if
       * an error occurs prior to that point.
       */
      sendProtocolMessage(options) {
        return __awaiter2(this, void 0, void 0, function* () {
          let cleanupCancelListener = void 0;
          let sendProtocolMessagePromise = new Promise((resolve, reject) => {
            try {
              let curriedPromiseCallback = function(errorCode) {
                return _ClientConnection._s_on_connection_send_protocol_message_completion(resolve, reject, errorCode);
              };
              if (!options) {
                reject(new error_1.CrtError("Invalid options passed to event stream ClientConnection.sendProtocolMessage"));
                return;
              }
              if (!this.isConnected()) {
                reject(new error_1.CrtError(`Event stream connection in a state (${this.state}) where sending protocol messages is not allowed.`));
                return;
              }
              if (options.cancelController) {
                let cancel = () => {
                  reject(new error_1.CrtError(`Event stream connection sendProtocolMessage() cancelled by external request.`));
                  setImmediate(() => {
                    this.close();
                  });
                };
                cleanupCancelListener = options.cancelController.addListener(cancel);
                if (!cleanupCancelListener) {
                  return;
                }
              }
              binding_1.default.event_stream_client_connection_send_protocol_message(this.native_handle(), options, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
          return promise.makeSelfCleaningPromise(sendProtocolMessagePromise, cleanupCancelListener);
        });
      }
      /**
       * Returns true if the connection is currently open and ready-to-use, false otherwise.
       *
       * Internal note: Our notion of "connected" is intentionally not an invocation of
       * aws_event_stream_rpc_client_connection_is_open() (whose status is an out-of-sync race condition vs. our
       * well-defined client state)
       */
      isConnected() {
        return this.state == ClientConnectionState.Connected;
      }
      /**
       * Creates a new stream within the connection.
       */
      newStream() {
        if (!this.isConnected()) {
          throw new error_1.CrtError(`Event stream connection in a state (${this.state}) where creating new streams is forbidden.`);
        }
        return new ClientStream(this);
      }
      on(event, listener) {
        super.on(event, listener);
        return this;
      }
      static _s_on_connection_setup(resolve, reject, connection, errorCode) {
        if (errorCode == 0 && connection.state == ClientConnectionState.Connecting) {
          connection.state = ClientConnectionState.Connected;
          resolve();
        } else {
          if (connection.state != ClientConnectionState.Closed) {
            connection.state = ClientConnectionState.Disconnected;
          }
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_disconnect(connection, errorCode) {
        if (connection.state != ClientConnectionState.Closed) {
          connection.state = ClientConnectionState.Disconnected;
        }
        process.nextTick(() => {
          connection.emit("disconnection", { errorCode });
        });
      }
      static _s_on_protocol_message(connection, message) {
        process.nextTick(() => {
          connection.emit("protocolMessage", { message: mapPodMessageToJSMessage(message) });
        });
      }
      static _s_on_connection_send_protocol_message_completion(resolve, reject, errorCode) {
        if (errorCode == 0) {
          resolve();
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
    };
    exports.ClientConnection = ClientConnection;
    ClientConnection.DISCONNECTION = "disconnection";
    ClientConnection.PROTOCOL_MESSAGE = "protocolMessage";
    var ClientStreamState;
    (function(ClientStreamState2) {
      ClientStreamState2[ClientStreamState2["None"] = 0] = "None";
      ClientStreamState2[ClientStreamState2["Activating"] = 1] = "Activating";
      ClientStreamState2[ClientStreamState2["Activated"] = 2] = "Activated";
      ClientStreamState2[ClientStreamState2["Ended"] = 3] = "Ended";
      ClientStreamState2[ClientStreamState2["Closed"] = 4] = "Closed";
    })(ClientStreamState || (ClientStreamState = {}));
    var ClientStream = class _ClientStream extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(connection) {
        super();
        this._super(binding_1.default.event_stream_client_stream_new(this, connection.native_handle(), (stream) => {
          _ClientStream._s_on_stream_ended(stream);
        }, (stream, message) => {
          _ClientStream._s_on_stream_message(stream, message);
        }));
        this.state = ClientStreamState.None;
      }
      /**
       * Shuts down the stream (if active) and begins the process to release native resources associated with it by
       * having the native binding release the only reference to the extern object representing the stream.  Once
       * close() has been called, no more events will be emitted and all public API invocations will trigger an exception.
       *
       * Ultimately, the native resources will not be released until the native stream has fully shut down and that
       * shutdown event has reached the libuv event loop.
       *
       * This function **must** be called for every ClientStream instance or native resources will leak.
       */
      close() {
        if (this.state != ClientStreamState.Closed) {
          this.state = ClientStreamState.Closed;
          binding_1.default.event_stream_client_stream_close(this.native_handle());
        }
      }
      /**
       * Activates the stream, allowing it to start sending and receiving messages.  The promise completes when
       * the activation message has been written to the wire.
       *
       * activate() may only be called once.
       *
       * @param options -- configuration data for stream activation, including operation name and initial message
       */
      activate(options) {
        return __awaiter2(this, void 0, void 0, function* () {
          let cleanupCancelListener = void 0;
          let activatePromise = new Promise((resolve, reject) => {
            try {
              let curriedPromiseCallback = function(stream, errorCode) {
                return _ClientStream._s_on_stream_activated(resolve, reject, stream, errorCode);
              };
              if (this.state != ClientStreamState.None) {
                reject(new error_1.CrtError(`Event stream in a state (${this.state}) where activation is not allowed.`));
                return;
              }
              if (options === void 0) {
                this.state = ClientStreamState.Ended;
                reject(new error_1.CrtError("Invalid options passed to ClientStream.activate"));
                return;
              }
              this.state = ClientStreamState.Activating;
              if (options.cancelController) {
                let cancel = () => {
                  reject(new error_1.CrtError(`Event stream activate() cancelled by external request.`));
                  setImmediate(() => {
                    this.close();
                  });
                };
                cleanupCancelListener = options.cancelController.addListener(cancel);
                if (!cleanupCancelListener) {
                  return;
                }
              }
              binding_1.default.event_stream_client_stream_activate(this.native_handle(), options, curriedPromiseCallback);
            } catch (e) {
              this.state = ClientStreamState.Ended;
              reject(e);
            }
          });
          return promise.makeSelfCleaningPromise(activatePromise, cleanupCancelListener);
        });
      }
      /**
       * Attempts to send an event stream message.
       *
       * @param options configuration -- including the message itself -- for sending a message
       *
       * Returns a promise that will be fulfilled when the message is successfully flushed to the wire, and rejected if
       * an error occurs prior to that point.
       */
      sendMessage(options) {
        return __awaiter2(this, void 0, void 0, function* () {
          let cleanupCancelListener = void 0;
          let sendMessagePromise = new Promise((resolve, reject) => {
            try {
              let curriedPromiseCallback = function(errorCode) {
                return _ClientStream._s_on_stream_send_message_completion(resolve, reject, errorCode);
              };
              if (!options) {
                reject(new error_1.CrtError("Invalid options passed to ClientStream.sendMessage"));
                return;
              }
              if (this.state != ClientStreamState.Activated) {
                reject(new error_1.CrtError(`Event stream in a state (${this.state}) where sending messages is not allowed.`));
                return;
              }
              if (options.cancelController) {
                let cancel = () => {
                  reject(new error_1.CrtError(`Event stream sendMessage() cancelled by external request.`));
                  setImmediate(() => {
                    this.close();
                  });
                };
                cleanupCancelListener = options.cancelController.addListener(cancel);
                if (!cleanupCancelListener) {
                  return;
                }
              }
              binding_1.default.event_stream_client_stream_send_message(this.native_handle(), options, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
          return promise.makeSelfCleaningPromise(sendMessagePromise, cleanupCancelListener);
        });
      }
      /**
       * Returns true if the stream is currently active and ready-to-use, false otherwise.
       */
      isActive() {
        return this.state == ClientStreamState.Activated;
      }
      on(event, listener) {
        super.on(event, listener);
        return this;
      }
      static _s_on_stream_activated(resolve, reject, stream, errorCode) {
        if (errorCode == 0 && stream.state == ClientStreamState.Activating) {
          stream.state = ClientStreamState.Activated;
          resolve();
        } else {
          if (stream.state != ClientStreamState.Closed) {
            stream.state = ClientStreamState.Ended;
          }
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_stream_send_message_completion(resolve, reject, errorCode) {
        if (errorCode == 0) {
          resolve();
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_stream_ended(stream) {
        process.nextTick(() => {
          stream.emit(_ClientStream.ENDED, {});
        });
      }
      static _s_on_stream_message(stream, message) {
        process.nextTick(() => {
          stream.emit(_ClientStream.MESSAGE, { message: mapPodMessageToJSMessage(message) });
        });
      }
    };
    exports.ClientStream = ClientStream;
    ClientStream.ENDED = "ended";
    ClientStream.MESSAGE = "message";
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/http.js
var require_http = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CommonHttpProxyOptions = exports.HttpProxyAuthenticationType = exports.HttpVersion = void 0;
    var HttpVersion;
    (function(HttpVersion2) {
      HttpVersion2[HttpVersion2["Unknown"] = 0] = "Unknown";
      HttpVersion2[HttpVersion2["Http1_0"] = 1] = "Http1_0";
      HttpVersion2[HttpVersion2["Http1_1"] = 2] = "Http1_1";
      HttpVersion2[HttpVersion2["Http2"] = 3] = "Http2";
    })(HttpVersion = exports.HttpVersion || (exports.HttpVersion = {}));
    var HttpProxyAuthenticationType;
    (function(HttpProxyAuthenticationType2) {
      HttpProxyAuthenticationType2[HttpProxyAuthenticationType2["None"] = 0] = "None";
      HttpProxyAuthenticationType2[HttpProxyAuthenticationType2["Basic"] = 1] = "Basic";
    })(HttpProxyAuthenticationType = exports.HttpProxyAuthenticationType || (exports.HttpProxyAuthenticationType = {}));
    var CommonHttpProxyOptions = class {
      /**
       *
       * @param host_name endpoint of the proxy to use
       * @param port port of proxy to use
       * @param auth_method type of authentication to use with the proxy
       * @param auth_username (basic authentication only) proxy username
       * @param auth_password (basic authentication only) password associated with the username
       */
      constructor(host_name, port, auth_method = HttpProxyAuthenticationType.None, auth_username, auth_password) {
        this.host_name = host_name;
        this.port = port;
        this.auth_method = auth_method;
        this.auth_username = auth_username;
        this.auth_password = auth_password;
      }
    };
    exports.CommonHttpProxyOptions = CommonHttpProxyOptions;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/http.js
var require_http2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/http.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClientConnectionManager = exports.HttpClientStream = exports.HttpStream = exports.HttpClientConnection = exports.HttpProxyOptions = exports.HttpProxyConnectionType = exports.HttpConnection = exports.HttpRequest = exports.HttpHeaders = exports.HttpProxyAuthenticationType = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var error_1 = require_error();
    var http_1 = require_http();
    var http_2 = require_http();
    Object.defineProperty(exports, "HttpProxyAuthenticationType", { enumerable: true, get: function() {
      return http_2.HttpProxyAuthenticationType;
    } });
    var event_1 = require_event();
    exports.HttpHeaders = binding_1.default.HttpHeaders;
    var nativeHttpRequest = binding_1.default.HttpRequest;
    var HttpRequest = class extends nativeHttpRequest {
      constructor(method, path, headers, body) {
        super(method, path, headers, body === null || body === void 0 ? void 0 : body.native_handle());
      }
    };
    exports.HttpRequest = HttpRequest;
    var HttpConnection = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(native_handle) {
        super();
        this._super(native_handle);
      }
      /**
       * Close the connection.
       * Shutdown is asynchronous. This call has no effect if the connection is already
       * closing.
       */
      close() {
        binding_1.default.http_connection_close(this.native_handle());
      }
      // Overridden to allow uncorking on ready
      on(event, listener) {
        super.on(event, listener);
        if (event == "connect") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
    };
    exports.HttpConnection = HttpConnection;
    HttpConnection.CONNECT = "connect";
    HttpConnection.ERROR = "error";
    HttpConnection.CLOSE = "close";
    var HttpProxyConnectionType;
    (function(HttpProxyConnectionType2) {
      HttpProxyConnectionType2[HttpProxyConnectionType2["Legacy"] = 0] = "Legacy";
      HttpProxyConnectionType2[HttpProxyConnectionType2["Forwarding"] = 1] = "Forwarding";
      HttpProxyConnectionType2[HttpProxyConnectionType2["Tunneling"] = 2] = "Tunneling";
    })(HttpProxyConnectionType = exports.HttpProxyConnectionType || (exports.HttpProxyConnectionType = {}));
    var HttpProxyOptions = class extends http_1.CommonHttpProxyOptions {
      /**
       *
       * @param host_name Name of the proxy server to connect through
       * @param port Port number of the proxy server to connect through
       * @param auth_method Type of proxy authentication to use. Default is {@link HttpProxyAuthenticationType.None}
       * @param auth_username Username to use when `auth_type` is {@link HttpProxyAuthenticationType.Basic}
       * @param auth_password Password to use when `auth_type` is {@link HttpProxyAuthenticationType.Basic}
       * @param tls_opts Optional TLS connection options for the connection to the proxy host.
       *                 Must be distinct from the {@link TlsConnectionOptions} provided to
       *                 the HTTP connection
       * @param connection_type Optional Type of connection to make.  If not specified,
       *                 {@link HttpProxyConnectionType.Legacy} will be used.
       */
      constructor(host_name, port, auth_method = http_1.HttpProxyAuthenticationType.None, auth_username, auth_password, tls_opts, connection_type) {
        super(host_name, port, auth_method, auth_username, auth_password);
        this.tls_opts = tls_opts;
        this.connection_type = connection_type;
      }
      /** @internal */
      create_native_handle() {
        return binding_1.default.http_proxy_options_new(this.host_name, this.port, this.auth_method, this.auth_username, this.auth_password, this.tls_opts ? this.tls_opts.native_handle() : void 0, this.connection_type ? this.connection_type : HttpProxyConnectionType.Legacy);
      }
    };
    exports.HttpProxyOptions = HttpProxyOptions;
    var HttpClientConnection = class extends HttpConnection {
      /** Asynchronously establish a new HttpClientConnection.
       * @param bootstrap Client bootstrap to use when initiating socket connection.  Leave undefined to use the
       *          default system-wide bootstrap (recommended).
       * @param host_name Host to connect to
       * @param port Port to connect to on host
       * @param socket_options Socket options
       * @param tls_opts Optional TLS connection options
       * @param proxy_options Optional proxy options
      */
      constructor(bootstrap, host_name, port, socket_options, tls_opts, proxy_options, handle) {
        if (socket_options == null || socket_options == void 0) {
          throw new error_1.CrtError("HttpClientConnection constructor: socket_options not defined");
        }
        super(handle ? handle : binding_1.default.http_connection_new(bootstrap != null ? bootstrap.native_handle() : null, (handle2, error_code) => {
          this._on_setup(handle2, error_code);
        }, (handle2, error_code) => {
          this._on_shutdown(handle2, error_code);
        }, host_name, port, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : void 0, proxy_options ? proxy_options.create_native_handle() : void 0));
        this.bootstrap = bootstrap;
        this.socket_options = socket_options;
        this.tls_opts = tls_opts;
      }
      _on_setup(native_handle, error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          return;
        }
        this.emit("connect");
      }
      _on_shutdown(native_handle, error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          return;
        }
        this.emit("close");
      }
      /**
       * Create {@link HttpClientStream} to carry out the request/response exchange.
       *
       * NOTE: The stream sends no data until :meth:`HttpClientStream.activate()`
       * is called. Call {@link HttpStream.activate} when you're ready for
       * callbacks and events to fire.
       * @param request - The HttpRequest to attempt on this connection
       * @returns A new stream that will deliver events for the request
       */
      request(request) {
        let stream;
        const on_response_impl = (status_code, headers) => {
          stream._on_response(status_code, headers);
        };
        const on_body_impl = (data) => {
          stream._on_body(data);
        };
        const on_complete_impl = (error_code) => {
          stream._on_complete(error_code);
        };
        const native_handle = binding_1.default.http_stream_new(this.native_handle(), request, on_complete_impl, on_response_impl, on_body_impl);
        return stream = new HttpClientStream(native_handle, this, request);
      }
    };
    exports.HttpClientConnection = HttpClientConnection;
    var HttpStream = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      constructor(native_handle, connection) {
        super();
        this.connection = connection;
        this._super(native_handle);
        this.cork();
      }
      /**
       * Begin sending the request.
       *
       * The stream does nothing until this is called. Call activate() when you
       * are ready for its callbacks and events to fire.
       */
      activate() {
        binding_1.default.http_stream_activate(this.native_handle());
      }
      /**
       * Closes and ends all communication on this stream. Called automatically after the 'end'
       * event is delivered. Calling this manually is only necessary if you wish to terminate
       * communication mid-request/response.
       */
      close() {
        binding_1.default.http_stream_close(this.native_handle());
      }
      /** @internal */
      _on_body(data) {
        this.emit("data", data);
      }
      /** @internal */
      _on_complete(error_code) {
        if (error_code) {
          this.emit("error", new error_1.CrtError(error_code));
          this.close();
          return;
        }
        this.on("end", () => {
          this.close();
        });
        this.emit("end");
      }
    };
    exports.HttpStream = HttpStream;
    var HttpClientStream = class extends HttpStream {
      constructor(native_handle, connection, request) {
        super(native_handle, connection);
        this.request = request;
      }
      /**
       * HTTP status code returned from the server.
       * @return Either the status code, or undefined if the server response has not arrived yet.
       */
      status_code() {
        return this.response_status_code;
      }
      // Overridden to allow uncorking on ready and response
      on(event, listener) {
        super.on(event, listener);
        if (event == "response") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
      /** @internal */
      _on_response(status_code, header_array) {
        this.response_status_code = status_code;
        let headers = new exports.HttpHeaders(header_array);
        this.emit("response", status_code, headers);
      }
    };
    exports.HttpClientStream = HttpClientStream;
    HttpClientStream.RESPONSE = "response";
    HttpClientStream.DATA = "data";
    HttpClientStream.ERROR = "error";
    HttpClientStream.END = "end";
    HttpClientStream.HEADERS = "headers";
    var HttpClientConnectionManager = class extends native_resource_1.NativeResource {
      /**
       * @param bootstrap Client bootstrap to use when initiating socket connections.  Leave undefined to use the
       *          default system-wide bootstrap (recommended).
       * @param host Host to connect to
       * @param port Port to connect to on host
       * @param max_connections Maximum number of connections to pool
       * @param initial_window_size Optional initial window size
       * @param socket_options Socket options to use when initiating socket connections
       * @param tls_opts Optional TLS connection options
       * @param proxy_options Optional proxy options
       */
      constructor(bootstrap, host, port, max_connections, initial_window_size, socket_options, tls_opts, proxy_options) {
        if (socket_options == null || socket_options == void 0) {
          throw new error_1.CrtError("HttpClientConnectionManager constructor: socket_options not defined");
        }
        super(binding_1.default.http_connection_manager_new(
          bootstrap != null ? bootstrap.native_handle() : null,
          host,
          port,
          max_connections,
          initial_window_size,
          socket_options.native_handle(),
          tls_opts ? tls_opts.native_handle() : void 0,
          proxy_options ? proxy_options.create_native_handle() : void 0,
          void 0
          /* on_shutdown */
        ));
        this.bootstrap = bootstrap;
        this.host = host;
        this.port = port;
        this.max_connections = max_connections;
        this.initial_window_size = initial_window_size;
        this.socket_options = socket_options;
        this.tls_opts = tls_opts;
        this.proxy_options = proxy_options;
        this.connections = /* @__PURE__ */ new Map();
      }
      /**
      * Vends a connection from the pool
      * @returns A promise that results in an HttpClientConnection. When done with the connection, return
      *          it via {@link release}
      */
      acquire() {
        return new Promise((resolve, reject) => {
          const on_acquired = (handle, error_code) => {
            if (error_code) {
              reject(new error_1.CrtError(error_code));
              return;
            }
            let connection = this.connections.get(handle);
            if (!connection) {
              connection = new HttpClientConnection(this.bootstrap, this.host, this.port, this.socket_options, this.tls_opts, this.proxy_options, handle);
              this.connections.set(handle, connection);
              connection.on("close", () => {
                this.connections.delete(handle);
              });
            }
            resolve(connection);
          };
          binding_1.default.http_connection_manager_acquire(this.native_handle(), on_acquired);
        });
      }
      /**
       * Returns an unused connection to the pool
       * @param connection - The connection to return
      */
      release(connection) {
        if (connection == null || connection == void 0) {
          throw new error_1.CrtError("HttpClientConnectionManager release: connection not defined");
        }
        binding_1.default.http_connection_manager_release(this.native_handle(), connection.native_handle());
      }
      /** Closes all connections and rejects all pending requests */
      close() {
        binding_1.default.http_connection_manager_close(this.native_handle());
      }
    };
    exports.HttpClientConnectionManager = HttpClientConnectionManager;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt.js
var require_mqtt = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RECONNECT_MIN_SEC = exports.DEFAULT_RECONNECT_MAX_SEC = exports.MqttWill = exports.QoS = void 0;
    var QoS;
    (function(QoS2) {
      QoS2[QoS2["AtMostOnce"] = 0] = "AtMostOnce";
      QoS2[QoS2["AtLeastOnce"] = 1] = "AtLeastOnce";
      QoS2[QoS2["ExactlyOnce"] = 2] = "ExactlyOnce";
    })(QoS = exports.QoS || (exports.QoS = {}));
    var MqttWill = class {
      constructor(topic, qos, payload, retain = false) {
        this.topic = topic;
        this.qos = qos;
        this.payload = payload;
        this.retain = retain;
      }
    };
    exports.MqttWill = MqttWill;
    exports.DEFAULT_RECONNECT_MAX_SEC = 128;
    exports.DEFAULT_RECONNECT_MIN_SEC = 1;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/aws_iot_shared.js
var require_aws_iot_shared = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/aws_iot_shared.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractRegionFromEndpoint = exports.buildMqtt5FinalUsername = exports.populate_username_string_with_custom_authorizer = exports.is_string_and_not_empty = exports.add_to_username_parameter = void 0;
    var platform = __importStar2(require_platform());
    function add_to_username_parameter(current_username, parameter_value, parameter_pre_text) {
      let return_string = current_username;
      if (return_string.indexOf("?") != -1) {
        return_string += "&";
      } else {
        return_string += "?";
      }
      if (parameter_value.indexOf(parameter_pre_text) != -1) {
        return return_string + parameter_value;
      } else {
        return return_string + parameter_pre_text + parameter_value;
      }
    }
    exports.add_to_username_parameter = add_to_username_parameter;
    function is_string_and_not_empty(item) {
      return item != void 0 && typeof item == "string" && item != "";
    }
    exports.is_string_and_not_empty = is_string_and_not_empty;
    function populate_username_string_with_custom_authorizer(current_username, input_username, input_authorizer, input_signature, input_builder_username, input_token_key_name, input_token_value) {
      let username_string = "";
      if (current_username) {
        username_string += current_username;
      }
      if (is_string_and_not_empty(input_username) == false) {
        if (is_string_and_not_empty(input_builder_username) && input_builder_username) {
          username_string += input_builder_username;
        }
      } else {
        username_string += input_username;
      }
      if (is_string_and_not_empty(input_authorizer) && input_authorizer) {
        username_string = add_to_username_parameter(username_string, input_authorizer, "x-amz-customauthorizer-name=");
      }
      if (is_string_and_not_empty(input_signature) && input_signature) {
        username_string = add_to_username_parameter(username_string, input_signature, "x-amz-customauthorizer-signature=");
        if (is_string_and_not_empty(input_token_key_name) && input_token_key_name || is_string_and_not_empty(input_token_value) && input_token_value) {
          console.log("Warning: Signed custom authorizers with signature will not work without a token key name and token value. Your connection may be rejected/stalled on the IoT Core side due to this. Please set the token key name and token value to connect to a signed custom authorizer.");
        }
      }
      if (is_string_and_not_empty(input_signature) || is_string_and_not_empty(input_token_value) || is_string_and_not_empty(input_token_key_name)) {
        if (!input_token_value || !input_token_key_name) {
          throw new Error("Token-based custom authentication requires all token-related properties to be set");
        }
        username_string = add_to_username_parameter(username_string, input_token_value, input_token_key_name + "=");
      }
      return username_string;
    }
    exports.populate_username_string_with_custom_authorizer = populate_username_string_with_custom_authorizer;
    function addParam(paramName, paramValue, paramSet) {
      if (paramValue) {
        paramSet.push([paramName, paramValue]);
      }
    }
    function buildMqtt5FinalUsername(customAuthConfig) {
      let path = "";
      let paramList = [];
      if (customAuthConfig) {
        let usingSigning = false;
        if (customAuthConfig.tokenValue || customAuthConfig.tokenKeyName || customAuthConfig.tokenSignature) {
          usingSigning = true;
          if (!customAuthConfig.tokenValue || !customAuthConfig.tokenKeyName || !customAuthConfig.tokenSignature) {
            throw new Error("Token-based custom authentication requires all token-related properties to be set");
          }
        }
        let username = customAuthConfig.username;
        let pathSplit = (username !== null && username !== void 0 ? username : "").split("?");
        let params = pathSplit.slice(1);
        path = pathSplit[0];
        if (params.length > 1) {
          throw new Error("Custom auth username property value is invalid");
        } else if (params.length == 1) {
          params[0].split("&").forEach((keyValue, index, array) => {
            var _a;
            let kvPair = keyValue.split("=");
            paramList.push([kvPair[0], (_a = kvPair[1]) !== null && _a !== void 0 ? _a : ""]);
          });
        }
        addParam("x-amz-customauthorizer-name", customAuthConfig.authorizerName, paramList);
        if (usingSigning) {
          addParam(customAuthConfig.tokenKeyName, customAuthConfig.tokenValue, paramList);
          addParam("x-amz-customauthorizer-signature", customAuthConfig.tokenSignature, paramList);
        }
      }
      paramList.push(["SDK", "NodeJSv2"]);
      paramList.push(["Version", platform.crt_version()]);
      return (path !== null && path !== void 0 ? path : "") + "?" + paramList.map((value) => `${value[0]}=${value[1]}`).join("&");
    }
    exports.buildMqtt5FinalUsername = buildMqtt5FinalUsername;
    function extractRegionFromEndpoint(endpoint) {
      const regexpRegion = /^[\w\-]+\.[\w\-]+\.([\w+\-]+)\./;
      const match = endpoint.match(regexpRegion);
      if (match) {
        return match[1];
      }
      throw new Error("AWS region could not be extracted from endpoint.  Use 'region' property on WebsocketConfig to set manually.");
    }
    exports.extractRegionFromEndpoint = extractRegionFromEndpoint;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/aws_iot.js
var require_aws_iot = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/aws_iot.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsIotMqttConnectionConfigBuilder = void 0;
    var mqtt_1 = require_mqtt();
    var io = __importStar2(require_io2());
    var io_1 = require_io2();
    var platform = __importStar2(require_platform());
    var error_1 = require_error();
    var auth_1 = require_auth();
    var iot_shared = __importStar2(require_aws_iot_shared());
    var AwsIotMqttConnectionConfigBuilder = class _AwsIotMqttConnectionConfigBuilder {
      constructor(tls_ctx_options) {
        this.tls_ctx_options = tls_ctx_options;
        this.params = {
          client_id: "",
          host_name: "",
          socket_options: new io.SocketOptions(),
          port: 8883,
          use_websocket: false,
          clean_session: false,
          keep_alive: void 0,
          will: void 0,
          username: "",
          password: void 0,
          tls_ctx: void 0,
          reconnect_min_sec: mqtt_1.DEFAULT_RECONNECT_MIN_SEC,
          reconnect_max_sec: mqtt_1.DEFAULT_RECONNECT_MAX_SEC
        };
        this.is_using_custom_authorizer = false;
      }
      /**
       * Create a new builder with mTLS file paths
       * @param cert_path - Path to certificate, in PEM format
       * @param key_path - Path to private key, in PEM format
       */
      static new_mtls_builder_from_path(cert_path, key_path) {
        let builder = new _AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_from_path(cert_path, key_path));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new builder with mTLS cert pair in memory
       * @param cert - Certificate, in PEM format
       * @param private_key - Private key, in PEM format
       */
      static new_mtls_builder(cert, private_key) {
        let builder = new _AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls(cert, private_key));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new builder with mTLS using a PKCS#11 library for private key operations.
       *
       * NOTE: This configuration only works on Unix devices.
       * @param pkcs11_options - PKCS#11 options.
       */
      static new_mtls_pkcs11_builder(pkcs11_options) {
        let builder = new _AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11_options));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new builder with mTLS using a PKCS#12 file for private key operations.
       *
       * Note: This configuration only works on MacOS devices.
       *
       * @param pkcs12_options - The PKCS#12 options to use in the builder.
       */
      static new_mtls_pkcs12_builder(pkcs12_options) {
        let builder = new _AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_pkcs12_from_path(pkcs12_options.pkcs12_file, pkcs12_options.pkcs12_password));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new builder with mTLS using a certificate in a Windows certificate store.
       *
       * NOTE: This configuration only works on Windows devices.
       * @param certificate_path - Path to certificate in a Windows certificate store.
       *      The path must use backslashes and end with the certificate's thumbprint.
       *      Example: `CurrentUser\MY\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6`
       */
      static new_mtls_windows_cert_store_path_builder(certificate_path) {
        let builder = new _AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificate_path));
        builder.params.port = 8883;
        if (io.is_alpn_available()) {
          builder.tls_ctx_options.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Creates a new builder with default Tls options. This requires setting the connection details manually.
       */
      static new_default_builder() {
        let ctx_options = new io.TlsContextOptions();
        let builder = new _AwsIotMqttConnectionConfigBuilder(ctx_options);
        return builder;
      }
      static new_websocket_builder(...args) {
        return this.new_with_websockets(...args);
      }
      static configure_websocket_handshake(builder, options) {
        if (options) {
          if (builder == null || builder == void 0) {
            throw new error_1.CrtError("AwsIotMqttConnectionConfigBuilder configure_websocket_handshake: builder not defined");
          }
          builder.params.websocket_handshake_transform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const signing_config = (_b = (_a = options.create_signing_config) === null || _a === void 0 ? void 0 : _a.call(options)) !== null && _b !== void 0 ? _b : {
              algorithm: auth_1.AwsSigningAlgorithm.SigV4,
              signature_type: auth_1.AwsSignatureType.HttpRequestViaQueryParams,
              provider: options.credentials_provider,
              region: options.region,
              service: (_c = options.service) !== null && _c !== void 0 ? _c : "iotdevicegateway",
              signed_body_value: auth_1.AwsSignedBodyValue.EmptySha256,
              omit_session_token: true
            };
            try {
              yield (0, auth_1.aws_sign_request)(request, signing_config);
              done();
            } catch (error) {
              if (error instanceof error_1.CrtError) {
                done(error.error_code);
              } else {
                done(3);
              }
            }
          });
        }
        return builder;
      }
      /**
       * Configures the connection to use MQTT over websockets. Forces the port to 443.
       */
      static new_with_websockets(options) {
        let tls_ctx_options = options === null || options === void 0 ? void 0 : options.tls_ctx_options;
        if (!tls_ctx_options) {
          tls_ctx_options = new io_1.TlsContextOptions();
          tls_ctx_options.alpn_list = [];
        }
        let builder = new _AwsIotMqttConnectionConfigBuilder(tls_ctx_options);
        builder.params.use_websocket = true;
        builder.params.proxy_options = options === null || options === void 0 ? void 0 : options.proxy_options;
        if (builder.tls_ctx_options) {
          builder.params.port = 443;
        }
        this.configure_websocket_handshake(builder, options);
        return builder;
      }
      /**
       * For API compatibility with the browser version. Alias for {@link new_with_websockets}.
       *
       * @returns a new websocket connection builder object with default TLS configuration
       */
      static new_builder_for_websocket() {
        return this.new_with_websockets();
      }
      /**
       * Overrides the default system trust store.
       * @param ca_dirpath - Only used on Unix-style systems where all trust anchors are
       * stored in a directory (e.g. /etc/ssl/certs).
       * @param ca_filepath - Single file containing all trust CAs, in PEM format
       */
      with_certificate_authority_from_path(ca_dirpath, ca_filepath) {
        this.tls_ctx_options.override_default_trust_store_from_path(ca_dirpath, ca_filepath);
        return this;
      }
      /**
       * Overrides the default system trust store.
       * @param ca - Buffer containing all trust CAs, in PEM format
       */
      with_certificate_authority(ca) {
        this.tls_ctx_options.override_default_trust_store(ca);
        return this;
      }
      /**
       * Configures the IoT endpoint for this connection
       * @param endpoint The IoT endpoint to connect to
       */
      with_endpoint(endpoint) {
        this.params.host_name = endpoint;
        return this;
      }
      /**
       * The port to connect to on the IoT endpoint
       * @param port The port to connect to on the IoT endpoint. Usually 8883 for MQTT, or 443 for websockets
       */
      with_port(port) {
        this.params.port = port;
        return this;
      }
      /**
       * Configures the client_id to use to connect to the IoT Core service
       * @param client_id The client id for this connection. Needs to be unique across all devices/clients.
       */
      with_client_id(client_id) {
        this.params.client_id = client_id;
        return this;
      }
      /**
       * Determines whether or not the service should try to resume prior subscriptions, if it has any
       * @param clean_session true if the session should drop prior subscriptions when this client connects, false to resume the session
       */
      with_clean_session(clean_session) {
        this.params.clean_session = clean_session;
        return this;
      }
      /**
       * Configures MQTT keep-alive via PING messages. Note that this is not TCP keepalive.
       * @param keep_alive How often in seconds to send an MQTT PING message to the service to keep the connection alive
       */
      with_keep_alive_seconds(keep_alive) {
        this.params.keep_alive = keep_alive;
        return this;
      }
      /**
       * Configures the TCP socket timeout (in milliseconds)
       * @param timeout_ms TCP socket timeout
       * @deprecated
       */
      with_timeout_ms(timeout_ms) {
        this.with_ping_timeout_ms(timeout_ms);
        return this;
      }
      /**
       * Configures the PINGREQ response timeout (in milliseconds)
       * @param ping_timeout PINGREQ response timeout
       */
      with_ping_timeout_ms(ping_timeout) {
        this.params.ping_timeout = ping_timeout;
        return this;
      }
      /**
       * Configures the protocol operation timeout (in milliseconds)
       * @param protocol_operation_timeout protocol operation timeout
       */
      with_protocol_operation_timeout_ms(protocol_operation_timeout) {
        this.params.protocol_operation_timeout = protocol_operation_timeout;
        return this;
      }
      /**
       * Configures the will message to be sent when this client disconnects
       * @param will The will topic, qos, and message
       */
      with_will(will) {
        this.params.will = will;
        return this;
      }
      /**
       * Configures the common settings for the socket to use when opening a connection to the server
       * @param socket_options The socket settings
       */
      with_socket_options(socket_options) {
        this.params.socket_options = socket_options;
        return this;
      }
      /**
       * Configures AWS credentials (usually from Cognito) for this connection
       * @param aws_region The service region to connect to
       * @param aws_access_id IAM Access ID
       * @param aws_secret_key IAM Secret Key
       * @param aws_sts_token STS token from Cognito (optional)
       */
      with_credentials(aws_region, aws_access_id, aws_secret_key, aws_sts_token) {
        return _AwsIotMqttConnectionConfigBuilder.configure_websocket_handshake(this, {
          credentials_provider: auth_1.AwsCredentialsProvider.newStatic(aws_access_id, aws_secret_key, aws_sts_token),
          region: aws_region,
          service: "iotdevicegateway"
        });
      }
      /**
       * Configure the http proxy options to use to establish the connection
       * @param proxy_options proxy options to use to establish the mqtt connection
       */
      with_http_proxy_options(proxy_options) {
        this.params.proxy_options = proxy_options;
        return this;
      }
      /**
       * Sets the custom authorizer settings. This function will modify the username, port, and TLS options.
       *
       * @param username The username to use with the custom authorizer. If an empty string is passed, it will
       *                 check to see if a username has already been set (via WithUsername function). If no
       *                 username is set then no username will be passed with the MQTT connection.
       * @param authorizer_name The name of the custom authorizer. If an empty string is passed, then
       *                       'x-amz-customauthorizer-name' will not be added with the MQTT connection.
       * @param authorizer_signature The signature of the custom authorizer. If an empty string is passed, then
       *                            'x-amz-customauthorizer-signature' will not be added with the MQTT connection.
       *                            The signature must be based on the private key associated with the custom authorizer.
       *                            The signature must be base64 encoded.
       *                            Required if the custom authorizer has signing enabled.  It is strongly suggested to URL-encode
       *                            this value; the SDK will not do so for you.
       * @param password The password to use with the custom authorizer. If null is passed, then no password will
       *                 be set.
       * @param token_key_name Key used to extract the custom authorizer token from MQTT username query-string properties.
       *                       Required if the custom authorizer has signing enabled.  It is strongly suggested to URL-encode
       *                       this value; the SDK will not do so for you.
       * @param token_value An opaque token value.
       *                    Required if the custom authorizer has signing enabled. This value must be signed by the private
       *                    key associated with the custom authorizer and the result placed in the token_signature argument.
       */
      with_custom_authorizer(username, authorizer_name, authorizer_signature, password, token_key_name, token_value) {
        this.is_using_custom_authorizer = true;
        let username_string = iot_shared.populate_username_string_with_custom_authorizer("", username, authorizer_name, authorizer_signature, this.params.username, token_key_name, token_value);
        this.params.username = username_string;
        this.params.password = password;
        if (!this.params.use_websocket) {
          this.tls_ctx_options.alpn_list = ["mqtt"];
        }
        this.params.port = 443;
        return this;
      }
      /**
       * Sets username for the connection
       *
       * @param username the username that will be passed with the MQTT connection
       */
      with_username(username) {
        this.params.username = username;
        return this;
      }
      /**
       * Sets password for the connection
       *
       * @param password the password that will be passed with the MQTT connection
       */
      with_password(password) {
        this.params.password = password;
        return this;
      }
      /**
       * Configure the max reconnection period (in second). The reonnection period will
       * be set in range of [reconnect_min_sec,reconnect_max_sec].
       * @param reconnect_max_sec max reconnection period
       */
      with_reconnect_max_sec(max_sec) {
        this.params.reconnect_max_sec = max_sec;
        return this;
      }
      /**
       * Configure the min reconnection period (in second). The reonnection period will
       * be set in range of [reconnect_min_sec,reconnect_max_sec].
       * @param reconnect_min_sec min reconnection period
       */
      with_reconnect_min_sec(min_sec) {
        this.params.reconnect_min_sec = min_sec;
        return this;
      }
      /**
       * Returns the configured MqttConnectionConfig.  On the first invocation of this function, the TLS context is cached
       * and re-used on all subsequent calls to build().
       * @returns The configured MqttConnectionConfig
       */
      build() {
        var _a, _b, _c;
        if (this.params.client_id === void 0 || this.params.host_name === void 0) {
          throw "client_id and endpoint are required";
        }
        if (this.is_using_custom_authorizer == false) {
          if (iot_shared.is_string_and_not_empty(this.params.username)) {
            if (((_a = this.params.username) === null || _a === void 0 ? void 0 : _a.indexOf("x-amz-customauthorizer-name=")) != -1 || ((_b = this.params.username) === null || _b === void 0 ? void 0 : _b.indexOf("x-amz-customauthorizer-signature=")) != -1) {
              this.is_using_custom_authorizer = true;
            }
          }
        }
        if (this.is_using_custom_authorizer == true) {
          if (this.params.port != 443) {
            console.log("Warning: Attempting to connect to authorizer with unsupported port. Port is not 443...");
          }
        }
        if (this.params.tls_ctx === void 0) {
          this.params.tls_ctx = new io.ClientTlsContext(this.tls_ctx_options);
        }
        if (iot_shared.is_string_and_not_empty(this.params.username) == false) {
          this.params.username = "?SDK=NodeJSv2&Version=";
        } else {
          if (((_c = this.params.username) === null || _c === void 0 ? void 0 : _c.indexOf("?")) != -1) {
            this.params.username += "&SDK=NodeJSv2&Version=";
          } else {
            this.params.username += "?SDK=NodeJSv2&Version=";
          }
        }
        this.params.username += platform.crt_version();
        return this.params;
      }
    };
    exports.AwsIotMqttConnectionConfigBuilder = AwsIotMqttConnectionConfigBuilder;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt_shared.js
var require_mqtt_shared = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt_shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_KEEP_ALIVE = exports.normalize_payload = void 0;
    function normalize_payload(payload) {
      if (payload instanceof Buffer) {
        return payload;
      }
      if (typeof payload === "string") {
        return payload;
      }
      if (ArrayBuffer.isView(payload)) {
        const view = payload;
        return Buffer.from(view.buffer, view.byteOffset, view.byteLength);
      }
      if (payload instanceof ArrayBuffer) {
        return Buffer.from(payload);
      }
      if (typeof payload === "object") {
        return JSON.stringify(payload);
      }
      if (!payload) {
        return "";
      }
      throw new TypeError("payload parameter must be a string, object, or DataView.");
    }
    exports.normalize_payload = normalize_payload;
    exports.DEFAULT_KEEP_ALIVE = 1200;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt5.js
var require_mqtt5 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RetryJitterType = exports.ClientSessionBehavior = void 0;
    var ClientSessionBehavior;
    (function(ClientSessionBehavior2) {
      ClientSessionBehavior2[ClientSessionBehavior2["Default"] = 0] = "Default";
      ClientSessionBehavior2[ClientSessionBehavior2["Clean"] = 1] = "Clean";
      ClientSessionBehavior2[ClientSessionBehavior2["RejoinPostSuccess"] = 2] = "RejoinPostSuccess";
      ClientSessionBehavior2[ClientSessionBehavior2["RejoinAlways"] = 3] = "RejoinAlways";
    })(ClientSessionBehavior = exports.ClientSessionBehavior || (exports.ClientSessionBehavior = {}));
    var RetryJitterType;
    (function(RetryJitterType2) {
      RetryJitterType2[RetryJitterType2["Default"] = 0] = "Default";
      RetryJitterType2[RetryJitterType2["None"] = 1] = "None";
      RetryJitterType2[RetryJitterType2["Full"] = 2] = "Full";
      RetryJitterType2[RetryJitterType2["Decorrelated"] = 3] = "Decorrelated";
    })(RetryJitterType = exports.RetryJitterType || (exports.RetryJitterType = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt5_packet.js
var require_mqtt5_packet = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/common/mqtt5_packet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PacketType = exports.RetainHandlingType = exports.QoS = exports.PayloadFormatIndicator = exports.isSuccessfulPubackReasonCode = exports.PubackReasonCode = exports.isSuccessfulUnsubackReasonCode = exports.UnsubackReasonCode = exports.isSuccessfulSubackReasonCode = exports.SubackReasonCode = exports.isSuccessfulDisconnectReasonCode = exports.DisconnectReasonCode = exports.isSuccessfulConnectReasonCode = exports.ConnectReasonCode = void 0;
    var ConnectReasonCode;
    (function(ConnectReasonCode2) {
      ConnectReasonCode2[ConnectReasonCode2["Success"] = 0] = "Success";
      ConnectReasonCode2[ConnectReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      ConnectReasonCode2[ConnectReasonCode2["MalformedPacket"] = 129] = "MalformedPacket";
      ConnectReasonCode2[ConnectReasonCode2["ProtocolError"] = 130] = "ProtocolError";
      ConnectReasonCode2[ConnectReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      ConnectReasonCode2[ConnectReasonCode2["UnsupportedProtocolVersion"] = 132] = "UnsupportedProtocolVersion";
      ConnectReasonCode2[ConnectReasonCode2["ClientIdentifierNotValid"] = 133] = "ClientIdentifierNotValid";
      ConnectReasonCode2[ConnectReasonCode2["BadUsernameOrPassword"] = 134] = "BadUsernameOrPassword";
      ConnectReasonCode2[ConnectReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      ConnectReasonCode2[ConnectReasonCode2["ServerUnavailable"] = 136] = "ServerUnavailable";
      ConnectReasonCode2[ConnectReasonCode2["ServerBusy"] = 137] = "ServerBusy";
      ConnectReasonCode2[ConnectReasonCode2["Banned"] = 138] = "Banned";
      ConnectReasonCode2[ConnectReasonCode2["BadAuthenticationMethod"] = 140] = "BadAuthenticationMethod";
      ConnectReasonCode2[ConnectReasonCode2["TopicNameInvalid"] = 144] = "TopicNameInvalid";
      ConnectReasonCode2[ConnectReasonCode2["PacketTooLarge"] = 149] = "PacketTooLarge";
      ConnectReasonCode2[ConnectReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      ConnectReasonCode2[ConnectReasonCode2["PayloadFormatInvalid"] = 153] = "PayloadFormatInvalid";
      ConnectReasonCode2[ConnectReasonCode2["RetainNotSupported"] = 154] = "RetainNotSupported";
      ConnectReasonCode2[ConnectReasonCode2["QosNotSupported"] = 155] = "QosNotSupported";
      ConnectReasonCode2[ConnectReasonCode2["UseAnotherServer"] = 156] = "UseAnotherServer";
      ConnectReasonCode2[ConnectReasonCode2["ServerMoved"] = 157] = "ServerMoved";
      ConnectReasonCode2[ConnectReasonCode2["ConnectionRateExceeded"] = 159] = "ConnectionRateExceeded";
    })(ConnectReasonCode = exports.ConnectReasonCode || (exports.ConnectReasonCode = {}));
    function isSuccessfulConnectReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulConnectReasonCode = isSuccessfulConnectReasonCode;
    var DisconnectReasonCode;
    (function(DisconnectReasonCode2) {
      DisconnectReasonCode2[DisconnectReasonCode2["NormalDisconnection"] = 0] = "NormalDisconnection";
      DisconnectReasonCode2[DisconnectReasonCode2["DisconnectWithWillMessage"] = 4] = "DisconnectWithWillMessage";
      DisconnectReasonCode2[DisconnectReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      DisconnectReasonCode2[DisconnectReasonCode2["MalformedPacket"] = 129] = "MalformedPacket";
      DisconnectReasonCode2[DisconnectReasonCode2["ProtocolError"] = 130] = "ProtocolError";
      DisconnectReasonCode2[DisconnectReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      DisconnectReasonCode2[DisconnectReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      DisconnectReasonCode2[DisconnectReasonCode2["ServerBusy"] = 137] = "ServerBusy";
      DisconnectReasonCode2[DisconnectReasonCode2["ServerShuttingDown"] = 139] = "ServerShuttingDown";
      DisconnectReasonCode2[DisconnectReasonCode2["KeepAliveTimeout"] = 141] = "KeepAliveTimeout";
      DisconnectReasonCode2[DisconnectReasonCode2["SessionTakenOver"] = 142] = "SessionTakenOver";
      DisconnectReasonCode2[DisconnectReasonCode2["TopicFilterInvalid"] = 143] = "TopicFilterInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["TopicNameInvalid"] = 144] = "TopicNameInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["ReceiveMaximumExceeded"] = 147] = "ReceiveMaximumExceeded";
      DisconnectReasonCode2[DisconnectReasonCode2["TopicAliasInvalid"] = 148] = "TopicAliasInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["PacketTooLarge"] = 149] = "PacketTooLarge";
      DisconnectReasonCode2[DisconnectReasonCode2["MessageRateTooHigh"] = 150] = "MessageRateTooHigh";
      DisconnectReasonCode2[DisconnectReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      DisconnectReasonCode2[DisconnectReasonCode2["AdministrativeAction"] = 152] = "AdministrativeAction";
      DisconnectReasonCode2[DisconnectReasonCode2["PayloadFormatInvalid"] = 153] = "PayloadFormatInvalid";
      DisconnectReasonCode2[DisconnectReasonCode2["RetainNotSupported"] = 154] = "RetainNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["QosNotSupported"] = 155] = "QosNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["UseAnotherServer"] = 156] = "UseAnotherServer";
      DisconnectReasonCode2[DisconnectReasonCode2["ServerMoved"] = 157] = "ServerMoved";
      DisconnectReasonCode2[DisconnectReasonCode2["SharedSubscriptionsNotSupported"] = 158] = "SharedSubscriptionsNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["ConnectionRateExceeded"] = 159] = "ConnectionRateExceeded";
      DisconnectReasonCode2[DisconnectReasonCode2["MaximumConnectTime"] = 160] = "MaximumConnectTime";
      DisconnectReasonCode2[DisconnectReasonCode2["SubscriptionIdentifiersNotSupported"] = 161] = "SubscriptionIdentifiersNotSupported";
      DisconnectReasonCode2[DisconnectReasonCode2["WildcardSubscriptionsNotSupported"] = 162] = "WildcardSubscriptionsNotSupported";
    })(DisconnectReasonCode = exports.DisconnectReasonCode || (exports.DisconnectReasonCode = {}));
    function isSuccessfulDisconnectReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulDisconnectReasonCode = isSuccessfulDisconnectReasonCode;
    var SubackReasonCode;
    (function(SubackReasonCode2) {
      SubackReasonCode2[SubackReasonCode2["GrantedQoS0"] = 0] = "GrantedQoS0";
      SubackReasonCode2[SubackReasonCode2["GrantedQoS1"] = 1] = "GrantedQoS1";
      SubackReasonCode2[SubackReasonCode2["GrantedQoS2"] = 2] = "GrantedQoS2";
      SubackReasonCode2[SubackReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      SubackReasonCode2[SubackReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      SubackReasonCode2[SubackReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      SubackReasonCode2[SubackReasonCode2["TopicFilterInvalid"] = 143] = "TopicFilterInvalid";
      SubackReasonCode2[SubackReasonCode2["PacketIdentifierInUse"] = 145] = "PacketIdentifierInUse";
      SubackReasonCode2[SubackReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      SubackReasonCode2[SubackReasonCode2["SharedSubscriptionsNotSupported"] = 158] = "SharedSubscriptionsNotSupported";
      SubackReasonCode2[SubackReasonCode2["SubscriptionIdentifiersNotSupported"] = 161] = "SubscriptionIdentifiersNotSupported";
      SubackReasonCode2[SubackReasonCode2["WildcardSubscriptionsNotSupported"] = 162] = "WildcardSubscriptionsNotSupported";
    })(SubackReasonCode = exports.SubackReasonCode || (exports.SubackReasonCode = {}));
    function isSuccessfulSubackReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulSubackReasonCode = isSuccessfulSubackReasonCode;
    var UnsubackReasonCode;
    (function(UnsubackReasonCode2) {
      UnsubackReasonCode2[UnsubackReasonCode2["Success"] = 0] = "Success";
      UnsubackReasonCode2[UnsubackReasonCode2["NoSubscriptionExisted"] = 17] = "NoSubscriptionExisted";
      UnsubackReasonCode2[UnsubackReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      UnsubackReasonCode2[UnsubackReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      UnsubackReasonCode2[UnsubackReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      UnsubackReasonCode2[UnsubackReasonCode2["TopicFilterInvalid"] = 143] = "TopicFilterInvalid";
      UnsubackReasonCode2[UnsubackReasonCode2["PacketIdentifierInUse"] = 145] = "PacketIdentifierInUse";
    })(UnsubackReasonCode = exports.UnsubackReasonCode || (exports.UnsubackReasonCode = {}));
    function isSuccessfulUnsubackReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulUnsubackReasonCode = isSuccessfulUnsubackReasonCode;
    var PubackReasonCode;
    (function(PubackReasonCode2) {
      PubackReasonCode2[PubackReasonCode2["Success"] = 0] = "Success";
      PubackReasonCode2[PubackReasonCode2["NoMatchingSubscribers"] = 16] = "NoMatchingSubscribers";
      PubackReasonCode2[PubackReasonCode2["UnspecifiedError"] = 128] = "UnspecifiedError";
      PubackReasonCode2[PubackReasonCode2["ImplementationSpecificError"] = 131] = "ImplementationSpecificError";
      PubackReasonCode2[PubackReasonCode2["NotAuthorized"] = 135] = "NotAuthorized";
      PubackReasonCode2[PubackReasonCode2["TopicNameInvalid"] = 144] = "TopicNameInvalid";
      PubackReasonCode2[PubackReasonCode2["PacketIdentifierInUse"] = 145] = "PacketIdentifierInUse";
      PubackReasonCode2[PubackReasonCode2["QuotaExceeded"] = 151] = "QuotaExceeded";
      PubackReasonCode2[PubackReasonCode2["PayloadFormatInvalid"] = 153] = "PayloadFormatInvalid";
    })(PubackReasonCode = exports.PubackReasonCode || (exports.PubackReasonCode = {}));
    function isSuccessfulPubackReasonCode(reasonCode) {
      return reasonCode < 128;
    }
    exports.isSuccessfulPubackReasonCode = isSuccessfulPubackReasonCode;
    var PayloadFormatIndicator;
    (function(PayloadFormatIndicator2) {
      PayloadFormatIndicator2[PayloadFormatIndicator2["Bytes"] = 0] = "Bytes";
      PayloadFormatIndicator2[PayloadFormatIndicator2["Utf8"] = 1] = "Utf8";
    })(PayloadFormatIndicator = exports.PayloadFormatIndicator || (exports.PayloadFormatIndicator = {}));
    var QoS;
    (function(QoS2) {
      QoS2[QoS2["AtMostOnce"] = 0] = "AtMostOnce";
      QoS2[QoS2["AtLeastOnce"] = 1] = "AtLeastOnce";
      QoS2[QoS2["ExactlyOnce"] = 2] = "ExactlyOnce";
    })(QoS = exports.QoS || (exports.QoS = {}));
    var RetainHandlingType;
    (function(RetainHandlingType2) {
      RetainHandlingType2[RetainHandlingType2["SendOnSubscribe"] = 0] = "SendOnSubscribe";
      RetainHandlingType2[RetainHandlingType2["SendOnSubscribeIfNew"] = 1] = "SendOnSubscribeIfNew";
      RetainHandlingType2[RetainHandlingType2["DontSend"] = 2] = "DontSend";
    })(RetainHandlingType = exports.RetainHandlingType || (exports.RetainHandlingType = {}));
    var PacketType;
    (function(PacketType2) {
      PacketType2[PacketType2["Connect"] = 1] = "Connect";
      PacketType2[PacketType2["Connack"] = 2] = "Connack";
      PacketType2[PacketType2["Publish"] = 3] = "Publish";
      PacketType2[PacketType2["Puback"] = 4] = "Puback";
      PacketType2[PacketType2["Pubrec"] = 5] = "Pubrec";
      PacketType2[PacketType2["Pubrel"] = 6] = "Pubrel";
      PacketType2[PacketType2["Pubcomp"] = 7] = "Pubcomp";
      PacketType2[PacketType2["Subscribe"] = 8] = "Subscribe";
      PacketType2[PacketType2["Suback"] = 9] = "Suback";
      PacketType2[PacketType2["Unsubscribe"] = 10] = "Unsubscribe";
      PacketType2[PacketType2["Unsuback"] = 11] = "Unsuback";
      PacketType2[PacketType2["Pingreq"] = 12] = "Pingreq";
      PacketType2[PacketType2["Pingresp"] = 13] = "Pingresp";
      PacketType2[PacketType2["Disconnect"] = 14] = "Disconnect";
      PacketType2[PacketType2["Auth"] = 15] = "Auth";
    })(PacketType = exports.PacketType || (exports.PacketType = {}));
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/mqtt5.js
var require_mqtt52 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/mqtt5.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mqtt5Client = exports.ClientExtendedValidationAndFlowControl = exports.ClientOperationQueueBehavior = exports.HttpProxyOptions = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var event_1 = require_event();
    var io = __importStar2(require_io2());
    var mqtt_shared = __importStar2(require_mqtt_shared());
    var error_1 = require_error();
    var http_1 = require_http2();
    Object.defineProperty(exports, "HttpProxyOptions", { enumerable: true, get: function() {
      return http_1.HttpProxyOptions;
    } });
    __exportStar2(require_mqtt5(), exports);
    __exportStar2(require_mqtt5_packet(), exports);
    var ClientOperationQueueBehavior;
    (function(ClientOperationQueueBehavior2) {
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["Default"] = 0] = "Default";
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["FailNonQos1PublishOnDisconnect"] = 1] = "FailNonQos1PublishOnDisconnect";
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["FailQos0PublishOnDisconnect"] = 2] = "FailQos0PublishOnDisconnect";
      ClientOperationQueueBehavior2[ClientOperationQueueBehavior2["FailAllOnDisconnect"] = 3] = "FailAllOnDisconnect";
    })(ClientOperationQueueBehavior = exports.ClientOperationQueueBehavior || (exports.ClientOperationQueueBehavior = {}));
    var ClientExtendedValidationAndFlowControl;
    (function(ClientExtendedValidationAndFlowControl2) {
      ClientExtendedValidationAndFlowControl2[ClientExtendedValidationAndFlowControl2["None"] = 0] = "None";
      ClientExtendedValidationAndFlowControl2[ClientExtendedValidationAndFlowControl2["AwsIotCoreDefaults"] = 1] = "AwsIotCoreDefaults";
    })(ClientExtendedValidationAndFlowControl = exports.ClientExtendedValidationAndFlowControl || (exports.ClientExtendedValidationAndFlowControl = {}));
    var Mqtt5Client = class _Mqtt5Client extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      /**
       * Client constructor
       *
       * @param config The configuration for this client
       */
      constructor(config) {
        super();
        this._super(binding_1.default.mqtt5_client_new(this, config, (client) => {
          _Mqtt5Client._s_on_stopped(client);
        }, (client) => {
          _Mqtt5Client._s_on_attempting_connect(client);
        }, (client, connack, settings) => {
          _Mqtt5Client._s_on_connection_success(client, connack, settings);
        }, (client, errorCode, connack) => {
          _Mqtt5Client._s_on_connection_failure(client, new error_1.CrtError(errorCode), connack);
        }, (client, errorCode, disconnect) => {
          _Mqtt5Client._s_on_disconnection(client, new error_1.CrtError(errorCode), disconnect);
        }, (client, message) => {
          _Mqtt5Client._s_on_message_received(client, message);
        }, config.clientBootstrap ? config.clientBootstrap.native_handle() : null, config.socketOptions ? config.socketOptions.native_handle() : null, config.tlsCtx ? config.tlsCtx.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null));
      }
      /**
       * Triggers cleanup of native resources associated with the MQTT5 client.  Once this has been invoked, callbacks
       * and events are not guaranteed to be received.
       *
       * This must be called when finished with a client; otherwise, native resources will leak.  It is not safe
       * to invoke any further operations on the client after close() has been called.
       *
       * For a running client, safe and proper shutdown can be accomplished by
       *
       * ```ts
       * const stopped = once(client, "stopped");
       * client.stop();
       * await stopped;
       * client.close();
       * ```
       *
       * This is an asynchronous operation.
       *
       * @group Node-only
       */
      close() {
        binding_1.default.mqtt5_client_close(this.native_handle());
      }
      /**
       * Notifies the MQTT5 client that you want it to maintain connectivity to the configured endpoint.
       * The client will attempt to stay connected using the properties of the reconnect-related parameters
       * in the mqtt5 client configuration.
       *
       * This is an asynchronous operation.
       */
      start() {
        binding_1.default.mqtt5_client_start(this.native_handle());
      }
      /**
       * Notifies the MQTT5 client that you want it to end connectivity to the configured endpoint, disconnecting any
       * existing connection and halting reconnection attempts.
       *
       * This is an asynchronous operation.  Once the process completes, no further events will be emitted until the client
       * has {@link start} invoked.  Invoking {@link start start()} after a {@link stop stop()} will always result in a
       * new MQTT session.
       *
       * @param disconnectPacket (optional) properties of a DISCONNECT packet to send as part of the shutdown process
       */
      stop(disconnectPacket) {
        binding_1.default.mqtt5_client_stop(this.native_handle(), disconnectPacket);
      }
      /**
       * Subscribe to one or more topic filters by queuing a SUBSCRIBE packet to be sent to the server.
       *
       * @param packet SUBSCRIBE packet to send to the server
       * @returns a promise that will be rejected with an error or resolved with the SUBACK response
       */
      subscribe(packet) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function curriedPromiseCallback(client, errorCode, suback) {
              return _Mqtt5Client._s_on_suback_callback(resolve, reject, client, errorCode, suback);
            }
            try {
              binding_1.default.mqtt5_client_subscribe(this.native_handle(), packet, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Unsubscribe from one or more topic filters by queuing an UNSUBSCRIBE packet to be sent to the server.
       *
       * @param packet UNSUBSCRIBE packet to send to the server
       * @returns a promise that will be rejected with an error or resolved with the UNSUBACK response
       */
      unsubscribe(packet) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function curriedPromiseCallback(client, errorCode, unsuback) {
              return _Mqtt5Client._s_on_unsuback_callback(resolve, reject, client, errorCode, unsuback);
            }
            try {
              binding_1.default.mqtt5_client_unsubscribe(this.native_handle(), packet, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Send a message to subscribing clients by queuing a PUBLISH packet to be sent to the server.
       *
       * @param packet PUBLISH packet to send to the server
       * @returns a promise that will be rejected with an error or resolved with the PUBACK response (QoS 1) or
       * undefined (QoS 0)
       */
      publish(packet) {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            if (packet && packet.payload) {
              packet.payload = mqtt_shared.normalize_payload(packet.payload);
            }
            function curriedPromiseCallback(client, errorCode, result) {
              return _Mqtt5Client._s_on_puback_callback(resolve, reject, client, errorCode, result);
            }
            try {
              binding_1.default.mqtt5_client_publish(this.native_handle(), packet, curriedPromiseCallback);
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Queries a small set of numerical statistics about the current state of the client's operation queue
       *
       * @group Node-only
       */
      getQueueStatistics() {
        return binding_1.default.mqtt5_client_get_queue_statistics(this.native_handle());
      }
      on(event, listener) {
        super.on(event, listener);
        return this;
      }
      /*
       * Private helper functions
       *
       * Callbacks come through static functions so that the native threadsafe function objects do not
       * capture the client object itself, simplifying the number of strong references to the client floating around.
       */
      static _s_on_stopped(client) {
        process.nextTick(() => {
          let stoppedEvent = {};
          client.emit(_Mqtt5Client.STOPPED, stoppedEvent);
        });
      }
      static _s_on_attempting_connect(client) {
        process.nextTick(() => {
          let attemptingConnectEvent = {};
          client.emit(_Mqtt5Client.ATTEMPTING_CONNECT, attemptingConnectEvent);
        });
      }
      static _s_on_connection_success(client, connack, settings) {
        let connectionSuccessEvent = {
          connack,
          settings
        };
        process.nextTick(() => {
          client.emit(_Mqtt5Client.CONNECTION_SUCCESS, connectionSuccessEvent);
        });
      }
      static _s_on_connection_failure(client, error, connack) {
        let connectionFailureEvent = {
          error
        };
        if (connack !== null && connack !== void 0) {
          connectionFailureEvent.connack = connack;
        }
        process.nextTick(() => {
          client.emit(_Mqtt5Client.CONNECTION_FAILURE, connectionFailureEvent);
        });
      }
      static _s_on_disconnection(client, error, disconnect) {
        let disconnectionEvent = {
          error
        };
        if (disconnect !== null && disconnect !== void 0) {
          disconnectionEvent.disconnect = disconnect;
        }
        process.nextTick(() => {
          client.emit(_Mqtt5Client.DISCONNECTION, disconnectionEvent);
        });
      }
      static _s_on_suback_callback(resolve, reject, client, errorCode, suback) {
        if (errorCode == 0 && suback !== void 0) {
          resolve(suback);
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_unsuback_callback(resolve, reject, client, errorCode, unsuback) {
        if (errorCode == 0 && unsuback !== void 0) {
          resolve(unsuback);
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_puback_callback(resolve, reject, client, errorCode, result) {
        if (errorCode == 0) {
          resolve(result);
        } else {
          reject(io.error_code_to_string(errorCode));
        }
      }
      static _s_on_message_received(client, message) {
        let messageReceivedEvent = {
          message
        };
        process.nextTick(() => {
          client.emit(_Mqtt5Client.MESSAGE_RECEIVED, messageReceivedEvent);
        });
      }
    };
    exports.Mqtt5Client = Mqtt5Client;
    Mqtt5Client.ERROR = "error";
    Mqtt5Client.MESSAGE_RECEIVED = "messageReceived";
    Mqtt5Client.ATTEMPTING_CONNECT = "attemptingConnect";
    Mqtt5Client.CONNECTION_SUCCESS = "connectionSuccess";
    Mqtt5Client.CONNECTION_FAILURE = "connectionFailure";
    Mqtt5Client.DISCONNECTION = "disconnection";
    Mqtt5Client.STOPPED = "stopped";
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/aws_iot_mqtt5.js
var require_aws_iot_mqtt5 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/aws_iot_mqtt5.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AwsIotMqtt5ClientConfigBuilder = void 0;
    var mqtt5 = __importStar2(require_mqtt52());
    var io = __importStar2(require_io2());
    var auth = __importStar2(require_auth());
    var error_1 = require_error();
    var iot_shared = __importStar2(require_aws_iot_shared());
    var mqtt_shared = __importStar2(require_mqtt_shared());
    var AwsIotMqtt5ClientConfigBuilder = class _AwsIotMqtt5ClientConfigBuilder {
      constructor(hostName, port, tlsContextOptions) {
        this.tlsContextOptions = tlsContextOptions;
        this.config = {
          hostName,
          port,
          connectProperties: {
            keepAliveIntervalSeconds: mqtt_shared.DEFAULT_KEEP_ALIVE
          },
          extendedValidationAndFlowControlOptions: mqtt5.ClientExtendedValidationAndFlowControl.AwsIotCoreDefaults
        };
      }
      /* Builders for different connection methods to AWS IoT Core */
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS
       * using X509 certificate and key at the supplied file paths.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param certPath - Path to certificate, in PEM format
       * @param keyPath - Path to private key, in PEM format
       */
      static newDirectMqttBuilderWithMtlsFromPath(hostName, certPath, keyPath) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_from_path(certPath, keyPath));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS
       * using in-memory X509 certificate and key.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param cert - Certificate, in PEM format
       * @param privateKey - Private key, in PEM format
       */
      static newDirectMqttBuilderWithMtlsFromMemory(hostName, cert, privateKey) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls(cert, privateKey));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS
       * using a PKCS11 library for certificate and private key operations.
       *
       * NOTE: This configuration only works on Unix devices.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param pkcs11Options - PKCS#11 options.
       */
      static newDirectMqttBuilderWithMtlsFromPkcs11(hostName, pkcs11Options) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11Options));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS
       * using a PKCS12 file.
       *
       * Note: This configuration only works on MacOS devices.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param pkcs12_options - The PKCS#12 options to use in the builder.
       */
      static newDirectMqttBuilderWithMtlsFromPkcs12(hostName, pkcs12_options) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_pkcs12_from_path(pkcs12_options.pkcs12_file, pkcs12_options.pkcs12_password));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS
       * using a certificate entry in a Windows certificate store.
       *
       * NOTE: This configuration only works on Windows devices.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param certificatePath - Path to certificate in a Windows certificate store.
       *      The path must use backslashes and end with the certificate's thumbprint.
       *      Example: `CurrentUser\MY\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6`
       */
      static newDirectMqttBuilderWithMtlsFromWindowsCertStorePath(hostName, certificatePath) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificatePath));
        if (io.is_alpn_available()) {
          builder.tlsContextOptions.alpn_list.unshift("x-amzn-mqtt-ca");
        }
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via TLS,
       * authenticating via a custom authenticator.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param customAuthConfig - AWS IoT custom auth configuration
       */
      static newDirectMqttBuilderWithCustomAuth(hostName, customAuthConfig) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, new io.TlsContextOptions());
        builder.customAuthConfig = customAuthConfig;
        builder.tlsContextOptions.alpn_list = ["mqtt"];
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via websockets,
       * using AWS Sigv4 signing to establish authenticate.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param options - additional sigv4-oriented options to use
       */
      static newWebsocketMqttBuilderWithSigv4Auth(hostName, options) {
        let tlsContextOptions = new io.TlsContextOptions();
        tlsContextOptions.alpn_list = [];
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, tlsContextOptions);
        let credentialsProvider = options === null || options === void 0 ? void 0 : options.credentialsProvider;
        if (!credentialsProvider) {
          credentialsProvider = auth.AwsCredentialsProvider.newDefault();
        }
        builder.config.websocketHandshakeTransform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
          var _a;
          try {
            const signingConfig = {
              algorithm: auth.AwsSigningAlgorithm.SigV4,
              signature_type: auth.AwsSignatureType.HttpRequestViaQueryParams,
              provider: credentialsProvider,
              region: (_a = options === null || options === void 0 ? void 0 : options.region) !== null && _a !== void 0 ? _a : iot_shared.extractRegionFromEndpoint(hostName),
              service: "iotdevicegateway",
              signed_body_value: auth.AwsSignedBodyValue.EmptySha256,
              omit_session_token: true
            };
            yield auth.aws_sign_request(request, signingConfig);
            done();
          } catch (error) {
            if (error instanceof error_1.CrtError) {
              done(error.error_code);
            } else {
              done(3);
            }
          }
        });
        return builder;
      }
      /**
       * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via websockets,
       * authenticating via a custom authenticator.
       *
       * @param hostName - AWS IoT endpoint to connect to
       * @param customAuthConfig - AWS IoT custom auth configuration
       */
      static newWebsocketMqttBuilderWithCustomAuth(hostName, customAuthConfig) {
        let builder = new _AwsIotMqtt5ClientConfigBuilder(hostName, _AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, new io.TlsContextOptions());
        builder.customAuthConfig = customAuthConfig;
        builder.config.websocketHandshakeTransform = (request, done) => __awaiter2(this, void 0, void 0, function* () {
          done(0);
        });
        return builder;
      }
      /* Instance Methods for various config overrides */
      /**
       * Overrides the default system trust store.
       *
       * @param caDirpath - Only used on Unix-style systems where all trust anchors are
       * stored in a directory (e.g. /etc/ssl/certs).
       * @param caFilepath - Single file containing all trust CAs, in PEM format
       */
      withCertificateAuthorityFromPath(caDirpath, caFilepath) {
        this.tlsContextOptions.override_default_trust_store_from_path(caDirpath, caFilepath);
        return this;
      }
      /**
       * Overrides the default system trust store.
       *
       * @param ca - Buffer containing all trust CAs, in PEM format
       */
      withCertificateAuthority(ca) {
        this.tlsContextOptions.override_default_trust_store(ca);
        return this;
      }
      /**
       * Overrides the IoT endpoint port to connect to.
       *
       * @param port The IoT endpoint port to connect to. Usually 8883 for MQTT, or 443 for websockets
       */
      withPort(port) {
        this.config.port = port;
        return this;
      }
      /**
       * Overrides all configurable options with respect to the CONNECT packet sent by the client, including the will.
       * These connect properties will be used for every connection attempt made by the client.  Custom authentication
       * configuration will override the username and password values in this configuration.
       *
       * @param connectPacket all configurable options with respect to the CONNECT packet sent by the client
       */
      withConnectProperties(connectPacket) {
        this.config.connectProperties = connectPacket;
        return this;
      }
      /**
       * Overrides how the MQTT5 client should behave with respect to MQTT sessions.
       *
       * @param sessionBehavior how the MQTT5 client should behave with respect to MQTT sessions.
       */
      withSessionBehavior(sessionBehavior) {
        this.config.sessionBehavior = sessionBehavior;
        return this;
      }
      /**
       * Overrides how the reconnect delay is modified in order to smooth out the distribution of reconnection attempt
       * timepoints for a large set of reconnecting clients.
       *
       * @param retryJitterMode controls how the reconnect delay is modified in order to smooth out the distribution of
       * econnection attempt timepoints for a large set of reconnecting clients.
       */
      withRetryJitterMode(retryJitterMode) {
        this.config.retryJitterMode = retryJitterMode;
        return this;
      }
      /**
       * Overrides the minimum amount of time to wait to reconnect after a disconnect.  Exponential backoff is performed
       * with controllable jitter after each connection failure.
       *
       * @param minReconnectDelayMs minimum amount of time to wait to reconnect after a disconnect.
       */
      withMinReconnectDelayMs(minReconnectDelayMs) {
        this.config.minReconnectDelayMs = minReconnectDelayMs;
        return this;
      }
      /**
       * Overrides the maximum amount of time to wait to reconnect after a disconnect.  Exponential backoff is performed
       * with controllable jitter after each connection failure.
       *
       * @param maxReconnectDelayMs maximum amount of time to wait to reconnect after a disconnect.
       */
      withMaxReconnectDelayMs(maxReconnectDelayMs) {
        this.config.maxReconnectDelayMs = maxReconnectDelayMs;
        return this;
      }
      /**
       * Overrides the amount of time that must elapse with an established connection before the reconnect delay is
       * reset to the minimum.  This helps alleviate bandwidth-waste in fast reconnect cycles due to permission
       * failures on operations.
       *
       * @param minConnectedTimeToResetReconnectDelayMs the amount of time that must elapse with an established
       * connection before the reconnect delay is reset to the minimum
       */
      withMinConnectedTimeToResetReconnectDelayMs(minConnectedTimeToResetReconnectDelayMs) {
        this.config.minConnectedTimeToResetReconnectDelayMs = minConnectedTimeToResetReconnectDelayMs;
        return this;
      }
      /**
       * Overrides the time interval to wait after sending a CONNECT request for a CONNACK to arrive.  If one does not
       * arrive, the connection will be shut down.
       *
       * @param connackTimeoutMs time interval to wait after sending a CONNECT request for a CONNACK to arrive
       */
      withConnackTimeoutMs(connackTimeoutMs) {
        this.config.connackTimeoutMs = connackTimeoutMs;
        return this;
      }
      /**
       * Overrides how disconnects affect the queued and in-progress operations tracked by the client.  Also controls
       * how new operations are handled while the client is not connected.  In particular, if the client is not connected,
       * then any operation that would be failed on disconnect (according to these rules) will also be rejected.
       *
       * @param offlineQueueBehavior how disconnects affect the queued and in-progress operations tracked by the client
       *
       * @group Node-only
       */
      withOfflineQueueBehavior(offlineQueueBehavior) {
        this.config.offlineQueueBehavior = offlineQueueBehavior;
        return this;
      }
      /**
       * Overrides the time interval to wait after sending a PINGREQ for a PINGRESP to arrive.  If one does not arrive,
       * the client will close the current connection.
       *
       * @param pingTimeoutMs time interval to wait after sending a PINGREQ for a PINGRESP to arrive
       *
       * @group Node-only
       */
      withPingTimeoutMs(pingTimeoutMs) {
        this.config.pingTimeoutMs = pingTimeoutMs;
        return this;
      }
      /**
       * Overrides the time interval to wait for an ack after sending a QoS 1+ PUBLISH, SUBSCRIBE, or UNSUBSCRIBE before
       * failing the operation.  Defaults to no timeout.
       *
       * @param ackTimeoutSeconds the time interval to wait for an ack after sending a QoS 1+ PUBLISH, SUBSCRIBE,
       * or UNSUBSCRIBE before failing the operation
       *
       * @group Node-only
       */
      withAckTimeoutSeconds(ackTimeoutSeconds) {
        this.config.ackTimeoutSeconds = ackTimeoutSeconds;
        return this;
      }
      /**
       * Overrides the socket properties of the underlying MQTT connections made by the client.  Leave undefined to use
       * defaults (no TCP keep alive, 10 second socket timeout).
       *
       * @param socketOptions socket properties of the underlying MQTT connections made by the client
       *
       * @group Node-only
       */
      withSocketOptions(socketOptions) {
        this.config.socketOptions = socketOptions;
        return this;
      }
      /**
       * Overrides (tunneling) HTTP proxy usage when establishing MQTT connections.
       *
       * @param httpProxyOptions HTTP proxy options to use when establishing MQTT connections
       *
       * @group Node-only
       */
      withHttpProxyOptions(httpProxyOptions) {
        this.config.httpProxyOptions = httpProxyOptions;
        return this;
      }
      /**
       * Overrides additional controls for client behavior with respect to operation validation and flow control; these
       * checks go beyond the base MQTT5 spec to respect limits of specific MQTT brokers.
       *
       * @param extendedValidationAndFlowControlOptions additional controls for client behavior with respect to operation
       * validation and flow control
       *
       * @group Node-only
       */
      withExtendedValidationAndFlowControlOptions(extendedValidationAndFlowControlOptions) {
        this.config.extendedValidationAndFlowControlOptions = extendedValidationAndFlowControlOptions;
        return this;
      }
      /**
       * Constructs an MQTT5 Client configuration object for creating mqtt5 clients.
       */
      build() {
        var _a, _b;
        if (this.config.tlsCtx === void 0) {
          this.config.tlsCtx = new io.ClientTlsContext(this.tlsContextOptions);
        }
        if (this.config.connectProperties) {
          this.config.connectProperties.username = iot_shared.buildMqtt5FinalUsername(this.customAuthConfig);
          if ((_a = this.customAuthConfig) === null || _a === void 0 ? void 0 : _a.password) {
            this.config.connectProperties.password = (_b = this.customAuthConfig) === null || _b === void 0 ? void 0 : _b.password;
          }
        }
        return this.config;
      }
    };
    exports.AwsIotMqtt5ClientConfigBuilder = AwsIotMqtt5ClientConfigBuilder;
    AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT = 443;
    AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT = 8883;
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/iot.js
var require_iot = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/iot.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_aws_iot(), exports);
    __exportStar2(require_aws_iot_mqtt5(), exports);
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/mqtt.js
var require_mqtt2 = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/native/mqtt.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MqttClientConnection = exports.MqttClient = exports.MqttWill = exports.QoS = exports.HttpProxyOptions = void 0;
    var binding_1 = __importDefault2(require_binding());
    var native_resource_1 = require_native_resource();
    var event_1 = require_event();
    var crt = __importStar2(require_mqtt_shared());
    var error_1 = require_error();
    var io = __importStar2(require_io2());
    var http_1 = require_http2();
    Object.defineProperty(exports, "HttpProxyOptions", { enumerable: true, get: function() {
      return http_1.HttpProxyOptions;
    } });
    var mqtt_1 = require_mqtt();
    var mqtt_2 = require_mqtt();
    Object.defineProperty(exports, "QoS", { enumerable: true, get: function() {
      return mqtt_2.QoS;
    } });
    Object.defineProperty(exports, "MqttWill", { enumerable: true, get: function() {
      return mqtt_2.MqttWill;
    } });
    var MqttClient = class extends native_resource_1.NativeResource {
      /**
       * @param bootstrap The {@link ClientBootstrap} to use for socket connections.  Leave undefined to use the
       *          default system-wide bootstrap (recommended).
       */
      constructor(bootstrap = void 0) {
        super(binding_1.default.mqtt_client_new(bootstrap != null ? bootstrap.native_handle() : null));
        this.bootstrap = bootstrap;
      }
      /**
       * Creates a new {@link MqttClientConnection}
       * @param config Configuration for the mqtt connection
       * @returns A new connection
       */
      new_connection(config) {
        return new MqttClientConnection(this, config);
      }
    };
    exports.MqttClient = MqttClient;
    var MqttClientConnection = class extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {
      /**
       * @param client The client that owns this connection
       * @param config The configuration for this connection
       */
      constructor(client, config) {
        super();
        this.client = client;
        this.config = config;
        if (config == null || config == void 0) {
          throw new error_1.CrtError("MqttClientConnection constructor: config not defined");
        }
        const will = config.will ? {
          topic: config.will.topic,
          qos: config.will.qos,
          payload: crt.normalize_payload(config.will.payload),
          retain: config.will.retain
        } : void 0;
        var min_sec = mqtt_1.DEFAULT_RECONNECT_MIN_SEC;
        var max_sec = mqtt_1.DEFAULT_RECONNECT_MAX_SEC;
        if (config.reconnect_min_sec) {
          min_sec = config.reconnect_min_sec;
          max_sec = Math.max(min_sec, max_sec);
        }
        if (config.reconnect_max_sec) {
          max_sec = config.reconnect_max_sec;
          min_sec = Math.min(min_sec, max_sec);
        }
        if (client == void 0 || client == null) {
          throw new error_1.CrtError("MqttClientConnection constructor: client not defined");
        }
        if (config.socket_options == void 0 || config.socket_options == null) {
          throw new error_1.CrtError("MqttClientConnection constructor: socket_options in configuration not defined");
        }
        this._super(binding_1.default.mqtt_client_connection_new(client.native_handle(), (error_code) => {
          this._on_connection_interrupted(error_code);
        }, (return_code, session_present) => {
          this._on_connection_resumed(return_code, session_present);
        }, config.tls_ctx ? config.tls_ctx.native_handle() : null, will, config.username, config.password, config.use_websocket, config.proxy_options ? config.proxy_options.create_native_handle() : void 0, config.websocket_handshake_transform, min_sec, max_sec));
        this.tls_ctx = config.tls_ctx;
        binding_1.default.mqtt_client_connection_on_message(this.native_handle(), this._on_any_publish.bind(this));
        binding_1.default.mqtt_client_connection_on_closed(this.native_handle(), this._on_connection_closed.bind(this));
        this.on("error", (error) => {
        });
      }
      close() {
        binding_1.default.mqtt_client_connection_close(this.native_handle());
      }
      // Overridden to allow uncorking on ready
      on(event, listener) {
        super.on(event, listener);
        if (event == "connect") {
          process.nextTick(() => {
            this.uncork();
          });
        }
        return this;
      }
      /**
       * Open the actual connection to the server (async).
       * @returns A Promise which completes whether the connection succeeds or fails.
       *          If connection fails, the Promise will reject with an exception.
       *          If connection succeeds, the Promise will return a boolean that is
       *          true for resuming an existing session, or false if the session is new
       */
      connect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            if (this.config.socket_options == null || this.config.socket_options == void 0) {
              throw new error_1.CrtError("MqttClientConnection connect: socket_options in configuration not defined");
            }
            try {
              binding_1.default.mqtt_client_connection_connect(this.native_handle(), this.config.client_id, this.config.host_name, this.config.port, this.config.socket_options.native_handle(), this.config.keep_alive, this.config.ping_timeout, this.config.protocol_operation_timeout, this.config.clean_session, this._on_connect_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * The connection will automatically reconnect when disconnected, removing the need for this function.
       * To cease automatic reconnection attempts, call {@link disconnect}.
       * @deprecated
       */
      reconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_reconnect(this.native_handle(), this._on_connect_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Publish message (async).
       * If the device is offline, the PUBLISH packet will be sent once the connection resumes.
       *
       * @param topic Topic name
       * @param payload Contents of message
       * @param qos Quality of Service for delivering this message
       * @param retain If true, the server will store the message and its QoS so that it can be
       *               delivered to future subscribers whose subscriptions match the topic name
       * @returns Promise which returns a {@link MqttRequest} which will contain the packet id of
       *          the PUBLISH packet.
       *
       * * For QoS 0, completes as soon as the packet is sent.
       * * For QoS 1, completes when PUBACK is received.
       * * For QoS 2, completes when PUBCOMP is received.
       */
      publish(topic, payload, qos, retain = false) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (typeof topic !== "string") {
            return Promise.reject("topic is not a string");
          }
          if (typeof qos !== "number") {
            return Promise.reject("qos is not a number");
          }
          if (typeof retain !== "boolean") {
            return Promise.reject("retain is not a boolean");
          }
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_publish(this.native_handle(), topic, crt.normalize_payload(payload), qos, retain, this._on_puback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Subscribe to a topic filter (async).
       * The client sends a SUBSCRIBE packet and the server responds with a SUBACK.
       *
       * subscribe() may be called while the device is offline, though the async
       * operation cannot complete successfully until the connection resumes.
       *
       * Once subscribed, `callback` is invoked each time a message matching
       * the `topic` is received. It is possible for such messages to arrive before
       * the SUBACK is received.
       *
       * @param topic Subscribe to this topic filter, which may include wildcards
       * @param qos Maximum requested QoS that server may use when sending messages to the client.
       *            The server may grant a lower QoS in the SUBACK
       * @param on_message Optional callback invoked when message received.
       * @returns Promise which returns a {@link MqttSubscribeRequest} which will contain the
       *          result of the SUBSCRIBE. The Promise resolves when a SUBACK is returned
       *          from the server or is rejected when an exception occurs.
       */
      subscribe(topic, qos, on_message) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (typeof topic !== "string") {
            return Promise.reject("topic is not a string");
          }
          if (typeof qos !== "number") {
            return Promise.reject("qos is not a number");
          }
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_subscribe(this.native_handle(), topic, qos, on_message, this._on_suback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Unsubscribe from a topic filter (async).
       * The client sends an UNSUBSCRIBE packet, and the server responds with an UNSUBACK.
       * @param topic The topic filter to unsubscribe from. May contain wildcards.
       * @returns Promise wihch returns a {@link MqttRequest} which will contain the packet id
       *          of the UNSUBSCRIBE packet being acknowledged. Promise is resolved when an
       *          UNSUBACK is received from the server or is rejected when an exception occurs.
       */
      unsubscribe(topic) {
        return __awaiter2(this, void 0, void 0, function* () {
          if (typeof topic !== "string") {
            return Promise.reject("topic is not a string");
          }
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_unsubscribe(this.native_handle(), topic, this._on_unsuback_callback.bind(this, resolve, reject));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Close the connection (async).
       *
       * Will free all native resources, rendering the connection unusable after the disconnect() call.
       *
       * @returns Promise which completes when the connection is closed.
      */
      disconnect() {
        return __awaiter2(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            reject = this._reject(reject);
            try {
              binding_1.default.mqtt_client_connection_disconnect(this.native_handle(), this._on_disconnect_callback.bind(this, resolve));
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Queries a small set of numerical statistics about the current state of the connection's operation queue
       *
       * @group Node-only
       */
      getQueueStatistics() {
        return binding_1.default.mqtt_client_connection_get_queue_statistics(this.native_handle());
      }
      // Wrap a promise rejection with a function that will also emit the error as an event
      _reject(reject) {
        return (reason) => {
          reject(reason);
          process.nextTick(() => {
            this.emit("error", new error_1.CrtError(reason));
          });
        };
      }
      _on_connection_interrupted(error_code) {
        this.emit("interrupt", new error_1.CrtError(error_code));
      }
      _on_connection_resumed(return_code, session_present) {
        this.emit("resume", return_code, session_present);
        let successCallbackData = { session_present, reason_code: return_code };
        this.emit("connection_success", successCallbackData);
      }
      _on_any_publish(topic, payload, dup, qos, retain) {
        this.emit("message", topic, payload, dup, qos, retain);
      }
      _on_connection_closed() {
        let closedCallbackData = {};
        this.emit("closed", closedCallbackData);
        this.close();
      }
      _on_connect_callback(resolve, reject, error_code, return_code, session_present) {
        if (error_code == 0 && return_code == 0) {
          resolve(session_present);
          this.emit("connect", session_present);
          let successCallbackData = { session_present, reason_code: return_code };
          this.emit("connection_success", successCallbackData);
        } else if (error_code != 0) {
          reject("Failed to connect: " + io.error_code_to_string(error_code));
          let failureCallbackData = { error: new error_1.CrtError(error_code) };
          this.emit("connection_failure", failureCallbackData);
        } else {
          reject("Server rejected connection.");
          let failureCallbackData = { error: new error_1.CrtError(5134) };
          this.emit("connection_failure", failureCallbackData);
        }
      }
      _on_puback_callback(resolve, reject, packet_id, error_code) {
        if (error_code == 0) {
          resolve({ packet_id });
        } else {
          reject("Failed to publish: " + io.error_code_to_string(error_code));
        }
      }
      _on_suback_callback(resolve, reject, packet_id, topic, qos, error_code) {
        if (error_code == 0) {
          resolve({ packet_id, topic, qos, error_code });
        } else {
          reject("Failed to subscribe: " + io.error_code_to_string(error_code));
        }
      }
      _on_unsuback_callback(resolve, reject, packet_id, error_code) {
        if (error_code == 0) {
          resolve({ packet_id });
        } else {
          reject("Failed to unsubscribe: " + io.error_code_to_string(error_code));
        }
      }
      _on_disconnect_callback(resolve) {
        resolve();
        this.emit("disconnect");
      }
    };
    exports.MqttClientConnection = MqttClientConnection;
    MqttClientConnection.CONNECT = "connect";
    MqttClientConnection.DISCONNECT = "disconnect";
    MqttClientConnection.ERROR = "error";
    MqttClientConnection.INTERRUPT = "interrupt";
    MqttClientConnection.RESUME = "resume";
    MqttClientConnection.MESSAGE = "message";
    MqttClientConnection.CONNECTION_SUCCESS = "connection_success";
    MqttClientConnection.CONNECTION_FAILURE = "connection_failure";
    MqttClientConnection.CLOSED = "closed";
  }
});

// ../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/aws-crt@1.18.0/node_modules/aws-crt/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CrtError = exports.resource_safety = exports.promise = exports.platform = exports.mqtt5 = exports.mqtt = exports.iot = exports.io = exports.http = exports.eventstream = exports.crt = exports.crypto = exports.checksums = exports.cancel = exports.auth = void 0;
    var cancel = __importStar2(require_cancel());
    exports.cancel = cancel;
    var platform = __importStar2(require_platform());
    exports.platform = platform;
    var promise = __importStar2(require_promise());
    exports.promise = promise;
    var resource_safety = __importStar2(require_resource_safety());
    exports.resource_safety = resource_safety;
    var auth = __importStar2(require_auth());
    exports.auth = auth;
    var checksums = __importStar2(require_checksums());
    exports.checksums = checksums;
    var crt = __importStar2(require_crt());
    exports.crt = crt;
    var crypto4 = __importStar2(require_crypto());
    exports.crypto = crypto4;
    var eventstream = __importStar2(require_eventstream());
    exports.eventstream = eventstream;
    var http = __importStar2(require_http2());
    exports.http = http;
    var io = __importStar2(require_io2());
    exports.io = io;
    var iot = __importStar2(require_iot());
    exports.iot = iot;
    var mqtt = __importStar2(require_mqtt2());
    exports.mqtt = mqtt;
    var mqtt5 = __importStar2(require_mqtt52());
    exports.mqtt5 = mqtt5;
    var error_1 = require_error();
    Object.defineProperty(exports, "CrtError", { enumerable: true, get: function() {
      return error_1.CrtError;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof __require === "function" && typeof module !== "undefined" && module.require && require_dist()) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-user-agent-node@3.272.0/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs30();
    var os_1 = __require("os");
    var process_1 = __require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js
var require_fromBase64 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports.fromBase64 = fromBase64;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js
var require_toBase64 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs21();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports.toBase64 = toBase64;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-base64@3.208.0/node_modules/@aws-sdk/util-base64/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports);
    tslib_1.__exportStar(require_toBase64(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json
var require_partitions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports, module) {
    module.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "ap-southeast-4": {
            description: "Asia Pacific (Melbourne)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }],
      version: "1.1"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js
var require_partition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var { partitions } = partitions_json_1.default;
    var DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    var partition = (value) => {
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports.partition = partition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js
var require_debugId = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.debugId = void 0;
    exports.debugId = "endpoints";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js
var require_toDebugString = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports.toDebugString = toDebugString;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js
var require_debug = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports);
    tslib_1.__exportStar(require_toDebugString(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js
var require_EndpointError = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports.EndpointError = EndpointError;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js
var require_EndpointRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js
var require_ErrorRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js
var require_RuleSetObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js
var require_TreeRuleObject = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js
var require_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js
var require_types5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports);
    tslib_1.__exportStar(require_RuleSetObject(), exports);
    tslib_1.__exportStar(require_TreeRuleObject(), exports);
    tslib_1.__exportStar(require_shared(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js
var require_isIpAddress = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports.isIpAddress = isIpAddress;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js
var require_isValidHostLabel = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports.isValidHostLabel = isValidHostLabel;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js
var require_isVirtualHostableS3Bucket = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js
var require_parseArn = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports.parseArn = parseArn;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js
var require_aws = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports);
    tslib_1.__exportStar(require_parseArn(), exports);
    tslib_1.__exportStar(require_partition(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js
var require_booleanEquals = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports.booleanEquals = booleanEquals;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js
var require_getAttrPathList = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttrPathList = void 0;
    var types_1 = require_types5();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports.getAttrPathList = getAttrPathList;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js
var require_getAttr = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttr = void 0;
    var types_1 = require_types5();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports.getAttr = getAttr;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js
var require_isSet = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = void 0;
    var isSet = (value) => value != null;
    exports.isSet = isSet;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js
var require_not = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.not = void 0;
    var not = (value) => !value;
    exports.not = not;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/abort.js
var require_abort = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/auth.js
var require_auth2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpAuthLocation = void 0;
    var HttpAuthLocation;
    (function(HttpAuthLocation2) {
      HttpAuthLocation2["HEADER"] = "header";
      HttpAuthLocation2["QUERY"] = "query";
    })(HttpAuthLocation = exports.HttpAuthLocation || (exports.HttpAuthLocation = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/checksum.js
var require_checksum = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/client.js
var require_client2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/command.js
var require_command2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/credentials.js
var require_credentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/crypto.js
var require_crypto2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/dns.js
var require_dns = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/dns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HostAddressType = void 0;
    var HostAddressType;
    (function(HostAddressType2) {
      HostAddressType2["AAAA"] = "AAAA";
      HostAddressType2["A"] = "A";
    })(HostAddressType = exports.HostAddressType || (exports.HostAddressType = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/endpoint.js
var require_endpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports.EndpointURLScheme || (exports.EndpointURLScheme = {}));
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/eventStream.js
var require_eventStream = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/http.js
var require_http3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/http.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js
var require_AnonymousIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js
var require_AwsCredentialIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js
var require_Identity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js
var require_LoginIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js
var require_TokenIdentity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/index.js
var require_identity = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports);
    tslib_1.__exportStar(require_Identity(), exports);
    tslib_1.__exportStar(require_LoginIdentity(), exports);
    tslib_1.__exportStar(require_TokenIdentity(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/logger.js
var require_logger = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/middleware.js
var require_middleware2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/pagination.js
var require_pagination = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/profile.js
var require_profile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/request.js
var require_request = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/response.js
var require_response = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/retry.js
var require_retry2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/serde.js
var require_serde = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/shapes.js
var require_shapes = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/signature.js
var require_signature = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/stream.js
var require_stream = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/token.js
var require_token = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/transfer.js
var require_transfer = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/util.js
var require_util3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+types@3.272.0/node_modules/@aws-sdk/types/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports);
    tslib_1.__exportStar(require_auth2(), exports);
    tslib_1.__exportStar(require_checksum(), exports);
    tslib_1.__exportStar(require_client2(), exports);
    tslib_1.__exportStar(require_command2(), exports);
    tslib_1.__exportStar(require_credentials(), exports);
    tslib_1.__exportStar(require_crypto2(), exports);
    tslib_1.__exportStar(require_dns(), exports);
    tslib_1.__exportStar(require_endpoint(), exports);
    tslib_1.__exportStar(require_eventStream(), exports);
    tslib_1.__exportStar(require_http3(), exports);
    tslib_1.__exportStar(require_identity(), exports);
    tslib_1.__exportStar(require_logger(), exports);
    tslib_1.__exportStar(require_middleware2(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    tslib_1.__exportStar(require_profile(), exports);
    tslib_1.__exportStar(require_request(), exports);
    tslib_1.__exportStar(require_response(), exports);
    tslib_1.__exportStar(require_retry2(), exports);
    tslib_1.__exportStar(require_serde(), exports);
    tslib_1.__exportStar(require_shapes(), exports);
    tslib_1.__exportStar(require_signature(), exports);
    tslib_1.__exportStar(require_stream(), exports);
    tslib_1.__exportStar(require_token(), exports);
    tslib_1.__exportStar(require_transfer(), exports);
    tslib_1.__exportStar(require_util3(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js
var require_parseURL = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseURL = void 0;
    var types_1 = require_dist_cjs39();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url2 = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url2.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url2;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports.parseURL = parseURL;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js
var require_stringEquals = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports.stringEquals = stringEquals;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js
var require_substring = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports.substring = substring;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js
var require_uriEncode = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports.uriEncode = uriEncode;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports);
    tslib_1.__exportStar(require_getAttr(), exports);
    tslib_1.__exportStar(require_isSet(), exports);
    tslib_1.__exportStar(require_isValidHostLabel(), exports);
    tslib_1.__exportStar(require_not(), exports);
    tslib_1.__exportStar(require_parseURL(), exports);
    tslib_1.__exportStar(require_stringEquals(), exports);
    tslib_1.__exportStar(require_substring(), exports);
    tslib_1.__exportStar(require_uriEncode(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js
var require_evaluateTemplate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports.evaluateTemplate = evaluateTemplate;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js
var require_getReferenceValue = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports.getReferenceValue = getReferenceValue;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js
var require_evaluateExpression = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateExpression = void 0;
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports.evaluateExpression = evaluateExpression;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js
var require_callFunction = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports.callFunction = callFunction;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js
var require_evaluateCondition = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports.evaluateCondition = evaluateCondition;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js
var require_evaluateConditions = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports.evaluateConditions = evaluateConditions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js
var require_getEndpointHeaders = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointHeaders = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports.getEndpointHeaders = getEndpointHeaders;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js
var require_getEndpointProperty = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperty = void 0;
    var types_1 = require_types5();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports.getEndpointProperty = getEndpointProperty;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js
var require_getEndpointProperties = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports.getEndpointProperties = getEndpointProperties;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js
var require_getEndpointUrl = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointUrl = void 0;
    var types_1 = require_types5();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports.getEndpointUrl = getEndpointUrl;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js
var require_evaluateEndpointRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url: url2, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url2, endpointRuleOptions)
      };
    };
    exports.evaluateEndpointRule = evaluateEndpointRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js
var require_evaluateErrorRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateErrorRule = void 0;
    var types_1 = require_types5();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports.evaluateErrorRule = evaluateErrorRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js
var require_evaluateTreeRule = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports.evaluateTreeRule = evaluateTreeRule;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js
var require_evaluateRules = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateRules = void 0;
    var types_1 = require_types5();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports.evaluateRules = evaluateRules;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js
var require_resolveEndpoint = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types5();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger: logger2 } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger: logger2, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, debug_1.debugId, `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports.resolveEndpoint = resolveEndpoint;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-endpoints@3.272.0/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports);
    tslib_1.__exportStar(require_resolveEndpoint(), exports);
    tslib_1.__exportStar(require_types5(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js
var require_ruleset = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_imds_1 = require_dist_cjs31();
    var node_config_provider_1 = require_dist_cjs30();
    var property_provider_1 = require_dist_cjs18();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-defaults-mode-node@3.279.0/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso@3.279.0/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js
var require_constants8 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REFRESH_MESSAGE = exports.EXPIRE_WINDOW_MS = void 0;
    exports.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js
var require_SSOOIDCServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOOIDCServiceException = class _SSOOIDCServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _SSOOIDCServiceException.prototype);
      }
    };
    exports.SSOOIDCServiceException = SSOOIDCServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js
var require_models_04 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationResponseFilterSensitiveLog = exports.StartDeviceAuthorizationRequestFilterSensitiveLog = exports.RegisterClientResponseFilterSensitiveLog = exports.RegisterClientRequestFilterSensitiveLog = exports.CreateTokenResponseFilterSensitiveLog = exports.CreateTokenRequestFilterSensitiveLog = exports.InvalidClientMetadataException = exports.UnsupportedGrantTypeException = exports.UnauthorizedClientException = exports.SlowDownException = exports.InvalidScopeException = exports.InvalidRequestException = exports.InvalidGrantException = exports.InvalidClientException = exports.InternalServerException = exports.ExpiredTokenException = exports.AuthorizationPendingException = exports.AccessDeniedException = void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class _AccessDeniedException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class _AuthorizationPendingException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class _ExpiredTokenException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class _InternalServerException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, _InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InternalServerException = InternalServerException;
    var InvalidClientException = class _InvalidClientException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class _InvalidGrantException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class _InvalidRequestException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class _InvalidScopeException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class _SlowDownException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class _UnauthorizedClientException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class _UnsupportedGrantTypeException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class _InvalidClientMetadataException extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports.InvalidClientMetadataException = InvalidClientMetadataException;
    var CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateTokenRequestFilterSensitiveLog = CreateTokenRequestFilterSensitiveLog;
    var CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateTokenResponseFilterSensitiveLog = CreateTokenResponseFilterSensitiveLog;
    var RegisterClientRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterClientRequestFilterSensitiveLog = RegisterClientRequestFilterSensitiveLog;
    var RegisterClientResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterClientResponseFilterSensitiveLog = RegisterClientResponseFilterSensitiveLog;
    var StartDeviceAuthorizationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartDeviceAuthorizationRequestFilterSensitiveLog = StartDeviceAuthorizationRequestFilterSensitiveLog;
    var StartDeviceAuthorizationResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StartDeviceAuthorizationResponseFilterSensitiveLog = StartDeviceAuthorizationResponseFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson13 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1StartDeviceAuthorizationCommand = exports.deserializeAws_restJson1RegisterClientCommand = exports.deserializeAws_restJson1CreateTokenCommand = exports.serializeAws_restJson1StartDeviceAuthorizationCommand = exports.serializeAws_restJson1RegisterClientCommand = exports.serializeAws_restJson1CreateTokenCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var serializeAws_restJson1CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.code != null && { code: input.code },
        ...input.deviceCode != null && { deviceCode: input.deviceCode },
        ...input.grantType != null && { grantType: input.grantType },
        ...input.redirectUri != null && { redirectUri: input.redirectUri },
        ...input.refreshToken != null && { refreshToken: input.refreshToken },
        ...input.scope != null && { scope: serializeAws_restJson1Scopes(input.scope, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1CreateTokenCommand = serializeAws_restJson1CreateTokenCommand;
    var serializeAws_restJson1RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify({
        ...input.clientName != null && { clientName: input.clientName },
        ...input.clientType != null && { clientType: input.clientType },
        ...input.scopes != null && { scopes: serializeAws_restJson1Scopes(input.scopes, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1RegisterClientCommand = serializeAws_restJson1RegisterClientCommand;
    var serializeAws_restJson1StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.startUrl != null && { startUrl: input.startUrl }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1StartDeviceAuthorizationCommand = serializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateTokenCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accessToken != null) {
        contents.accessToken = (0, smithy_client_1.expectString)(data.accessToken);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.idToken != null) {
        contents.idToken = (0, smithy_client_1.expectString)(data.idToken);
      }
      if (data.refreshToken != null) {
        contents.refreshToken = (0, smithy_client_1.expectString)(data.refreshToken);
      }
      if (data.tokenType != null) {
        contents.tokenType = (0, smithy_client_1.expectString)(data.tokenType);
      }
      return contents;
    };
    exports.deserializeAws_restJson1CreateTokenCommand = deserializeAws_restJson1CreateTokenCommand;
    var deserializeAws_restJson1CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await deserializeAws_restJson1AuthorizationPendingExceptionResponse(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await deserializeAws_restJson1ExpiredTokenExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await deserializeAws_restJson1InvalidGrantExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RegisterClientCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.authorizationEndpoint != null) {
        contents.authorizationEndpoint = (0, smithy_client_1.expectString)(data.authorizationEndpoint);
      }
      if (data.clientId != null) {
        contents.clientId = (0, smithy_client_1.expectString)(data.clientId);
      }
      if (data.clientIdIssuedAt != null) {
        contents.clientIdIssuedAt = (0, smithy_client_1.expectLong)(data.clientIdIssuedAt);
      }
      if (data.clientSecret != null) {
        contents.clientSecret = (0, smithy_client_1.expectString)(data.clientSecret);
      }
      if (data.clientSecretExpiresAt != null) {
        contents.clientSecretExpiresAt = (0, smithy_client_1.expectLong)(data.clientSecretExpiresAt);
      }
      if (data.tokenEndpoint != null) {
        contents.tokenEndpoint = (0, smithy_client_1.expectString)(data.tokenEndpoint);
      }
      return contents;
    };
    exports.deserializeAws_restJson1RegisterClientCommand = deserializeAws_restJson1RegisterClientCommand;
    var deserializeAws_restJson1RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await deserializeAws_restJson1InvalidClientMetadataExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.deviceCode != null) {
        contents.deviceCode = (0, smithy_client_1.expectString)(data.deviceCode);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.interval != null) {
        contents.interval = (0, smithy_client_1.expectInt32)(data.interval);
      }
      if (data.userCode != null) {
        contents.userCode = (0, smithy_client_1.expectString)(data.userCode);
      }
      if (data.verificationUri != null) {
        contents.verificationUri = (0, smithy_client_1.expectString)(data.verificationUri);
      }
      if (data.verificationUriComplete != null) {
        contents.verificationUriComplete = (0, smithy_client_1.expectString)(data.verificationUriComplete);
      }
      return contents;
    };
    exports.deserializeAws_restJson1StartDeviceAuthorizationCommand = deserializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AuthorizationPendingExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientMetadataExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidGrantExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidScopeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SlowDownExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1Scopes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js
var require_CreateTokenCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var CreateTokenCommand = class _CreateTokenCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateTokenCommand)(output, context);
      }
    };
    exports.CreateTokenCommand = CreateTokenCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js
var require_RegisterClientCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var RegisterClientCommand = class _RegisterClientCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterClientRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterClientResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RegisterClientCommand)(output, context);
      }
    };
    exports.RegisterClientCommand = RegisterClientCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js
var require_StartDeviceAuthorizationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson13();
    var StartDeviceAuthorizationCommand = class _StartDeviceAuthorizationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1StartDeviceAuthorizationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1StartDeviceAuthorizationCommand)(output, context);
      }
    };
    exports.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/package.json
var require_package5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js
var require_ruleset2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "SSO OIDC",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package5());
    var config_resolver_1 = require_dist_cjs10();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js
var require_SSOOIDCClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOOIDCClient = SSOOIDCClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js
var require_SSOOIDC = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDC = void 0;
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 = require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {
      createToken(args, optionsOrCb, cb) {
        const command = new CreateTokenCommand_1.CreateTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerClient(args, optionsOrCb, cb) {
        const command = new RegisterClientCommand_1.RegisterClientCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDeviceAuthorization(args, optionsOrCb, cb) {
        const command = new StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSOOIDC = SSOOIDC;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sso-oidc@3.279.0/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDC(), exports);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports, "SSOOIDCServiceException", { enumerable: true, get: function() {
      return SSOOIDCServiceException_1.SSOOIDCServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js
var require_getSsoOidcClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs43();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports.getSsoOidcClient = getSsoOidcClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js
var require_getNewSsoOidcToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs43();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js
var require_validateTokenExpiry = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs18();
    var constants_1 = require_constants8();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenExpiry = validateTokenExpiry;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js
var require_validateTokenKey = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs18();
    var constants_1 = require_constants8();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports.validateTokenKey = validateTokenKey;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js
var require_writeSSOTokenToFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var fs_1 = __require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js
var require_fromSso = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSso = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var constants_1 = require_constants8();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports.fromSso = fromSso;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js
var require_fromStatic3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports.fromStatic = fromStatic;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js
var require_nodeProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports.nodeProvider = nodeProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+token-providers@3.279.0/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports);
    tslib_1.__exportStar(require_fromStatic3(), exports);
    tslib_1.__exportStar(require_nodeProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs42();
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var token_providers_1 = require_dist_cjs44();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-sso@3.279.0/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types6(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs45();
    var credential_provider_sso_2 = require_dist_cjs45();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs18();
    var fs_1 = __require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-web-identity@3.272.0/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs46();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs18();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-ini@3.279.0/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs31();
    var property_provider_1 = require_dist_cjs18();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs28();
    var credential_provider_ini_1 = require_dist_cjs47();
    var credential_provider_process_1 = require_dist_cjs32();
    var credential_provider_sso_1 = require_dist_cjs45();
    var credential_provider_web_identity_1 = require_dist_cjs46();
    var property_provider_1 = require_dist_cjs18();
    var shared_ini_file_loader_1 = require_dist_cjs29();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs48 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+credential-provider-node@3.279.0/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js
var require_ruleset3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var G = "required";
    var H = "type";
    var I = "fn";
    var J = "argv";
    var K = "ref";
    var L = "properties";
    var M = "headers";
    var a = false;
    var b = true;
    var c = "PartitionResult";
    var d = "tree";
    var e = "booleanEquals";
    var f = "stringEquals";
    var g = "sigv4";
    var h = "us-east-1";
    var i = "sts";
    var j = "endpoint";
    var k = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var l = "error";
    var m = "getAttr";
    var n = { [G]: false, [H]: "String" };
    var o = { [G]: true, "default": false, [H]: "Boolean" };
    var p = { [K]: "Region" };
    var q = { [K]: "UseFIPS" };
    var r = { [K]: "UseDualStack" };
    var s = { [I]: "isSet", [J]: [{ [K]: "Endpoint" }] };
    var t = { [K]: "Endpoint" };
    var u = { "url": "https://sts.amazonaws.com", [L]: { "authSchemes": [{ "name": g, "signingRegion": h, "signingName": i }] }, [M]: {} };
    var v = {};
    var w = { "conditions": [{ [I]: f, [J]: [p, "aws-global"] }], [j]: u, [H]: j };
    var x = { [I]: e, [J]: [q, true] };
    var y = { [I]: e, [J]: [r, true] };
    var z = { [I]: e, [J]: [true, { [I]: m, [J]: [{ [K]: c }, "supportsFIPS"] }] };
    var A = { [K]: c };
    var B = { [I]: e, [J]: [true, { [I]: m, [J]: [A, "supportsDualStack"] }] };
    var C = { "url": k, [L]: {}, [M]: {} };
    var D = [t];
    var E = [x];
    var F = [y];
    var _data = { version: "1.0", parameters: { Region: n, UseDualStack: o, UseFIPS: o, Endpoint: n, UseGlobalEndpoint: o }, rules: [{ conditions: [{ [I]: "aws.partition", [J]: [p], assign: c }], [H]: d, rules: [{ conditions: [{ [I]: e, [J]: [{ [K]: "UseGlobalEndpoint" }, b] }, { [I]: e, [J]: [q, a] }, { [I]: e, [J]: [r, a] }, { [I]: "not", [J]: [s] }], [H]: d, rules: [{ conditions: [{ [I]: f, [J]: [p, "ap-northeast-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-south-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-southeast-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "ap-southeast-2"] }], endpoint: u, [H]: j }, w, { conditions: [{ [I]: f, [J]: [p, "ca-central-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-central-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-north-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-2"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "eu-west-3"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "sa-east-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, h] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-east-2"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-west-1"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, "us-west-2"] }], endpoint: u, [H]: j }, { endpoint: { url: k, [L]: { authSchemes: [{ name: g, signingRegion: "{Region}", signingName: i }] }, [M]: v }, [H]: j }] }, { conditions: [s, { [I]: "parseURL", [J]: D, assign: "url" }], [H]: d, rules: [{ conditions: E, error: "Invalid Configuration: FIPS and custom endpoint are not supported", [H]: l }, { [H]: d, rules: [{ conditions: F, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", [H]: l }, { endpoint: { url: t, [L]: v, [M]: v }, [H]: j }] }] }, { conditions: [x, y], [H]: d, rules: [{ conditions: [z, B], [H]: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: v, [M]: v }, [H]: j }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", [H]: l }] }, { conditions: E, [H]: d, rules: [{ conditions: [z], [H]: d, rules: [{ [H]: d, rules: [{ conditions: [{ [I]: f, [J]: ["aws-us-gov", { [I]: m, [J]: [A, "name"] }] }], endpoint: C, [H]: j }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", [L]: v, [M]: v }, [H]: j }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", [H]: l }] }, { conditions: F, [H]: d, rules: [{ conditions: [B], [H]: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: v, [M]: v }, [H]: j }] }, { error: "DualStack is enabled but this partition does not support DualStack", [H]: l }] }, { [H]: d, rules: [w, { endpoint: C, [H]: j }] }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "STS",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_sdk_sts_1 = require_dist_cjs27();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class _STSClient extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: _STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.STS = STS;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs49 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-sts@3.279.0/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js
var require_ruleset4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = true;
    var b = false;
    var c = "String";
    var d = "PartitionResult";
    var e = "tree";
    var f = "error";
    var g = "endpoint";
    var h = { "required": true, "default": false, "type": "Boolean" };
    var i = { [s]: "Endpoint" };
    var j = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var k = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var l = {};
    var m = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: d }, "supportsFIPS"] }] };
    var n = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: d }, "supportsDualStack"] }] };
    var o = [j];
    var p = [k];
    var _data = { version: "1.0", parameters: { Region: { required: a, type: c }, UseDualStack: h, UseFIPS: h, Endpoint: { required: b, type: c } }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: d }], type: e, rules: [{ conditions: [{ [q]: "isSet", [r]: [i] }], type: e, rules: [{ conditions: o, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: f }, { type: e, rules: [{ conditions: p, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: f }, { endpoint: { url: i, properties: l, headers: l }, type: g }] }] }, { conditions: [j, k], type: e, rules: [{ conditions: [m, n], type: e, rules: [{ endpoint: { url: "https://lambda-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: g }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: f }] }, { conditions: o, type: e, rules: [{ conditions: [m], type: e, rules: [{ type: e, rules: [{ endpoint: { url: "https://lambda-fips.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: g }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: f }] }, { conditions: p, type: e, rules: [{ conditions: [n], type: e, rules: [{ endpoint: { url: "https://lambda.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: l, headers: l }, type: g }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: f }] }, { endpoint: { url: "https://lambda.{Region}.{PartitionResult#dnsSuffix}", properties: l, headers: l }, type: g }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2015-03-31",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "Lambda",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js
var require_runtimeConfig4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/LambdaClient.js
var require_LambdaClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/LambdaClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LambdaClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_signing_1 = require_dist_cjs25();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var LambdaClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.LambdaClient = LambdaClient2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/Lambda.js
var require_Lambda = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/Lambda.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lambda = void 0;
    var AddLayerVersionPermissionCommand_1 = require_AddLayerVersionPermissionCommand();
    var AddPermissionCommand_1 = require_AddPermissionCommand();
    var CreateAliasCommand_1 = require_CreateAliasCommand();
    var CreateCodeSigningConfigCommand_1 = require_CreateCodeSigningConfigCommand();
    var CreateEventSourceMappingCommand_1 = require_CreateEventSourceMappingCommand();
    var CreateFunctionCommand_1 = require_CreateFunctionCommand();
    var CreateFunctionUrlConfigCommand_1 = require_CreateFunctionUrlConfigCommand();
    var DeleteAliasCommand_1 = require_DeleteAliasCommand();
    var DeleteCodeSigningConfigCommand_1 = require_DeleteCodeSigningConfigCommand();
    var DeleteEventSourceMappingCommand_1 = require_DeleteEventSourceMappingCommand();
    var DeleteFunctionCodeSigningConfigCommand_1 = require_DeleteFunctionCodeSigningConfigCommand();
    var DeleteFunctionCommand_1 = require_DeleteFunctionCommand();
    var DeleteFunctionConcurrencyCommand_1 = require_DeleteFunctionConcurrencyCommand();
    var DeleteFunctionEventInvokeConfigCommand_1 = require_DeleteFunctionEventInvokeConfigCommand();
    var DeleteFunctionUrlConfigCommand_1 = require_DeleteFunctionUrlConfigCommand();
    var DeleteLayerVersionCommand_1 = require_DeleteLayerVersionCommand();
    var DeleteProvisionedConcurrencyConfigCommand_1 = require_DeleteProvisionedConcurrencyConfigCommand();
    var GetAccountSettingsCommand_1 = require_GetAccountSettingsCommand();
    var GetAliasCommand_1 = require_GetAliasCommand();
    var GetCodeSigningConfigCommand_1 = require_GetCodeSigningConfigCommand();
    var GetEventSourceMappingCommand_1 = require_GetEventSourceMappingCommand();
    var GetFunctionCodeSigningConfigCommand_1 = require_GetFunctionCodeSigningConfigCommand();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var GetFunctionConcurrencyCommand_1 = require_GetFunctionConcurrencyCommand();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var GetFunctionEventInvokeConfigCommand_1 = require_GetFunctionEventInvokeConfigCommand();
    var GetFunctionUrlConfigCommand_1 = require_GetFunctionUrlConfigCommand();
    var GetLayerVersionByArnCommand_1 = require_GetLayerVersionByArnCommand();
    var GetLayerVersionCommand_1 = require_GetLayerVersionCommand();
    var GetLayerVersionPolicyCommand_1 = require_GetLayerVersionPolicyCommand();
    var GetPolicyCommand_1 = require_GetPolicyCommand();
    var GetProvisionedConcurrencyConfigCommand_1 = require_GetProvisionedConcurrencyConfigCommand();
    var GetRuntimeManagementConfigCommand_1 = require_GetRuntimeManagementConfigCommand();
    var InvokeAsyncCommand_1 = require_InvokeAsyncCommand();
    var InvokeCommand_1 = require_InvokeCommand();
    var ListAliasesCommand_1 = require_ListAliasesCommand();
    var ListCodeSigningConfigsCommand_1 = require_ListCodeSigningConfigsCommand();
    var ListEventSourceMappingsCommand_1 = require_ListEventSourceMappingsCommand();
    var ListFunctionEventInvokeConfigsCommand_1 = require_ListFunctionEventInvokeConfigsCommand();
    var ListFunctionsByCodeSigningConfigCommand_1 = require_ListFunctionsByCodeSigningConfigCommand();
    var ListFunctionsCommand_1 = require_ListFunctionsCommand();
    var ListFunctionUrlConfigsCommand_1 = require_ListFunctionUrlConfigsCommand();
    var ListLayersCommand_1 = require_ListLayersCommand();
    var ListLayerVersionsCommand_1 = require_ListLayerVersionsCommand();
    var ListProvisionedConcurrencyConfigsCommand_1 = require_ListProvisionedConcurrencyConfigsCommand();
    var ListTagsCommand_1 = require_ListTagsCommand();
    var ListVersionsByFunctionCommand_1 = require_ListVersionsByFunctionCommand();
    var PublishLayerVersionCommand_1 = require_PublishLayerVersionCommand();
    var PublishVersionCommand_1 = require_PublishVersionCommand();
    var PutFunctionCodeSigningConfigCommand_1 = require_PutFunctionCodeSigningConfigCommand();
    var PutFunctionConcurrencyCommand_1 = require_PutFunctionConcurrencyCommand();
    var PutFunctionEventInvokeConfigCommand_1 = require_PutFunctionEventInvokeConfigCommand();
    var PutProvisionedConcurrencyConfigCommand_1 = require_PutProvisionedConcurrencyConfigCommand();
    var PutRuntimeManagementConfigCommand_1 = require_PutRuntimeManagementConfigCommand();
    var RemoveLayerVersionPermissionCommand_1 = require_RemoveLayerVersionPermissionCommand();
    var RemovePermissionCommand_1 = require_RemovePermissionCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateAliasCommand_1 = require_UpdateAliasCommand();
    var UpdateCodeSigningConfigCommand_1 = require_UpdateCodeSigningConfigCommand();
    var UpdateEventSourceMappingCommand_1 = require_UpdateEventSourceMappingCommand();
    var UpdateFunctionCodeCommand_1 = require_UpdateFunctionCodeCommand();
    var UpdateFunctionConfigurationCommand_1 = require_UpdateFunctionConfigurationCommand();
    var UpdateFunctionEventInvokeConfigCommand_1 = require_UpdateFunctionEventInvokeConfigCommand();
    var UpdateFunctionUrlConfigCommand_1 = require_UpdateFunctionUrlConfigCommand();
    var LambdaClient_1 = require_LambdaClient();
    var Lambda = class extends LambdaClient_1.LambdaClient {
      addLayerVersionPermission(args, optionsOrCb, cb) {
        const command = new AddLayerVersionPermissionCommand_1.AddLayerVersionPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      addPermission(args, optionsOrCb, cb) {
        const command = new AddPermissionCommand_1.AddPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createAlias(args, optionsOrCb, cb) {
        const command = new CreateAliasCommand_1.CreateAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new CreateCodeSigningConfigCommand_1.CreateCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createEventSourceMapping(args, optionsOrCb, cb) {
        const command = new CreateEventSourceMappingCommand_1.CreateEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createFunction(args, optionsOrCb, cb) {
        const command = new CreateFunctionCommand_1.CreateFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new CreateFunctionUrlConfigCommand_1.CreateFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteAlias(args, optionsOrCb, cb) {
        const command = new DeleteAliasCommand_1.DeleteAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new DeleteCodeSigningConfigCommand_1.DeleteCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteEventSourceMapping(args, optionsOrCb, cb) {
        const command = new DeleteEventSourceMappingCommand_1.DeleteEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunction(args, optionsOrCb, cb) {
        const command = new DeleteFunctionCommand_1.DeleteFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new DeleteFunctionCodeSigningConfigCommand_1.DeleteFunctionCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionConcurrency(args, optionsOrCb, cb) {
        const command = new DeleteFunctionConcurrencyCommand_1.DeleteFunctionConcurrencyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new DeleteFunctionEventInvokeConfigCommand_1.DeleteFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new DeleteFunctionUrlConfigCommand_1.DeleteFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteLayerVersion(args, optionsOrCb, cb) {
        const command = new DeleteLayerVersionCommand_1.DeleteLayerVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteProvisionedConcurrencyConfig(args, optionsOrCb, cb) {
        const command = new DeleteProvisionedConcurrencyConfigCommand_1.DeleteProvisionedConcurrencyConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccountSettings(args, optionsOrCb, cb) {
        const command = new GetAccountSettingsCommand_1.GetAccountSettingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAlias(args, optionsOrCb, cb) {
        const command = new GetAliasCommand_1.GetAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new GetCodeSigningConfigCommand_1.GetCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getEventSourceMapping(args, optionsOrCb, cb) {
        const command = new GetEventSourceMappingCommand_1.GetEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunction(args, optionsOrCb, cb) {
        const command = new GetFunctionCommand_1.GetFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new GetFunctionCodeSigningConfigCommand_1.GetFunctionCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionConcurrency(args, optionsOrCb, cb) {
        const command = new GetFunctionConcurrencyCommand_1.GetFunctionConcurrencyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionConfiguration(args, optionsOrCb, cb) {
        const command = new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new GetFunctionEventInvokeConfigCommand_1.GetFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new GetFunctionUrlConfigCommand_1.GetFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLayerVersion(args, optionsOrCb, cb) {
        const command = new GetLayerVersionCommand_1.GetLayerVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLayerVersionByArn(args, optionsOrCb, cb) {
        const command = new GetLayerVersionByArnCommand_1.GetLayerVersionByArnCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getLayerVersionPolicy(args, optionsOrCb, cb) {
        const command = new GetLayerVersionPolicyCommand_1.GetLayerVersionPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPolicy(args, optionsOrCb, cb) {
        const command = new GetPolicyCommand_1.GetPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getProvisionedConcurrencyConfig(args, optionsOrCb, cb) {
        const command = new GetProvisionedConcurrencyConfigCommand_1.GetProvisionedConcurrencyConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getRuntimeManagementConfig(args, optionsOrCb, cb) {
        const command = new GetRuntimeManagementConfigCommand_1.GetRuntimeManagementConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      invoke(args, optionsOrCb, cb) {
        const command = new InvokeCommand_1.InvokeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      invokeAsync(args, optionsOrCb, cb) {
        const command = new InvokeAsyncCommand_1.InvokeAsyncCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAliases(args, optionsOrCb, cb) {
        const command = new ListAliasesCommand_1.ListAliasesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listCodeSigningConfigs(args, optionsOrCb, cb) {
        const command = new ListCodeSigningConfigsCommand_1.ListCodeSigningConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listEventSourceMappings(args, optionsOrCb, cb) {
        const command = new ListEventSourceMappingsCommand_1.ListEventSourceMappingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctionEventInvokeConfigs(args, optionsOrCb, cb) {
        const command = new ListFunctionEventInvokeConfigsCommand_1.ListFunctionEventInvokeConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctions(args, optionsOrCb, cb) {
        const command = new ListFunctionsCommand_1.ListFunctionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctionsByCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new ListFunctionsByCodeSigningConfigCommand_1.ListFunctionsByCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listFunctionUrlConfigs(args, optionsOrCb, cb) {
        const command = new ListFunctionUrlConfigsCommand_1.ListFunctionUrlConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listLayers(args, optionsOrCb, cb) {
        const command = new ListLayersCommand_1.ListLayersCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listLayerVersions(args, optionsOrCb, cb) {
        const command = new ListLayerVersionsCommand_1.ListLayerVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listProvisionedConcurrencyConfigs(args, optionsOrCb, cb) {
        const command = new ListProvisionedConcurrencyConfigsCommand_1.ListProvisionedConcurrencyConfigsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTags(args, optionsOrCb, cb) {
        const command = new ListTagsCommand_1.ListTagsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listVersionsByFunction(args, optionsOrCb, cb) {
        const command = new ListVersionsByFunctionCommand_1.ListVersionsByFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      publishLayerVersion(args, optionsOrCb, cb) {
        const command = new PublishLayerVersionCommand_1.PublishLayerVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      publishVersion(args, optionsOrCb, cb) {
        const command = new PublishVersionCommand_1.PublishVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putFunctionCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new PutFunctionCodeSigningConfigCommand_1.PutFunctionCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putFunctionConcurrency(args, optionsOrCb, cb) {
        const command = new PutFunctionConcurrencyCommand_1.PutFunctionConcurrencyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new PutFunctionEventInvokeConfigCommand_1.PutFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putProvisionedConcurrencyConfig(args, optionsOrCb, cb) {
        const command = new PutProvisionedConcurrencyConfigCommand_1.PutProvisionedConcurrencyConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putRuntimeManagementConfig(args, optionsOrCb, cb) {
        const command = new PutRuntimeManagementConfigCommand_1.PutRuntimeManagementConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removeLayerVersionPermission(args, optionsOrCb, cb) {
        const command = new RemoveLayerVersionPermissionCommand_1.RemoveLayerVersionPermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      removePermission(args, optionsOrCb, cb) {
        const command = new RemovePermissionCommand_1.RemovePermissionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateAlias(args, optionsOrCb, cb) {
        const command = new UpdateAliasCommand_1.UpdateAliasCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateCodeSigningConfig(args, optionsOrCb, cb) {
        const command = new UpdateCodeSigningConfigCommand_1.UpdateCodeSigningConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateEventSourceMapping(args, optionsOrCb, cb) {
        const command = new UpdateEventSourceMappingCommand_1.UpdateEventSourceMappingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionCode(args, optionsOrCb, cb) {
        const command = new UpdateFunctionCodeCommand_1.UpdateFunctionCodeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionConfiguration(args, optionsOrCb, cb) {
        const command = new UpdateFunctionConfigurationCommand_1.UpdateFunctionConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionEventInvokeConfig(args, optionsOrCb, cb) {
        const command = new UpdateFunctionEventInvokeConfigCommand_1.UpdateFunctionEventInvokeConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateFunctionUrlConfig(args, optionsOrCb, cb) {
        const command = new UpdateFunctionUrlConfigCommand_1.UpdateFunctionUrlConfigCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.Lambda = Lambda;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/index.js
var require_commands4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AddLayerVersionPermissionCommand(), exports);
    tslib_1.__exportStar(require_AddPermissionCommand(), exports);
    tslib_1.__exportStar(require_CreateAliasCommand(), exports);
    tslib_1.__exportStar(require_CreateCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_CreateEventSourceMappingCommand(), exports);
    tslib_1.__exportStar(require_CreateFunctionCommand(), exports);
    tslib_1.__exportStar(require_CreateFunctionUrlConfigCommand(), exports);
    tslib_1.__exportStar(require_DeleteAliasCommand(), exports);
    tslib_1.__exportStar(require_DeleteCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_DeleteEventSourceMappingCommand(), exports);
    tslib_1.__exportStar(require_DeleteFunctionCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_DeleteFunctionCommand(), exports);
    tslib_1.__exportStar(require_DeleteFunctionConcurrencyCommand(), exports);
    tslib_1.__exportStar(require_DeleteFunctionEventInvokeConfigCommand(), exports);
    tslib_1.__exportStar(require_DeleteFunctionUrlConfigCommand(), exports);
    tslib_1.__exportStar(require_DeleteLayerVersionCommand(), exports);
    tslib_1.__exportStar(require_DeleteProvisionedConcurrencyConfigCommand(), exports);
    tslib_1.__exportStar(require_GetAccountSettingsCommand(), exports);
    tslib_1.__exportStar(require_GetAliasCommand(), exports);
    tslib_1.__exportStar(require_GetCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_GetEventSourceMappingCommand(), exports);
    tslib_1.__exportStar(require_GetFunctionCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_GetFunctionCommand(), exports);
    tslib_1.__exportStar(require_GetFunctionConcurrencyCommand(), exports);
    tslib_1.__exportStar(require_GetFunctionConfigurationCommand(), exports);
    tslib_1.__exportStar(require_GetFunctionEventInvokeConfigCommand(), exports);
    tslib_1.__exportStar(require_GetFunctionUrlConfigCommand(), exports);
    tslib_1.__exportStar(require_GetLayerVersionByArnCommand(), exports);
    tslib_1.__exportStar(require_GetLayerVersionCommand(), exports);
    tslib_1.__exportStar(require_GetLayerVersionPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetProvisionedConcurrencyConfigCommand(), exports);
    tslib_1.__exportStar(require_GetRuntimeManagementConfigCommand(), exports);
    tslib_1.__exportStar(require_InvokeAsyncCommand(), exports);
    tslib_1.__exportStar(require_InvokeCommand(), exports);
    tslib_1.__exportStar(require_ListAliasesCommand(), exports);
    tslib_1.__exportStar(require_ListCodeSigningConfigsCommand(), exports);
    tslib_1.__exportStar(require_ListEventSourceMappingsCommand(), exports);
    tslib_1.__exportStar(require_ListFunctionEventInvokeConfigsCommand(), exports);
    tslib_1.__exportStar(require_ListFunctionUrlConfigsCommand(), exports);
    tslib_1.__exportStar(require_ListFunctionsByCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_ListFunctionsCommand(), exports);
    tslib_1.__exportStar(require_ListLayerVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListLayersCommand(), exports);
    tslib_1.__exportStar(require_ListProvisionedConcurrencyConfigsCommand(), exports);
    tslib_1.__exportStar(require_ListTagsCommand(), exports);
    tslib_1.__exportStar(require_ListVersionsByFunctionCommand(), exports);
    tslib_1.__exportStar(require_PublishLayerVersionCommand(), exports);
    tslib_1.__exportStar(require_PublishVersionCommand(), exports);
    tslib_1.__exportStar(require_PutFunctionCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_PutFunctionConcurrencyCommand(), exports);
    tslib_1.__exportStar(require_PutFunctionEventInvokeConfigCommand(), exports);
    tslib_1.__exportStar(require_PutProvisionedConcurrencyConfigCommand(), exports);
    tslib_1.__exportStar(require_PutRuntimeManagementConfigCommand(), exports);
    tslib_1.__exportStar(require_RemoveLayerVersionPermissionCommand(), exports);
    tslib_1.__exportStar(require_RemovePermissionCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateAliasCommand(), exports);
    tslib_1.__exportStar(require_UpdateCodeSigningConfigCommand(), exports);
    tslib_1.__exportStar(require_UpdateEventSourceMappingCommand(), exports);
    tslib_1.__exportStar(require_UpdateFunctionCodeCommand(), exports);
    tslib_1.__exportStar(require_UpdateFunctionConfigurationCommand(), exports);
    tslib_1.__exportStar(require_UpdateFunctionEventInvokeConfigCommand(), exports);
    tslib_1.__exportStar(require_UpdateFunctionUrlConfigCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/models/index.js
var require_models4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListAliasesPaginator.js
var require_ListAliasesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListAliasesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAliases = void 0;
    var ListAliasesCommand_1 = require_ListAliasesCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAliasesCommand_1.ListAliasesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAliases(input, ...args);
    };
    async function* paginateListAliases(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListAliases = paginateListAliases;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListCodeSigningConfigsPaginator.js
var require_ListCodeSigningConfigsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListCodeSigningConfigsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListCodeSigningConfigs = void 0;
    var ListCodeSigningConfigsCommand_1 = require_ListCodeSigningConfigsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListCodeSigningConfigsCommand_1.ListCodeSigningConfigsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listCodeSigningConfigs(input, ...args);
    };
    async function* paginateListCodeSigningConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListCodeSigningConfigs = paginateListCodeSigningConfigs;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListEventSourceMappingsPaginator.js
var require_ListEventSourceMappingsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListEventSourceMappingsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListEventSourceMappings = void 0;
    var ListEventSourceMappingsCommand_1 = require_ListEventSourceMappingsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListEventSourceMappingsCommand_1.ListEventSourceMappingsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listEventSourceMappings(input, ...args);
    };
    async function* paginateListEventSourceMappings(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListEventSourceMappings = paginateListEventSourceMappings;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionEventInvokeConfigsPaginator.js
var require_ListFunctionEventInvokeConfigsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionEventInvokeConfigsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListFunctionEventInvokeConfigs = void 0;
    var ListFunctionEventInvokeConfigsCommand_1 = require_ListFunctionEventInvokeConfigsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionEventInvokeConfigsCommand_1.ListFunctionEventInvokeConfigsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listFunctionEventInvokeConfigs(input, ...args);
    };
    async function* paginateListFunctionEventInvokeConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListFunctionEventInvokeConfigs = paginateListFunctionEventInvokeConfigs;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionUrlConfigsPaginator.js
var require_ListFunctionUrlConfigsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionUrlConfigsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListFunctionUrlConfigs = void 0;
    var ListFunctionUrlConfigsCommand_1 = require_ListFunctionUrlConfigsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionUrlConfigsCommand_1.ListFunctionUrlConfigsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listFunctionUrlConfigs(input, ...args);
    };
    async function* paginateListFunctionUrlConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListFunctionUrlConfigs = paginateListFunctionUrlConfigs;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsByCodeSigningConfigPaginator.js
var require_ListFunctionsByCodeSigningConfigPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsByCodeSigningConfigPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListFunctionsByCodeSigningConfig = void 0;
    var ListFunctionsByCodeSigningConfigCommand_1 = require_ListFunctionsByCodeSigningConfigCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionsByCodeSigningConfigCommand_1.ListFunctionsByCodeSigningConfigCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listFunctionsByCodeSigningConfig(input, ...args);
    };
    async function* paginateListFunctionsByCodeSigningConfig(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListFunctionsByCodeSigningConfig = paginateListFunctionsByCodeSigningConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsPaginator.js
var require_ListFunctionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListFunctionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListFunctions = void 0;
    var ListFunctionsCommand_1 = require_ListFunctionsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListFunctionsCommand_1.ListFunctionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listFunctions(input, ...args);
    };
    async function* paginateListFunctions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListFunctions = paginateListFunctions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayerVersionsPaginator.js
var require_ListLayerVersionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayerVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListLayerVersions = void 0;
    var ListLayerVersionsCommand_1 = require_ListLayerVersionsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListLayerVersionsCommand_1.ListLayerVersionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listLayerVersions(input, ...args);
    };
    async function* paginateListLayerVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListLayerVersions = paginateListLayerVersions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayersPaginator.js
var require_ListLayersPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListLayersPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListLayers = void 0;
    var ListLayersCommand_1 = require_ListLayersCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListLayersCommand_1.ListLayersCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listLayers(input, ...args);
    };
    async function* paginateListLayers(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListLayers = paginateListLayers;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListProvisionedConcurrencyConfigsPaginator.js
var require_ListProvisionedConcurrencyConfigsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListProvisionedConcurrencyConfigsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListProvisionedConcurrencyConfigs = void 0;
    var ListProvisionedConcurrencyConfigsCommand_1 = require_ListProvisionedConcurrencyConfigsCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListProvisionedConcurrencyConfigsCommand_1.ListProvisionedConcurrencyConfigsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listProvisionedConcurrencyConfigs(input, ...args);
    };
    async function* paginateListProvisionedConcurrencyConfigs(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListProvisionedConcurrencyConfigs = paginateListProvisionedConcurrencyConfigs;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListVersionsByFunctionPaginator.js
var require_ListVersionsByFunctionPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/ListVersionsByFunctionPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListVersionsByFunction = void 0;
    var ListVersionsByFunctionCommand_1 = require_ListVersionsByFunctionCommand();
    var Lambda_1 = require_Lambda();
    var LambdaClient_1 = require_LambdaClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListVersionsByFunctionCommand_1.ListVersionsByFunctionCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listVersionsByFunction(input, ...args);
    };
    async function* paginateListVersionsByFunction(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.Marker = token;
        input["MaxItems"] = config.pageSize;
        if (config.client instanceof Lambda_1.Lambda) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof LambdaClient_1.LambdaClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected Lambda | LambdaClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListVersionsByFunction = paginateListVersionsByFunction;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/index.js
var require_pagination3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListAliasesPaginator(), exports);
    tslib_1.__exportStar(require_ListCodeSigningConfigsPaginator(), exports);
    tslib_1.__exportStar(require_ListEventSourceMappingsPaginator(), exports);
    tslib_1.__exportStar(require_ListFunctionEventInvokeConfigsPaginator(), exports);
    tslib_1.__exportStar(require_ListFunctionUrlConfigsPaginator(), exports);
    tslib_1.__exportStar(require_ListFunctionsByCodeSigningConfigPaginator(), exports);
    tslib_1.__exportStar(require_ListFunctionsPaginator(), exports);
    tslib_1.__exportStar(require_ListLayerVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListLayersPaginator(), exports);
    tslib_1.__exportStar(require_ListProvisionedConcurrencyConfigsPaginator(), exports);
    tslib_1.__exportStar(require_ListVersionsByFunctionPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils2();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs50 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+util-waiter@3.272.0/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter2(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActive.js
var require_waitForFunctionActive = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilFunctionActive = exports.waitForFunctionActive = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Active") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForFunctionActive = waitForFunctionActive;
    var waitUntilFunctionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilFunctionActive = waitUntilFunctionActive;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActiveV2.js
var require_waitForFunctionActiveV2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionActiveV2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilFunctionActiveV2 = exports.waitForFunctionActiveV2 = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand_1.GetFunctionCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Configuration.State;
          };
          if (returnComparator() === "Active") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.State;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.State;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionActiveV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForFunctionActiveV2 = waitForFunctionActiveV2;
    var waitUntilFunctionActiveV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilFunctionActiveV2 = waitUntilFunctionActiveV2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionExists.js
var require_waitForFunctionExists = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilFunctionExists = exports.waitForFunctionExists = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand_1.GetFunctionCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForFunctionExists = waitForFunctionExists;
    var waitUntilFunctionExists = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilFunctionExists = waitUntilFunctionExists;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdated.js
var require_waitForFunctionUpdated = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdated.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilFunctionUpdated = exports.waitForFunctionUpdated = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.LastUpdateStatus;
          };
          if (returnComparator() === "Successful") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.LastUpdateStatus;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.LastUpdateStatus;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionUpdated = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForFunctionUpdated = waitForFunctionUpdated;
    var waitUntilFunctionUpdated = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilFunctionUpdated = waitUntilFunctionUpdated;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdatedV2.js
var require_waitForFunctionUpdatedV2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForFunctionUpdatedV2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilFunctionUpdatedV2 = exports.waitForFunctionUpdatedV2 = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionCommand_1 = require_GetFunctionCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionCommand_1.GetFunctionCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Configuration.LastUpdateStatus;
          };
          if (returnComparator() === "Successful") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.LastUpdateStatus;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Configuration.LastUpdateStatus;
          };
          if (returnComparator() === "InProgress") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForFunctionUpdatedV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForFunctionUpdatedV2 = waitForFunctionUpdatedV2;
    var waitUntilFunctionUpdatedV2 = async (params, input) => {
      const serviceDefaults = { minDelay: 1, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilFunctionUpdatedV2 = waitUntilFunctionUpdatedV2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForPublishedVersionActive.js
var require_waitForPublishedVersionActive = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/waitForPublishedVersionActive.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilPublishedVersionActive = exports.waitForPublishedVersionActive = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var GetFunctionConfigurationCommand_1 = require_GetFunctionConfigurationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new GetFunctionConfigurationCommand_1.GetFunctionConfigurationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Active") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Failed") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.State;
          };
          if (returnComparator() === "Pending") {
            return { state: util_waiter_1.WaiterState.RETRY, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForPublishedVersionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForPublishedVersionActive = waitForPublishedVersionActive;
    var waitUntilPublishedVersionActive = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilPublishedVersionActive = waitUntilPublishedVersionActive;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForFunctionActive(), exports);
    tslib_1.__exportStar(require_waitForFunctionActiveV2(), exports);
    tslib_1.__exportStar(require_waitForFunctionExists(), exports);
    tslib_1.__exportStar(require_waitForFunctionUpdated(), exports);
    tslib_1.__exportStar(require_waitForFunctionUpdatedV2(), exports);
    tslib_1.__exportStar(require_waitForPublishedVersionActive(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/index.js
var require_dist_cjs51 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-lambda@3.279.0/node_modules/@aws-sdk/client-lambda/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LambdaServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Lambda(), exports);
    tslib_1.__exportStar(require_LambdaClient(), exports);
    tslib_1.__exportStar(require_commands4(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_pagination3(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var LambdaServiceException_1 = require_LambdaServiceException();
    Object.defineProperty(exports, "LambdaServiceException", { enumerable: true, get: function() {
      return LambdaServiceException_1.LambdaServiceException;
    } });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/EndpointParameters.js
var require_EndpointParameters5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/EndpointParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cloudformation"
      };
    };
    exports.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/package.json
var require_package6 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/package.json"(exports, module) {
    module.exports = {
      name: "@aws-sdk/client-cloudformation",
      description: "AWS SDK for JavaScript Cloudformation Client for Node.js, Browser and React Native",
      version: "3.279.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo cloudformation"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.279.0",
        "@aws-sdk/config-resolver": "3.272.0",
        "@aws-sdk/credential-provider-node": "3.279.0",
        "@aws-sdk/fetch-http-handler": "3.272.0",
        "@aws-sdk/hash-node": "3.272.0",
        "@aws-sdk/invalid-dependency": "3.272.0",
        "@aws-sdk/middleware-content-length": "3.272.0",
        "@aws-sdk/middleware-endpoint": "3.272.0",
        "@aws-sdk/middleware-host-header": "3.278.0",
        "@aws-sdk/middleware-logger": "3.272.0",
        "@aws-sdk/middleware-recursion-detection": "3.272.0",
        "@aws-sdk/middleware-retry": "3.272.0",
        "@aws-sdk/middleware-serde": "3.272.0",
        "@aws-sdk/middleware-signing": "3.272.0",
        "@aws-sdk/middleware-stack": "3.272.0",
        "@aws-sdk/middleware-user-agent": "3.272.0",
        "@aws-sdk/node-config-provider": "3.272.0",
        "@aws-sdk/node-http-handler": "3.272.0",
        "@aws-sdk/protocol-http": "3.272.0",
        "@aws-sdk/smithy-client": "3.279.0",
        "@aws-sdk/types": "3.272.0",
        "@aws-sdk/url-parser": "3.272.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.279.0",
        "@aws-sdk/util-defaults-mode-node": "3.279.0",
        "@aws-sdk/util-endpoints": "3.272.0",
        "@aws-sdk/util-retry": "3.272.0",
        "@aws-sdk/util-user-agent-browser": "3.272.0",
        "@aws-sdk/util-user-agent-node": "3.272.0",
        "@aws-sdk/util-utf8": "3.254.0",
        "@aws-sdk/util-waiter": "3.272.0",
        "fast-xml-parser": "4.1.2",
        tslib: "^2.3.1",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudformation",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-cloudformation"
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/ruleset.js
var require_ruleset5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/ruleset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ruleSet = void 0;
    var u = "fn";
    var v = "argv";
    var w = "ref";
    var a = true;
    var b = false;
    var c = "String";
    var d = "PartitionResult";
    var e = "tree";
    var f = "error";
    var g = "endpoint";
    var h = "getAttr";
    var i = "stringEquals";
    var j = { "required": true, "default": false, "type": "Boolean" };
    var k = { [w]: "Region" };
    var l = { [w]: "Endpoint" };
    var m = { [u]: "booleanEquals", [v]: [{ [w]: "UseFIPS" }, true] };
    var n = { [u]: "booleanEquals", [v]: [{ [w]: "UseDualStack" }, true] };
    var o = {};
    var p = { [u]: "booleanEquals", [v]: [true, { [u]: h, [v]: [{ [w]: d }, "supportsFIPS"] }] };
    var q = { [w]: d };
    var r = { [u]: "booleanEquals", [v]: [true, { [u]: h, [v]: [q, "supportsDualStack"] }] };
    var s = [m];
    var t = [n];
    var _data = { version: "1.0", parameters: { Region: { required: a, type: c }, UseDualStack: j, UseFIPS: j, Endpoint: { required: b, type: c } }, rules: [{ conditions: [{ [u]: "aws.partition", [v]: [k], assign: d }], type: e, rules: [{ conditions: [{ [u]: "isSet", [v]: [l] }], type: e, rules: [{ conditions: s, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: f }, { type: e, rules: [{ conditions: t, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: f }, { endpoint: { url: l, properties: o, headers: o }, type: g }] }] }, { conditions: [m, n], type: e, rules: [{ conditions: [p, r], type: e, rules: [{ type: e, rules: [{ endpoint: { url: "https://cloudformation-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: o, headers: o }, type: g }] }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: f }] }, { conditions: s, type: e, rules: [{ conditions: [p], type: e, rules: [{ type: e, rules: [{ conditions: [{ [u]: i, [v]: ["aws-us-gov", { [u]: h, [v]: [q, "name"] }] }], endpoint: { url: "https://cloudformation.{Region}.amazonaws.com", properties: o, headers: o }, type: g }, { endpoint: { url: "https://cloudformation-fips.{Region}.{PartitionResult#dnsSuffix}", properties: o, headers: o }, type: g }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: f }] }, { conditions: t, type: e, rules: [{ conditions: [r], type: e, rules: [{ type: e, rules: [{ endpoint: { url: "https://cloudformation.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: o, headers: o }, type: g }] }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: f }] }, { type: e, rules: [{ conditions: [{ [u]: i, [v]: [k, "us-gov-east-1"] }], endpoint: { url: "https://cloudformation.us-gov-east-1.amazonaws.com", properties: o, headers: o }, type: g }, { conditions: [{ [u]: i, [v]: [k, "us-gov-west-1"] }], endpoint: { url: "https://cloudformation.us-gov-west-1.amazonaws.com", properties: o, headers: o }, type: g }, { endpoint: { url: "https://cloudformation.{Region}.{PartitionResult#dnsSuffix}", properties: o, headers: o }, type: g }] }] }] };
    exports.ruleSet = _data;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/endpointResolver.js
var require_endpointResolver5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/endpoint/endpointResolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs40();
    var ruleset_1 = require_ruleset5();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports.defaultEndpointResolver = defaultEndpointResolver;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs38();
    var util_utf8_1 = require_dist_cjs22();
    var endpointResolver_1 = require_endpointResolver5();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2010-05-15",
      base64Decoder: config?.base64Decoder ?? util_base64_1.fromBase64,
      base64Encoder: config?.base64Encoder ?? util_base64_1.toBase64,
      disableHostPrefix: config?.disableHostPrefix ?? false,
      endpointProvider: config?.endpointProvider ?? endpointResolver_1.defaultEndpointResolver,
      logger: config?.logger ?? new smithy_client_1.NoOpLogger(),
      serviceId: config?.serviceId ?? "CloudFormation",
      urlParser: config?.urlParser ?? url_parser_1.parseUrl,
      utf8Decoder: config?.utf8Decoder ?? util_utf8_1.fromUtf8,
      utf8Encoder: config?.utf8Encoder ?? util_utf8_1.toUtf8
    });
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.js
var require_runtimeConfig5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package6());
    var client_sts_1 = require_dist_cjs49();
    var config_resolver_1 = require_dist_cjs10();
    var credential_provider_node_1 = require_dist_cjs48();
    var hash_node_1 = require_dist_cjs33();
    var middleware_retry_1 = require_dist_cjs17();
    var node_config_provider_1 = require_dist_cjs30();
    var node_http_handler_1 = require_dist_cjs35();
    var util_body_length_node_1 = require_dist_cjs36();
    var util_retry_1 = require_dist_cjs16();
    var util_user_agent_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared5();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs41();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: config?.maxAttempts ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: config?.region ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: config?.requestHandler ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: config?.retryMode ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: config?.sha256 ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: config?.streamCollector ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: config?.useFipsEndpoint ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/CloudFormationClient.js
var require_CloudFormationClient = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/CloudFormationClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudFormationClient = void 0;
    var config_resolver_1 = require_dist_cjs10();
    var middleware_content_length_1 = require_dist_cjs11();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs12();
    var middleware_logger_1 = require_dist_cjs13();
    var middleware_recursion_detection_1 = require_dist_cjs14();
    var middleware_retry_1 = require_dist_cjs17();
    var middleware_signing_1 = require_dist_cjs25();
    var middleware_user_agent_1 = require_dist_cjs26();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters5();
    var runtimeConfig_1 = require_runtimeConfig5();
    var CloudFormationClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.CloudFormationClient = CloudFormationClient2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/models/CloudFormationServiceException.js
var require_CloudFormationServiceException = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/models/CloudFormationServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudFormationServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var CloudFormationServiceException = class _CloudFormationServiceException extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, _CloudFormationServiceException.prototype);
      }
    };
    exports.CloudFormationServiceException = CloudFormationServiceException;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/models/models_0.js
var require_models_05 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StackInstanceStatus = exports.StackInstanceDetailedStatus = exports.ResourceStatus = exports.HookStatus = exports.StackDriftStatus = exports.StackDriftDetectionStatus = exports.PublisherStatus = exports.IdentityProvider = exports.RegistryType = exports.StackSetNotEmptyException = exports.InvalidChangeSetStatusException = exports.NameAlreadyExistsException = exports.PermissionModels = exports.CreatedButModifiedException = exports.StaleRequestException = exports.StackSetNotFoundException = exports.OperationInProgressException = exports.OperationIdAlreadyExistsException = exports.InvalidOperationException = exports.RegionConcurrencyType = exports.OnFailure = exports.LimitExceededException = exports.InsufficientCapabilitiesException = exports.ChangeSetType = exports.ExecutionStatus = exports.ChangeSetStatus = exports.ChangeSetNotFoundException = exports.ChangeSetHooksStatus = exports.HookTargetType = exports.HookInvocationPoint = exports.HookFailureMode = exports.ChangeType = exports.Replacement = exports.RequiresRecreation = exports.ResourceAttribute = exports.EvaluationType = exports.ChangeSource = exports.ChangeAction = exports.Category = exports.Capability = exports.TokenAlreadyExistsException = exports.CallAs = exports.TypeConfigurationNotFoundException = exports.AlreadyExistsException = exports.TypeNotFoundException = exports.CFNRegistryException = exports.VersionBump = exports.ThirdPartyType = exports.AccountGateStatus = exports.AccountFilterType = void 0;
    exports.ResourceToImportFilterSensitiveLog = exports.ParameterFilterSensitiveLog = exports.ContinueUpdateRollbackOutputFilterSensitiveLog = exports.ContinueUpdateRollbackInputFilterSensitiveLog = exports.ChangeSetSummaryFilterSensitiveLog = exports.ChangeSetHookFilterSensitiveLog = exports.ChangeSetHookTargetDetailsFilterSensitiveLog = exports.ChangeSetHookResourceTargetDetailsFilterSensitiveLog = exports.ChangeFilterSensitiveLog = exports.ResourceChangeFilterSensitiveLog = exports.ModuleInfoFilterSensitiveLog = exports.ResourceChangeDetailFilterSensitiveLog = exports.ResourceTargetDefinitionFilterSensitiveLog = exports.CancelUpdateStackInputFilterSensitiveLog = exports.BatchDescribeTypeConfigurationsOutputFilterSensitiveLog = exports.TypeConfigurationDetailsFilterSensitiveLog = exports.BatchDescribeTypeConfigurationsErrorFilterSensitiveLog = exports.BatchDescribeTypeConfigurationsInputFilterSensitiveLog = exports.TypeConfigurationIdentifierFilterSensitiveLog = exports.AutoDeploymentFilterSensitiveLog = exports.ActivateTypeOutputFilterSensitiveLog = exports.ActivateTypeInputFilterSensitiveLog = exports.LoggingConfigFilterSensitiveLog = exports.AccountLimitFilterSensitiveLog = exports.AccountGateResultFilterSensitiveLog = exports.ResourceSignalStatus = exports.HandlerErrorCode = exports.OperationStatus = exports.OperationStatusCheckFailedException = exports.InvalidStateTransitionException = exports.StackSetOperationResultStatus = exports.OperationResultFilterName = exports.StackInstanceFilterName = exports.StackNotFoundException = exports.TemplateStage = exports.RegistrationStatus = exports.Visibility = exports.TypeTestsStatus = exports.ProvisioningType = exports.DeprecatedStatus = exports.OperationNotFoundException = exports.StackSetOperationStatus = exports.StackSetOperationAction = exports.StackSetStatus = exports.StackSetDriftStatus = exports.StackSetDriftDetectionStatus = exports.StackStatus = exports.DifferenceType = exports.StackResourceDriftStatus = exports.StackInstanceNotFoundException = void 0;
    exports.StackResourceDriftFilterSensitiveLog = exports.PropertyDifferenceFilterSensitiveLog = exports.PhysicalResourceIdContextKeyValuePairFilterSensitiveLog = exports.DescribeStackResourceDriftsInputFilterSensitiveLog = exports.DescribeStackResourceOutputFilterSensitiveLog = exports.StackResourceDetailFilterSensitiveLog = exports.StackResourceDriftInformationFilterSensitiveLog = exports.DescribeStackResourceInputFilterSensitiveLog = exports.DescribeStackInstanceOutputFilterSensitiveLog = exports.StackInstanceFilterSensitiveLog = exports.StackInstanceComprehensiveStatusFilterSensitiveLog = exports.DescribeStackInstanceInputFilterSensitiveLog = exports.DescribeStackEventsOutputFilterSensitiveLog = exports.StackEventFilterSensitiveLog = exports.DescribeStackEventsInputFilterSensitiveLog = exports.DescribeStackDriftDetectionStatusOutputFilterSensitiveLog = exports.DescribeStackDriftDetectionStatusInputFilterSensitiveLog = exports.DescribePublisherOutputFilterSensitiveLog = exports.DescribePublisherInputFilterSensitiveLog = exports.DescribeChangeSetHooksOutputFilterSensitiveLog = exports.DescribeChangeSetHooksInputFilterSensitiveLog = exports.DescribeChangeSetOutputFilterSensitiveLog = exports.DescribeChangeSetInputFilterSensitiveLog = exports.DescribeAccountLimitsOutputFilterSensitiveLog = exports.DescribeAccountLimitsInputFilterSensitiveLog = exports.DeregisterTypeOutputFilterSensitiveLog = exports.DeregisterTypeInputFilterSensitiveLog = exports.DeleteStackSetOutputFilterSensitiveLog = exports.DeleteStackSetInputFilterSensitiveLog = exports.DeleteStackInstancesOutputFilterSensitiveLog = exports.DeleteStackInstancesInputFilterSensitiveLog = exports.DeleteStackInputFilterSensitiveLog = exports.DeleteChangeSetOutputFilterSensitiveLog = exports.DeleteChangeSetInputFilterSensitiveLog = exports.DeactivateTypeOutputFilterSensitiveLog = exports.DeactivateTypeInputFilterSensitiveLog = exports.CreateStackSetOutputFilterSensitiveLog = exports.CreateStackSetInputFilterSensitiveLog = exports.ManagedExecutionFilterSensitiveLog = exports.CreateStackInstancesOutputFilterSensitiveLog = exports.CreateStackInstancesInputFilterSensitiveLog = exports.StackSetOperationPreferencesFilterSensitiveLog = exports.DeploymentTargetsFilterSensitiveLog = exports.CreateStackOutputFilterSensitiveLog = exports.CreateStackInputFilterSensitiveLog = exports.CreateChangeSetOutputFilterSensitiveLog = exports.CreateChangeSetInputFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.RollbackConfigurationFilterSensitiveLog = exports.RollbackTriggerFilterSensitiveLog = void 0;
    exports.ListImportsOutputFilterSensitiveLog = exports.ListImportsInputFilterSensitiveLog = exports.ListExportsOutputFilterSensitiveLog = exports.ExportFilterSensitiveLog = exports.ListExportsInputFilterSensitiveLog = exports.ListChangeSetsOutputFilterSensitiveLog = exports.ListChangeSetsInputFilterSensitiveLog = exports.ImportStacksToStackSetOutputFilterSensitiveLog = exports.ImportStacksToStackSetInputFilterSensitiveLog = exports.GetTemplateSummaryOutputFilterSensitiveLog = exports.ResourceIdentifierSummaryFilterSensitiveLog = exports.ParameterDeclarationFilterSensitiveLog = exports.ParameterConstraintsFilterSensitiveLog = exports.GetTemplateSummaryInputFilterSensitiveLog = exports.GetTemplateOutputFilterSensitiveLog = exports.GetTemplateInputFilterSensitiveLog = exports.GetStackPolicyOutputFilterSensitiveLog = exports.GetStackPolicyInputFilterSensitiveLog = exports.ExecuteChangeSetOutputFilterSensitiveLog = exports.ExecuteChangeSetInputFilterSensitiveLog = exports.EstimateTemplateCostOutputFilterSensitiveLog = exports.EstimateTemplateCostInputFilterSensitiveLog = exports.DetectStackSetDriftOutputFilterSensitiveLog = exports.DetectStackSetDriftInputFilterSensitiveLog = exports.DetectStackResourceDriftOutputFilterSensitiveLog = exports.DetectStackResourceDriftInputFilterSensitiveLog = exports.DetectStackDriftOutputFilterSensitiveLog = exports.DetectStackDriftInputFilterSensitiveLog = exports.DescribeTypeRegistrationOutputFilterSensitiveLog = exports.DescribeTypeRegistrationInputFilterSensitiveLog = exports.DescribeTypeOutputFilterSensitiveLog = exports.RequiredActivatedTypeFilterSensitiveLog = exports.DescribeTypeInputFilterSensitiveLog = exports.DescribeStackSetOperationOutputFilterSensitiveLog = exports.StackSetOperationFilterSensitiveLog = exports.StackSetOperationStatusDetailsFilterSensitiveLog = exports.DescribeStackSetOperationInputFilterSensitiveLog = exports.DescribeStackSetOutputFilterSensitiveLog = exports.StackSetFilterSensitiveLog = exports.StackSetDriftDetectionDetailsFilterSensitiveLog = exports.DescribeStackSetInputFilterSensitiveLog = exports.DescribeStacksOutputFilterSensitiveLog = exports.StackFilterSensitiveLog = exports.OutputFilterSensitiveLog = exports.StackDriftInformationFilterSensitiveLog = exports.DescribeStacksInputFilterSensitiveLog = exports.DescribeStackResourcesOutputFilterSensitiveLog = exports.StackResourceFilterSensitiveLog = exports.DescribeStackResourcesInputFilterSensitiveLog = exports.DescribeStackResourceDriftsOutputFilterSensitiveLog = void 0;
    exports.TestTypeInputFilterSensitiveLog = exports.StopStackSetOperationOutputFilterSensitiveLog = exports.StopStackSetOperationInputFilterSensitiveLog = exports.SignalResourceInputFilterSensitiveLog = exports.SetTypeDefaultVersionOutputFilterSensitiveLog = exports.SetTypeDefaultVersionInputFilterSensitiveLog = exports.SetTypeConfigurationOutputFilterSensitiveLog = exports.SetTypeConfigurationInputFilterSensitiveLog = exports.SetStackPolicyInputFilterSensitiveLog = exports.RollbackStackOutputFilterSensitiveLog = exports.RollbackStackInputFilterSensitiveLog = exports.RegisterTypeOutputFilterSensitiveLog = exports.RegisterTypeInputFilterSensitiveLog = exports.RegisterPublisherOutputFilterSensitiveLog = exports.RegisterPublisherInputFilterSensitiveLog = exports.RecordHandlerProgressOutputFilterSensitiveLog = exports.RecordHandlerProgressInputFilterSensitiveLog = exports.PublishTypeOutputFilterSensitiveLog = exports.PublishTypeInputFilterSensitiveLog = exports.ListTypeVersionsOutputFilterSensitiveLog = exports.TypeVersionSummaryFilterSensitiveLog = exports.ListTypeVersionsInputFilterSensitiveLog = exports.ListTypesOutputFilterSensitiveLog = exports.TypeSummaryFilterSensitiveLog = exports.ListTypesInputFilterSensitiveLog = exports.TypeFiltersFilterSensitiveLog = exports.ListTypeRegistrationsOutputFilterSensitiveLog = exports.ListTypeRegistrationsInputFilterSensitiveLog = exports.ListStackSetsOutputFilterSensitiveLog = exports.StackSetSummaryFilterSensitiveLog = exports.ListStackSetsInputFilterSensitiveLog = exports.ListStackSetOperationsOutputFilterSensitiveLog = exports.StackSetOperationSummaryFilterSensitiveLog = exports.ListStackSetOperationsInputFilterSensitiveLog = exports.ListStackSetOperationResultsOutputFilterSensitiveLog = exports.StackSetOperationResultSummaryFilterSensitiveLog = exports.ListStackSetOperationResultsInputFilterSensitiveLog = exports.OperationResultFilterFilterSensitiveLog = exports.ListStacksOutputFilterSensitiveLog = exports.StackSummaryFilterSensitiveLog = exports.StackDriftInformationSummaryFilterSensitiveLog = exports.ListStacksInputFilterSensitiveLog = exports.ListStackResourcesOutputFilterSensitiveLog = exports.StackResourceSummaryFilterSensitiveLog = exports.StackResourceDriftInformationSummaryFilterSensitiveLog = exports.ListStackResourcesInputFilterSensitiveLog = exports.ListStackInstancesOutputFilterSensitiveLog = exports.StackInstanceSummaryFilterSensitiveLog = exports.ListStackInstancesInputFilterSensitiveLog = exports.StackInstanceFilterFilterSensitiveLog = void 0;
    exports.ValidateTemplateOutputFilterSensitiveLog = exports.TemplateParameterFilterSensitiveLog = exports.ValidateTemplateInputFilterSensitiveLog = exports.UpdateTerminationProtectionOutputFilterSensitiveLog = exports.UpdateTerminationProtectionInputFilterSensitiveLog = exports.UpdateStackSetOutputFilterSensitiveLog = exports.UpdateStackSetInputFilterSensitiveLog = exports.UpdateStackInstancesOutputFilterSensitiveLog = exports.UpdateStackInstancesInputFilterSensitiveLog = exports.UpdateStackOutputFilterSensitiveLog = exports.UpdateStackInputFilterSensitiveLog = exports.TestTypeOutputFilterSensitiveLog = void 0;
    var CloudFormationServiceException_1 = require_CloudFormationServiceException();
    var AccountFilterType;
    (function(AccountFilterType2) {
      AccountFilterType2["DIFFERENCE"] = "DIFFERENCE";
      AccountFilterType2["INTERSECTION"] = "INTERSECTION";
      AccountFilterType2["NONE"] = "NONE";
      AccountFilterType2["UNION"] = "UNION";
    })(AccountFilterType = exports.AccountFilterType || (exports.AccountFilterType = {}));
    var AccountGateStatus;
    (function(AccountGateStatus2) {
      AccountGateStatus2["FAILED"] = "FAILED";
      AccountGateStatus2["SKIPPED"] = "SKIPPED";
      AccountGateStatus2["SUCCEEDED"] = "SUCCEEDED";
    })(AccountGateStatus = exports.AccountGateStatus || (exports.AccountGateStatus = {}));
    var ThirdPartyType;
    (function(ThirdPartyType2) {
      ThirdPartyType2["HOOK"] = "HOOK";
      ThirdPartyType2["MODULE"] = "MODULE";
      ThirdPartyType2["RESOURCE"] = "RESOURCE";
    })(ThirdPartyType = exports.ThirdPartyType || (exports.ThirdPartyType = {}));
    var VersionBump;
    (function(VersionBump2) {
      VersionBump2["MAJOR"] = "MAJOR";
      VersionBump2["MINOR"] = "MINOR";
    })(VersionBump = exports.VersionBump || (exports.VersionBump = {}));
    var CFNRegistryException = class _CFNRegistryException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "CFNRegistryException",
          $fault: "client",
          ...opts
        });
        this.name = "CFNRegistryException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CFNRegistryException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.CFNRegistryException = CFNRegistryException;
    var TypeNotFoundException = class _TypeNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "TypeNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TypeNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TypeNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TypeNotFoundException = TypeNotFoundException;
    var AlreadyExistsException = class _AlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "AlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _AlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.AlreadyExistsException = AlreadyExistsException;
    var TypeConfigurationNotFoundException = class _TypeConfigurationNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "TypeConfigurationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "TypeConfigurationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TypeConfigurationNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TypeConfigurationNotFoundException = TypeConfigurationNotFoundException;
    var CallAs;
    (function(CallAs2) {
      CallAs2["DELEGATED_ADMIN"] = "DELEGATED_ADMIN";
      CallAs2["SELF"] = "SELF";
    })(CallAs = exports.CallAs || (exports.CallAs = {}));
    var TokenAlreadyExistsException = class _TokenAlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "TokenAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "TokenAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _TokenAlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TokenAlreadyExistsException = TokenAlreadyExistsException;
    var Capability;
    (function(Capability2) {
      Capability2["CAPABILITY_AUTO_EXPAND"] = "CAPABILITY_AUTO_EXPAND";
      Capability2["CAPABILITY_IAM"] = "CAPABILITY_IAM";
      Capability2["CAPABILITY_NAMED_IAM"] = "CAPABILITY_NAMED_IAM";
    })(Capability = exports.Capability || (exports.Capability = {}));
    var Category;
    (function(Category2) {
      Category2["ACTIVATED"] = "ACTIVATED";
      Category2["AWS_TYPES"] = "AWS_TYPES";
      Category2["REGISTERED"] = "REGISTERED";
      Category2["THIRD_PARTY"] = "THIRD_PARTY";
    })(Category = exports.Category || (exports.Category = {}));
    var ChangeAction;
    (function(ChangeAction2) {
      ChangeAction2["Add"] = "Add";
      ChangeAction2["Dynamic"] = "Dynamic";
      ChangeAction2["Import"] = "Import";
      ChangeAction2["Modify"] = "Modify";
      ChangeAction2["Remove"] = "Remove";
    })(ChangeAction = exports.ChangeAction || (exports.ChangeAction = {}));
    var ChangeSource;
    (function(ChangeSource2) {
      ChangeSource2["Automatic"] = "Automatic";
      ChangeSource2["DirectModification"] = "DirectModification";
      ChangeSource2["ParameterReference"] = "ParameterReference";
      ChangeSource2["ResourceAttribute"] = "ResourceAttribute";
      ChangeSource2["ResourceReference"] = "ResourceReference";
    })(ChangeSource = exports.ChangeSource || (exports.ChangeSource = {}));
    var EvaluationType;
    (function(EvaluationType2) {
      EvaluationType2["Dynamic"] = "Dynamic";
      EvaluationType2["Static"] = "Static";
    })(EvaluationType = exports.EvaluationType || (exports.EvaluationType = {}));
    var ResourceAttribute;
    (function(ResourceAttribute2) {
      ResourceAttribute2["CreationPolicy"] = "CreationPolicy";
      ResourceAttribute2["DeletionPolicy"] = "DeletionPolicy";
      ResourceAttribute2["Metadata"] = "Metadata";
      ResourceAttribute2["Properties"] = "Properties";
      ResourceAttribute2["Tags"] = "Tags";
      ResourceAttribute2["UpdatePolicy"] = "UpdatePolicy";
    })(ResourceAttribute = exports.ResourceAttribute || (exports.ResourceAttribute = {}));
    var RequiresRecreation;
    (function(RequiresRecreation2) {
      RequiresRecreation2["Always"] = "Always";
      RequiresRecreation2["Conditionally"] = "Conditionally";
      RequiresRecreation2["Never"] = "Never";
    })(RequiresRecreation = exports.RequiresRecreation || (exports.RequiresRecreation = {}));
    var Replacement;
    (function(Replacement2) {
      Replacement2["Conditional"] = "Conditional";
      Replacement2["False"] = "False";
      Replacement2["True"] = "True";
    })(Replacement = exports.Replacement || (exports.Replacement = {}));
    var ChangeType;
    (function(ChangeType2) {
      ChangeType2["Resource"] = "Resource";
    })(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
    var HookFailureMode;
    (function(HookFailureMode2) {
      HookFailureMode2["FAIL"] = "FAIL";
      HookFailureMode2["WARN"] = "WARN";
    })(HookFailureMode = exports.HookFailureMode || (exports.HookFailureMode = {}));
    var HookInvocationPoint;
    (function(HookInvocationPoint2) {
      HookInvocationPoint2["PRE_PROVISION"] = "PRE_PROVISION";
    })(HookInvocationPoint = exports.HookInvocationPoint || (exports.HookInvocationPoint = {}));
    var HookTargetType;
    (function(HookTargetType2) {
      HookTargetType2["RESOURCE"] = "RESOURCE";
    })(HookTargetType = exports.HookTargetType || (exports.HookTargetType = {}));
    var ChangeSetHooksStatus;
    (function(ChangeSetHooksStatus2) {
      ChangeSetHooksStatus2["PLANNED"] = "PLANNED";
      ChangeSetHooksStatus2["PLANNING"] = "PLANNING";
      ChangeSetHooksStatus2["UNAVAILABLE"] = "UNAVAILABLE";
    })(ChangeSetHooksStatus = exports.ChangeSetHooksStatus || (exports.ChangeSetHooksStatus = {}));
    var ChangeSetNotFoundException = class _ChangeSetNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "ChangeSetNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ChangeSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _ChangeSetNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.ChangeSetNotFoundException = ChangeSetNotFoundException;
    var ChangeSetStatus;
    (function(ChangeSetStatus2) {
      ChangeSetStatus2["CREATE_COMPLETE"] = "CREATE_COMPLETE";
      ChangeSetStatus2["CREATE_IN_PROGRESS"] = "CREATE_IN_PROGRESS";
      ChangeSetStatus2["CREATE_PENDING"] = "CREATE_PENDING";
      ChangeSetStatus2["DELETE_COMPLETE"] = "DELETE_COMPLETE";
      ChangeSetStatus2["DELETE_FAILED"] = "DELETE_FAILED";
      ChangeSetStatus2["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
      ChangeSetStatus2["DELETE_PENDING"] = "DELETE_PENDING";
      ChangeSetStatus2["FAILED"] = "FAILED";
    })(ChangeSetStatus = exports.ChangeSetStatus || (exports.ChangeSetStatus = {}));
    var ExecutionStatus;
    (function(ExecutionStatus2) {
      ExecutionStatus2["AVAILABLE"] = "AVAILABLE";
      ExecutionStatus2["EXECUTE_COMPLETE"] = "EXECUTE_COMPLETE";
      ExecutionStatus2["EXECUTE_FAILED"] = "EXECUTE_FAILED";
      ExecutionStatus2["EXECUTE_IN_PROGRESS"] = "EXECUTE_IN_PROGRESS";
      ExecutionStatus2["OBSOLETE"] = "OBSOLETE";
      ExecutionStatus2["UNAVAILABLE"] = "UNAVAILABLE";
    })(ExecutionStatus = exports.ExecutionStatus || (exports.ExecutionStatus = {}));
    var ChangeSetType;
    (function(ChangeSetType2) {
      ChangeSetType2["CREATE"] = "CREATE";
      ChangeSetType2["IMPORT"] = "IMPORT";
      ChangeSetType2["UPDATE"] = "UPDATE";
    })(ChangeSetType = exports.ChangeSetType || (exports.ChangeSetType = {}));
    var InsufficientCapabilitiesException = class _InsufficientCapabilitiesException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "InsufficientCapabilitiesException",
          $fault: "client",
          ...opts
        });
        this.name = "InsufficientCapabilitiesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InsufficientCapabilitiesException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InsufficientCapabilitiesException = InsufficientCapabilitiesException;
    var LimitExceededException = class _LimitExceededException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "LimitExceededException",
          $fault: "client",
          ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _LimitExceededException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var OnFailure;
    (function(OnFailure2) {
      OnFailure2["DELETE"] = "DELETE";
      OnFailure2["DO_NOTHING"] = "DO_NOTHING";
      OnFailure2["ROLLBACK"] = "ROLLBACK";
    })(OnFailure = exports.OnFailure || (exports.OnFailure = {}));
    var RegionConcurrencyType;
    (function(RegionConcurrencyType2) {
      RegionConcurrencyType2["PARALLEL"] = "PARALLEL";
      RegionConcurrencyType2["SEQUENTIAL"] = "SEQUENTIAL";
    })(RegionConcurrencyType = exports.RegionConcurrencyType || (exports.RegionConcurrencyType = {}));
    var InvalidOperationException = class _InvalidOperationException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "InvalidOperationException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidOperationException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidOperationException = InvalidOperationException;
    var OperationIdAlreadyExistsException = class _OperationIdAlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "OperationIdAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationIdAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationIdAlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OperationIdAlreadyExistsException = OperationIdAlreadyExistsException;
    var OperationInProgressException = class _OperationInProgressException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "OperationInProgressException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OperationInProgressException = OperationInProgressException;
    var StackSetNotFoundException = class _StackSetNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "StackSetNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "StackSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackSetNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.StackSetNotFoundException = StackSetNotFoundException;
    var StaleRequestException = class _StaleRequestException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "StaleRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "StaleRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StaleRequestException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.StaleRequestException = StaleRequestException;
    var CreatedButModifiedException = class _CreatedButModifiedException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "CreatedButModifiedException",
          $fault: "client",
          ...opts
        });
        this.name = "CreatedButModifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _CreatedButModifiedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.CreatedButModifiedException = CreatedButModifiedException;
    var PermissionModels;
    (function(PermissionModels2) {
      PermissionModels2["SELF_MANAGED"] = "SELF_MANAGED";
      PermissionModels2["SERVICE_MANAGED"] = "SERVICE_MANAGED";
    })(PermissionModels = exports.PermissionModels || (exports.PermissionModels = {}));
    var NameAlreadyExistsException = class _NameAlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "NameAlreadyExistsException",
          $fault: "client",
          ...opts
        });
        this.name = "NameAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _NameAlreadyExistsException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.NameAlreadyExistsException = NameAlreadyExistsException;
    var InvalidChangeSetStatusException = class _InvalidChangeSetStatusException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "InvalidChangeSetStatusException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidChangeSetStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidChangeSetStatusException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidChangeSetStatusException = InvalidChangeSetStatusException;
    var StackSetNotEmptyException = class _StackSetNotEmptyException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "StackSetNotEmptyException",
          $fault: "client",
          ...opts
        });
        this.name = "StackSetNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackSetNotEmptyException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.StackSetNotEmptyException = StackSetNotEmptyException;
    var RegistryType;
    (function(RegistryType2) {
      RegistryType2["HOOK"] = "HOOK";
      RegistryType2["MODULE"] = "MODULE";
      RegistryType2["RESOURCE"] = "RESOURCE";
    })(RegistryType = exports.RegistryType || (exports.RegistryType = {}));
    var IdentityProvider;
    (function(IdentityProvider2) {
      IdentityProvider2["AWS_Marketplace"] = "AWS_Marketplace";
      IdentityProvider2["Bitbucket"] = "Bitbucket";
      IdentityProvider2["GitHub"] = "GitHub";
    })(IdentityProvider = exports.IdentityProvider || (exports.IdentityProvider = {}));
    var PublisherStatus;
    (function(PublisherStatus2) {
      PublisherStatus2["UNVERIFIED"] = "UNVERIFIED";
      PublisherStatus2["VERIFIED"] = "VERIFIED";
    })(PublisherStatus = exports.PublisherStatus || (exports.PublisherStatus = {}));
    var StackDriftDetectionStatus;
    (function(StackDriftDetectionStatus2) {
      StackDriftDetectionStatus2["DETECTION_COMPLETE"] = "DETECTION_COMPLETE";
      StackDriftDetectionStatus2["DETECTION_FAILED"] = "DETECTION_FAILED";
      StackDriftDetectionStatus2["DETECTION_IN_PROGRESS"] = "DETECTION_IN_PROGRESS";
    })(StackDriftDetectionStatus = exports.StackDriftDetectionStatus || (exports.StackDriftDetectionStatus = {}));
    var StackDriftStatus;
    (function(StackDriftStatus2) {
      StackDriftStatus2["DRIFTED"] = "DRIFTED";
      StackDriftStatus2["IN_SYNC"] = "IN_SYNC";
      StackDriftStatus2["NOT_CHECKED"] = "NOT_CHECKED";
      StackDriftStatus2["UNKNOWN"] = "UNKNOWN";
    })(StackDriftStatus = exports.StackDriftStatus || (exports.StackDriftStatus = {}));
    var HookStatus;
    (function(HookStatus2) {
      HookStatus2["HOOK_COMPLETE_FAILED"] = "HOOK_COMPLETE_FAILED";
      HookStatus2["HOOK_COMPLETE_SUCCEEDED"] = "HOOK_COMPLETE_SUCCEEDED";
      HookStatus2["HOOK_FAILED"] = "HOOK_FAILED";
      HookStatus2["HOOK_IN_PROGRESS"] = "HOOK_IN_PROGRESS";
    })(HookStatus = exports.HookStatus || (exports.HookStatus = {}));
    var ResourceStatus;
    (function(ResourceStatus2) {
      ResourceStatus2["CREATE_COMPLETE"] = "CREATE_COMPLETE";
      ResourceStatus2["CREATE_FAILED"] = "CREATE_FAILED";
      ResourceStatus2["CREATE_IN_PROGRESS"] = "CREATE_IN_PROGRESS";
      ResourceStatus2["DELETE_COMPLETE"] = "DELETE_COMPLETE";
      ResourceStatus2["DELETE_FAILED"] = "DELETE_FAILED";
      ResourceStatus2["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
      ResourceStatus2["DELETE_SKIPPED"] = "DELETE_SKIPPED";
      ResourceStatus2["IMPORT_COMPLETE"] = "IMPORT_COMPLETE";
      ResourceStatus2["IMPORT_FAILED"] = "IMPORT_FAILED";
      ResourceStatus2["IMPORT_IN_PROGRESS"] = "IMPORT_IN_PROGRESS";
      ResourceStatus2["IMPORT_ROLLBACK_COMPLETE"] = "IMPORT_ROLLBACK_COMPLETE";
      ResourceStatus2["IMPORT_ROLLBACK_FAILED"] = "IMPORT_ROLLBACK_FAILED";
      ResourceStatus2["IMPORT_ROLLBACK_IN_PROGRESS"] = "IMPORT_ROLLBACK_IN_PROGRESS";
      ResourceStatus2["ROLLBACK_COMPLETE"] = "ROLLBACK_COMPLETE";
      ResourceStatus2["ROLLBACK_FAILED"] = "ROLLBACK_FAILED";
      ResourceStatus2["ROLLBACK_IN_PROGRESS"] = "ROLLBACK_IN_PROGRESS";
      ResourceStatus2["UPDATE_COMPLETE"] = "UPDATE_COMPLETE";
      ResourceStatus2["UPDATE_FAILED"] = "UPDATE_FAILED";
      ResourceStatus2["UPDATE_IN_PROGRESS"] = "UPDATE_IN_PROGRESS";
      ResourceStatus2["UPDATE_ROLLBACK_COMPLETE"] = "UPDATE_ROLLBACK_COMPLETE";
      ResourceStatus2["UPDATE_ROLLBACK_FAILED"] = "UPDATE_ROLLBACK_FAILED";
      ResourceStatus2["UPDATE_ROLLBACK_IN_PROGRESS"] = "UPDATE_ROLLBACK_IN_PROGRESS";
    })(ResourceStatus = exports.ResourceStatus || (exports.ResourceStatus = {}));
    var StackInstanceDetailedStatus;
    (function(StackInstanceDetailedStatus2) {
      StackInstanceDetailedStatus2["CANCELLED"] = "CANCELLED";
      StackInstanceDetailedStatus2["FAILED"] = "FAILED";
      StackInstanceDetailedStatus2["INOPERABLE"] = "INOPERABLE";
      StackInstanceDetailedStatus2["PENDING"] = "PENDING";
      StackInstanceDetailedStatus2["RUNNING"] = "RUNNING";
      StackInstanceDetailedStatus2["SUCCEEDED"] = "SUCCEEDED";
    })(StackInstanceDetailedStatus = exports.StackInstanceDetailedStatus || (exports.StackInstanceDetailedStatus = {}));
    var StackInstanceStatus;
    (function(StackInstanceStatus2) {
      StackInstanceStatus2["CURRENT"] = "CURRENT";
      StackInstanceStatus2["INOPERABLE"] = "INOPERABLE";
      StackInstanceStatus2["OUTDATED"] = "OUTDATED";
    })(StackInstanceStatus = exports.StackInstanceStatus || (exports.StackInstanceStatus = {}));
    var StackInstanceNotFoundException = class _StackInstanceNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "StackInstanceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "StackInstanceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackInstanceNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.StackInstanceNotFoundException = StackInstanceNotFoundException;
    var StackResourceDriftStatus;
    (function(StackResourceDriftStatus2) {
      StackResourceDriftStatus2["DELETED"] = "DELETED";
      StackResourceDriftStatus2["IN_SYNC"] = "IN_SYNC";
      StackResourceDriftStatus2["MODIFIED"] = "MODIFIED";
      StackResourceDriftStatus2["NOT_CHECKED"] = "NOT_CHECKED";
    })(StackResourceDriftStatus = exports.StackResourceDriftStatus || (exports.StackResourceDriftStatus = {}));
    var DifferenceType;
    (function(DifferenceType2) {
      DifferenceType2["ADD"] = "ADD";
      DifferenceType2["NOT_EQUAL"] = "NOT_EQUAL";
      DifferenceType2["REMOVE"] = "REMOVE";
    })(DifferenceType = exports.DifferenceType || (exports.DifferenceType = {}));
    var StackStatus;
    (function(StackStatus2) {
      StackStatus2["CREATE_COMPLETE"] = "CREATE_COMPLETE";
      StackStatus2["CREATE_FAILED"] = "CREATE_FAILED";
      StackStatus2["CREATE_IN_PROGRESS"] = "CREATE_IN_PROGRESS";
      StackStatus2["DELETE_COMPLETE"] = "DELETE_COMPLETE";
      StackStatus2["DELETE_FAILED"] = "DELETE_FAILED";
      StackStatus2["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
      StackStatus2["IMPORT_COMPLETE"] = "IMPORT_COMPLETE";
      StackStatus2["IMPORT_IN_PROGRESS"] = "IMPORT_IN_PROGRESS";
      StackStatus2["IMPORT_ROLLBACK_COMPLETE"] = "IMPORT_ROLLBACK_COMPLETE";
      StackStatus2["IMPORT_ROLLBACK_FAILED"] = "IMPORT_ROLLBACK_FAILED";
      StackStatus2["IMPORT_ROLLBACK_IN_PROGRESS"] = "IMPORT_ROLLBACK_IN_PROGRESS";
      StackStatus2["REVIEW_IN_PROGRESS"] = "REVIEW_IN_PROGRESS";
      StackStatus2["ROLLBACK_COMPLETE"] = "ROLLBACK_COMPLETE";
      StackStatus2["ROLLBACK_FAILED"] = "ROLLBACK_FAILED";
      StackStatus2["ROLLBACK_IN_PROGRESS"] = "ROLLBACK_IN_PROGRESS";
      StackStatus2["UPDATE_COMPLETE"] = "UPDATE_COMPLETE";
      StackStatus2["UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"] = "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS";
      StackStatus2["UPDATE_FAILED"] = "UPDATE_FAILED";
      StackStatus2["UPDATE_IN_PROGRESS"] = "UPDATE_IN_PROGRESS";
      StackStatus2["UPDATE_ROLLBACK_COMPLETE"] = "UPDATE_ROLLBACK_COMPLETE";
      StackStatus2["UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS"] = "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS";
      StackStatus2["UPDATE_ROLLBACK_FAILED"] = "UPDATE_ROLLBACK_FAILED";
      StackStatus2["UPDATE_ROLLBACK_IN_PROGRESS"] = "UPDATE_ROLLBACK_IN_PROGRESS";
    })(StackStatus = exports.StackStatus || (exports.StackStatus = {}));
    var StackSetDriftDetectionStatus;
    (function(StackSetDriftDetectionStatus2) {
      StackSetDriftDetectionStatus2["COMPLETED"] = "COMPLETED";
      StackSetDriftDetectionStatus2["FAILED"] = "FAILED";
      StackSetDriftDetectionStatus2["IN_PROGRESS"] = "IN_PROGRESS";
      StackSetDriftDetectionStatus2["PARTIAL_SUCCESS"] = "PARTIAL_SUCCESS";
      StackSetDriftDetectionStatus2["STOPPED"] = "STOPPED";
    })(StackSetDriftDetectionStatus = exports.StackSetDriftDetectionStatus || (exports.StackSetDriftDetectionStatus = {}));
    var StackSetDriftStatus;
    (function(StackSetDriftStatus2) {
      StackSetDriftStatus2["DRIFTED"] = "DRIFTED";
      StackSetDriftStatus2["IN_SYNC"] = "IN_SYNC";
      StackSetDriftStatus2["NOT_CHECKED"] = "NOT_CHECKED";
    })(StackSetDriftStatus = exports.StackSetDriftStatus || (exports.StackSetDriftStatus = {}));
    var StackSetStatus;
    (function(StackSetStatus2) {
      StackSetStatus2["ACTIVE"] = "ACTIVE";
      StackSetStatus2["DELETED"] = "DELETED";
    })(StackSetStatus = exports.StackSetStatus || (exports.StackSetStatus = {}));
    var StackSetOperationAction;
    (function(StackSetOperationAction2) {
      StackSetOperationAction2["CREATE"] = "CREATE";
      StackSetOperationAction2["DELETE"] = "DELETE";
      StackSetOperationAction2["DETECT_DRIFT"] = "DETECT_DRIFT";
      StackSetOperationAction2["UPDATE"] = "UPDATE";
    })(StackSetOperationAction = exports.StackSetOperationAction || (exports.StackSetOperationAction = {}));
    var StackSetOperationStatus;
    (function(StackSetOperationStatus2) {
      StackSetOperationStatus2["FAILED"] = "FAILED";
      StackSetOperationStatus2["QUEUED"] = "QUEUED";
      StackSetOperationStatus2["RUNNING"] = "RUNNING";
      StackSetOperationStatus2["STOPPED"] = "STOPPED";
      StackSetOperationStatus2["STOPPING"] = "STOPPING";
      StackSetOperationStatus2["SUCCEEDED"] = "SUCCEEDED";
    })(StackSetOperationStatus = exports.StackSetOperationStatus || (exports.StackSetOperationStatus = {}));
    var OperationNotFoundException = class _OperationNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "OperationNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OperationNotFoundException = OperationNotFoundException;
    var DeprecatedStatus;
    (function(DeprecatedStatus2) {
      DeprecatedStatus2["DEPRECATED"] = "DEPRECATED";
      DeprecatedStatus2["LIVE"] = "LIVE";
    })(DeprecatedStatus = exports.DeprecatedStatus || (exports.DeprecatedStatus = {}));
    var ProvisioningType;
    (function(ProvisioningType2) {
      ProvisioningType2["FULLY_MUTABLE"] = "FULLY_MUTABLE";
      ProvisioningType2["IMMUTABLE"] = "IMMUTABLE";
      ProvisioningType2["NON_PROVISIONABLE"] = "NON_PROVISIONABLE";
    })(ProvisioningType = exports.ProvisioningType || (exports.ProvisioningType = {}));
    var TypeTestsStatus;
    (function(TypeTestsStatus2) {
      TypeTestsStatus2["FAILED"] = "FAILED";
      TypeTestsStatus2["IN_PROGRESS"] = "IN_PROGRESS";
      TypeTestsStatus2["NOT_TESTED"] = "NOT_TESTED";
      TypeTestsStatus2["PASSED"] = "PASSED";
    })(TypeTestsStatus = exports.TypeTestsStatus || (exports.TypeTestsStatus = {}));
    var Visibility;
    (function(Visibility2) {
      Visibility2["PRIVATE"] = "PRIVATE";
      Visibility2["PUBLIC"] = "PUBLIC";
    })(Visibility = exports.Visibility || (exports.Visibility = {}));
    var RegistrationStatus;
    (function(RegistrationStatus2) {
      RegistrationStatus2["COMPLETE"] = "COMPLETE";
      RegistrationStatus2["FAILED"] = "FAILED";
      RegistrationStatus2["IN_PROGRESS"] = "IN_PROGRESS";
    })(RegistrationStatus = exports.RegistrationStatus || (exports.RegistrationStatus = {}));
    var TemplateStage;
    (function(TemplateStage2) {
      TemplateStage2["Original"] = "Original";
      TemplateStage2["Processed"] = "Processed";
    })(TemplateStage = exports.TemplateStage || (exports.TemplateStage = {}));
    var StackNotFoundException = class _StackNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "StackNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "StackNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _StackNotFoundException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.StackNotFoundException = StackNotFoundException;
    var StackInstanceFilterName;
    (function(StackInstanceFilterName2) {
      StackInstanceFilterName2["DETAILED_STATUS"] = "DETAILED_STATUS";
      StackInstanceFilterName2["LAST_OPERATION_ID"] = "LAST_OPERATION_ID";
    })(StackInstanceFilterName = exports.StackInstanceFilterName || (exports.StackInstanceFilterName = {}));
    var OperationResultFilterName;
    (function(OperationResultFilterName2) {
      OperationResultFilterName2["OPERATION_RESULT_STATUS"] = "OPERATION_RESULT_STATUS";
    })(OperationResultFilterName = exports.OperationResultFilterName || (exports.OperationResultFilterName = {}));
    var StackSetOperationResultStatus;
    (function(StackSetOperationResultStatus2) {
      StackSetOperationResultStatus2["CANCELLED"] = "CANCELLED";
      StackSetOperationResultStatus2["FAILED"] = "FAILED";
      StackSetOperationResultStatus2["PENDING"] = "PENDING";
      StackSetOperationResultStatus2["RUNNING"] = "RUNNING";
      StackSetOperationResultStatus2["SUCCEEDED"] = "SUCCEEDED";
    })(StackSetOperationResultStatus = exports.StackSetOperationResultStatus || (exports.StackSetOperationResultStatus = {}));
    var InvalidStateTransitionException = class _InvalidStateTransitionException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "InvalidStateTransitionException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidStateTransitionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _InvalidStateTransitionException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidStateTransitionException = InvalidStateTransitionException;
    var OperationStatusCheckFailedException = class _OperationStatusCheckFailedException extends CloudFormationServiceException_1.CloudFormationServiceException {
      constructor(opts) {
        super({
          name: "OperationStatusCheckFailedException",
          $fault: "client",
          ...opts
        });
        this.name = "OperationStatusCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, _OperationStatusCheckFailedException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.OperationStatusCheckFailedException = OperationStatusCheckFailedException;
    var OperationStatus;
    (function(OperationStatus2) {
      OperationStatus2["FAILED"] = "FAILED";
      OperationStatus2["IN_PROGRESS"] = "IN_PROGRESS";
      OperationStatus2["PENDING"] = "PENDING";
      OperationStatus2["SUCCESS"] = "SUCCESS";
    })(OperationStatus = exports.OperationStatus || (exports.OperationStatus = {}));
    var HandlerErrorCode;
    (function(HandlerErrorCode2) {
      HandlerErrorCode2["AccessDenied"] = "AccessDenied";
      HandlerErrorCode2["AlreadyExists"] = "AlreadyExists";
      HandlerErrorCode2["GeneralServiceException"] = "GeneralServiceException";
      HandlerErrorCode2["HandlerInternalFailure"] = "HandlerInternalFailure";
      HandlerErrorCode2["InternalFailure"] = "InternalFailure";
      HandlerErrorCode2["InvalidCredentials"] = "InvalidCredentials";
      HandlerErrorCode2["InvalidRequest"] = "InvalidRequest";
      HandlerErrorCode2["InvalidTypeConfiguration"] = "InvalidTypeConfiguration";
      HandlerErrorCode2["NetworkFailure"] = "NetworkFailure";
      HandlerErrorCode2["NonCompliant"] = "NonCompliant";
      HandlerErrorCode2["NotFound"] = "NotFound";
      HandlerErrorCode2["NotUpdatable"] = "NotUpdatable";
      HandlerErrorCode2["ResourceConflict"] = "ResourceConflict";
      HandlerErrorCode2["ServiceInternalError"] = "ServiceInternalError";
      HandlerErrorCode2["ServiceLimitExceeded"] = "ServiceLimitExceeded";
      HandlerErrorCode2["ServiceTimeout"] = "NotStabilized";
      HandlerErrorCode2["Throttling"] = "Throttling";
      HandlerErrorCode2["Unknown"] = "Unknown";
      HandlerErrorCode2["UnsupportedTarget"] = "UnsupportedTarget";
    })(HandlerErrorCode = exports.HandlerErrorCode || (exports.HandlerErrorCode = {}));
    var ResourceSignalStatus;
    (function(ResourceSignalStatus2) {
      ResourceSignalStatus2["FAILURE"] = "FAILURE";
      ResourceSignalStatus2["SUCCESS"] = "SUCCESS";
    })(ResourceSignalStatus = exports.ResourceSignalStatus || (exports.ResourceSignalStatus = {}));
    var AccountGateResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountGateResultFilterSensitiveLog = AccountGateResultFilterSensitiveLog;
    var AccountLimitFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AccountLimitFilterSensitiveLog = AccountLimitFilterSensitiveLog;
    var LoggingConfigFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.LoggingConfigFilterSensitiveLog = LoggingConfigFilterSensitiveLog;
    var ActivateTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ActivateTypeInputFilterSensitiveLog = ActivateTypeInputFilterSensitiveLog;
    var ActivateTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ActivateTypeOutputFilterSensitiveLog = ActivateTypeOutputFilterSensitiveLog;
    var AutoDeploymentFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.AutoDeploymentFilterSensitiveLog = AutoDeploymentFilterSensitiveLog;
    var TypeConfigurationIdentifierFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TypeConfigurationIdentifierFilterSensitiveLog = TypeConfigurationIdentifierFilterSensitiveLog;
    var BatchDescribeTypeConfigurationsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.BatchDescribeTypeConfigurationsInputFilterSensitiveLog = BatchDescribeTypeConfigurationsInputFilterSensitiveLog;
    var BatchDescribeTypeConfigurationsErrorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.BatchDescribeTypeConfigurationsErrorFilterSensitiveLog = BatchDescribeTypeConfigurationsErrorFilterSensitiveLog;
    var TypeConfigurationDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TypeConfigurationDetailsFilterSensitiveLog = TypeConfigurationDetailsFilterSensitiveLog;
    var BatchDescribeTypeConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.BatchDescribeTypeConfigurationsOutputFilterSensitiveLog = BatchDescribeTypeConfigurationsOutputFilterSensitiveLog;
    var CancelUpdateStackInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CancelUpdateStackInputFilterSensitiveLog = CancelUpdateStackInputFilterSensitiveLog;
    var ResourceTargetDefinitionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceTargetDefinitionFilterSensitiveLog = ResourceTargetDefinitionFilterSensitiveLog;
    var ResourceChangeDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceChangeDetailFilterSensitiveLog = ResourceChangeDetailFilterSensitiveLog;
    var ModuleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ModuleInfoFilterSensitiveLog = ModuleInfoFilterSensitiveLog;
    var ResourceChangeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceChangeFilterSensitiveLog = ResourceChangeFilterSensitiveLog;
    var ChangeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ChangeFilterSensitiveLog = ChangeFilterSensitiveLog;
    var ChangeSetHookResourceTargetDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ChangeSetHookResourceTargetDetailsFilterSensitiveLog = ChangeSetHookResourceTargetDetailsFilterSensitiveLog;
    var ChangeSetHookTargetDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ChangeSetHookTargetDetailsFilterSensitiveLog = ChangeSetHookTargetDetailsFilterSensitiveLog;
    var ChangeSetHookFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ChangeSetHookFilterSensitiveLog = ChangeSetHookFilterSensitiveLog;
    var ChangeSetSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ChangeSetSummaryFilterSensitiveLog = ChangeSetSummaryFilterSensitiveLog;
    var ContinueUpdateRollbackInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ContinueUpdateRollbackInputFilterSensitiveLog = ContinueUpdateRollbackInputFilterSensitiveLog;
    var ContinueUpdateRollbackOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ContinueUpdateRollbackOutputFilterSensitiveLog = ContinueUpdateRollbackOutputFilterSensitiveLog;
    var ParameterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParameterFilterSensitiveLog = ParameterFilterSensitiveLog;
    var ResourceToImportFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceToImportFilterSensitiveLog = ResourceToImportFilterSensitiveLog;
    var RollbackTriggerFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RollbackTriggerFilterSensitiveLog = RollbackTriggerFilterSensitiveLog;
    var RollbackConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RollbackConfigurationFilterSensitiveLog = RollbackConfigurationFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateChangeSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateChangeSetInputFilterSensitiveLog = CreateChangeSetInputFilterSensitiveLog;
    var CreateChangeSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateChangeSetOutputFilterSensitiveLog = CreateChangeSetOutputFilterSensitiveLog;
    var CreateStackInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateStackInputFilterSensitiveLog = CreateStackInputFilterSensitiveLog;
    var CreateStackOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateStackOutputFilterSensitiveLog = CreateStackOutputFilterSensitiveLog;
    var DeploymentTargetsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeploymentTargetsFilterSensitiveLog = DeploymentTargetsFilterSensitiveLog;
    var StackSetOperationPreferencesFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetOperationPreferencesFilterSensitiveLog = StackSetOperationPreferencesFilterSensitiveLog;
    var CreateStackInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateStackInstancesInputFilterSensitiveLog = CreateStackInstancesInputFilterSensitiveLog;
    var CreateStackInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateStackInstancesOutputFilterSensitiveLog = CreateStackInstancesOutputFilterSensitiveLog;
    var ManagedExecutionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ManagedExecutionFilterSensitiveLog = ManagedExecutionFilterSensitiveLog;
    var CreateStackSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateStackSetInputFilterSensitiveLog = CreateStackSetInputFilterSensitiveLog;
    var CreateStackSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.CreateStackSetOutputFilterSensitiveLog = CreateStackSetOutputFilterSensitiveLog;
    var DeactivateTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeactivateTypeInputFilterSensitiveLog = DeactivateTypeInputFilterSensitiveLog;
    var DeactivateTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeactivateTypeOutputFilterSensitiveLog = DeactivateTypeOutputFilterSensitiveLog;
    var DeleteChangeSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteChangeSetInputFilterSensitiveLog = DeleteChangeSetInputFilterSensitiveLog;
    var DeleteChangeSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteChangeSetOutputFilterSensitiveLog = DeleteChangeSetOutputFilterSensitiveLog;
    var DeleteStackInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteStackInputFilterSensitiveLog = DeleteStackInputFilterSensitiveLog;
    var DeleteStackInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteStackInstancesInputFilterSensitiveLog = DeleteStackInstancesInputFilterSensitiveLog;
    var DeleteStackInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteStackInstancesOutputFilterSensitiveLog = DeleteStackInstancesOutputFilterSensitiveLog;
    var DeleteStackSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteStackSetInputFilterSensitiveLog = DeleteStackSetInputFilterSensitiveLog;
    var DeleteStackSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeleteStackSetOutputFilterSensitiveLog = DeleteStackSetOutputFilterSensitiveLog;
    var DeregisterTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterTypeInputFilterSensitiveLog = DeregisterTypeInputFilterSensitiveLog;
    var DeregisterTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DeregisterTypeOutputFilterSensitiveLog = DeregisterTypeOutputFilterSensitiveLog;
    var DescribeAccountLimitsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAccountLimitsInputFilterSensitiveLog = DescribeAccountLimitsInputFilterSensitiveLog;
    var DescribeAccountLimitsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeAccountLimitsOutputFilterSensitiveLog = DescribeAccountLimitsOutputFilterSensitiveLog;
    var DescribeChangeSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeChangeSetInputFilterSensitiveLog = DescribeChangeSetInputFilterSensitiveLog;
    var DescribeChangeSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeChangeSetOutputFilterSensitiveLog = DescribeChangeSetOutputFilterSensitiveLog;
    var DescribeChangeSetHooksInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeChangeSetHooksInputFilterSensitiveLog = DescribeChangeSetHooksInputFilterSensitiveLog;
    var DescribeChangeSetHooksOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeChangeSetHooksOutputFilterSensitiveLog = DescribeChangeSetHooksOutputFilterSensitiveLog;
    var DescribePublisherInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePublisherInputFilterSensitiveLog = DescribePublisherInputFilterSensitiveLog;
    var DescribePublisherOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribePublisherOutputFilterSensitiveLog = DescribePublisherOutputFilterSensitiveLog;
    var DescribeStackDriftDetectionStatusInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackDriftDetectionStatusInputFilterSensitiveLog = DescribeStackDriftDetectionStatusInputFilterSensitiveLog;
    var DescribeStackDriftDetectionStatusOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackDriftDetectionStatusOutputFilterSensitiveLog = DescribeStackDriftDetectionStatusOutputFilterSensitiveLog;
    var DescribeStackEventsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackEventsInputFilterSensitiveLog = DescribeStackEventsInputFilterSensitiveLog;
    var StackEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackEventFilterSensitiveLog = StackEventFilterSensitiveLog;
    var DescribeStackEventsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackEventsOutputFilterSensitiveLog = DescribeStackEventsOutputFilterSensitiveLog;
    var DescribeStackInstanceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackInstanceInputFilterSensitiveLog = DescribeStackInstanceInputFilterSensitiveLog;
    var StackInstanceComprehensiveStatusFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackInstanceComprehensiveStatusFilterSensitiveLog = StackInstanceComprehensiveStatusFilterSensitiveLog;
    var StackInstanceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackInstanceFilterSensitiveLog = StackInstanceFilterSensitiveLog;
    var DescribeStackInstanceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackInstanceOutputFilterSensitiveLog = DescribeStackInstanceOutputFilterSensitiveLog;
    var DescribeStackResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackResourceInputFilterSensitiveLog = DescribeStackResourceInputFilterSensitiveLog;
    var StackResourceDriftInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackResourceDriftInformationFilterSensitiveLog = StackResourceDriftInformationFilterSensitiveLog;
    var StackResourceDetailFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackResourceDetailFilterSensitiveLog = StackResourceDetailFilterSensitiveLog;
    var DescribeStackResourceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackResourceOutputFilterSensitiveLog = DescribeStackResourceOutputFilterSensitiveLog;
    var DescribeStackResourceDriftsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackResourceDriftsInputFilterSensitiveLog = DescribeStackResourceDriftsInputFilterSensitiveLog;
    var PhysicalResourceIdContextKeyValuePairFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PhysicalResourceIdContextKeyValuePairFilterSensitiveLog = PhysicalResourceIdContextKeyValuePairFilterSensitiveLog;
    var PropertyDifferenceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PropertyDifferenceFilterSensitiveLog = PropertyDifferenceFilterSensitiveLog;
    var StackResourceDriftFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackResourceDriftFilterSensitiveLog = StackResourceDriftFilterSensitiveLog;
    var DescribeStackResourceDriftsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackResourceDriftsOutputFilterSensitiveLog = DescribeStackResourceDriftsOutputFilterSensitiveLog;
    var DescribeStackResourcesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackResourcesInputFilterSensitiveLog = DescribeStackResourcesInputFilterSensitiveLog;
    var StackResourceFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackResourceFilterSensitiveLog = StackResourceFilterSensitiveLog;
    var DescribeStackResourcesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackResourcesOutputFilterSensitiveLog = DescribeStackResourcesOutputFilterSensitiveLog;
    var DescribeStacksInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStacksInputFilterSensitiveLog = DescribeStacksInputFilterSensitiveLog;
    var StackDriftInformationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackDriftInformationFilterSensitiveLog = StackDriftInformationFilterSensitiveLog;
    var OutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OutputFilterSensitiveLog = OutputFilterSensitiveLog;
    var StackFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackFilterSensitiveLog = StackFilterSensitiveLog;
    var DescribeStacksOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStacksOutputFilterSensitiveLog = DescribeStacksOutputFilterSensitiveLog;
    var DescribeStackSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackSetInputFilterSensitiveLog = DescribeStackSetInputFilterSensitiveLog;
    var StackSetDriftDetectionDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetDriftDetectionDetailsFilterSensitiveLog = StackSetDriftDetectionDetailsFilterSensitiveLog;
    var StackSetFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetFilterSensitiveLog = StackSetFilterSensitiveLog;
    var DescribeStackSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackSetOutputFilterSensitiveLog = DescribeStackSetOutputFilterSensitiveLog;
    var DescribeStackSetOperationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackSetOperationInputFilterSensitiveLog = DescribeStackSetOperationInputFilterSensitiveLog;
    var StackSetOperationStatusDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetOperationStatusDetailsFilterSensitiveLog = StackSetOperationStatusDetailsFilterSensitiveLog;
    var StackSetOperationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetOperationFilterSensitiveLog = StackSetOperationFilterSensitiveLog;
    var DescribeStackSetOperationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeStackSetOperationOutputFilterSensitiveLog = DescribeStackSetOperationOutputFilterSensitiveLog;
    var DescribeTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeTypeInputFilterSensitiveLog = DescribeTypeInputFilterSensitiveLog;
    var RequiredActivatedTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RequiredActivatedTypeFilterSensitiveLog = RequiredActivatedTypeFilterSensitiveLog;
    var DescribeTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeTypeOutputFilterSensitiveLog = DescribeTypeOutputFilterSensitiveLog;
    var DescribeTypeRegistrationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeTypeRegistrationInputFilterSensitiveLog = DescribeTypeRegistrationInputFilterSensitiveLog;
    var DescribeTypeRegistrationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DescribeTypeRegistrationOutputFilterSensitiveLog = DescribeTypeRegistrationOutputFilterSensitiveLog;
    var DetectStackDriftInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetectStackDriftInputFilterSensitiveLog = DetectStackDriftInputFilterSensitiveLog;
    var DetectStackDriftOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetectStackDriftOutputFilterSensitiveLog = DetectStackDriftOutputFilterSensitiveLog;
    var DetectStackResourceDriftInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetectStackResourceDriftInputFilterSensitiveLog = DetectStackResourceDriftInputFilterSensitiveLog;
    var DetectStackResourceDriftOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetectStackResourceDriftOutputFilterSensitiveLog = DetectStackResourceDriftOutputFilterSensitiveLog;
    var DetectStackSetDriftInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetectStackSetDriftInputFilterSensitiveLog = DetectStackSetDriftInputFilterSensitiveLog;
    var DetectStackSetDriftOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.DetectStackSetDriftOutputFilterSensitiveLog = DetectStackSetDriftOutputFilterSensitiveLog;
    var EstimateTemplateCostInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EstimateTemplateCostInputFilterSensitiveLog = EstimateTemplateCostInputFilterSensitiveLog;
    var EstimateTemplateCostOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.EstimateTemplateCostOutputFilterSensitiveLog = EstimateTemplateCostOutputFilterSensitiveLog;
    var ExecuteChangeSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ExecuteChangeSetInputFilterSensitiveLog = ExecuteChangeSetInputFilterSensitiveLog;
    var ExecuteChangeSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ExecuteChangeSetOutputFilterSensitiveLog = ExecuteChangeSetOutputFilterSensitiveLog;
    var GetStackPolicyInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetStackPolicyInputFilterSensitiveLog = GetStackPolicyInputFilterSensitiveLog;
    var GetStackPolicyOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetStackPolicyOutputFilterSensitiveLog = GetStackPolicyOutputFilterSensitiveLog;
    var GetTemplateInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetTemplateInputFilterSensitiveLog = GetTemplateInputFilterSensitiveLog;
    var GetTemplateOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetTemplateOutputFilterSensitiveLog = GetTemplateOutputFilterSensitiveLog;
    var GetTemplateSummaryInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetTemplateSummaryInputFilterSensitiveLog = GetTemplateSummaryInputFilterSensitiveLog;
    var ParameterConstraintsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParameterConstraintsFilterSensitiveLog = ParameterConstraintsFilterSensitiveLog;
    var ParameterDeclarationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ParameterDeclarationFilterSensitiveLog = ParameterDeclarationFilterSensitiveLog;
    var ResourceIdentifierSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ResourceIdentifierSummaryFilterSensitiveLog = ResourceIdentifierSummaryFilterSensitiveLog;
    var GetTemplateSummaryOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.GetTemplateSummaryOutputFilterSensitiveLog = GetTemplateSummaryOutputFilterSensitiveLog;
    var ImportStacksToStackSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ImportStacksToStackSetInputFilterSensitiveLog = ImportStacksToStackSetInputFilterSensitiveLog;
    var ImportStacksToStackSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ImportStacksToStackSetOutputFilterSensitiveLog = ImportStacksToStackSetOutputFilterSensitiveLog;
    var ListChangeSetsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListChangeSetsInputFilterSensitiveLog = ListChangeSetsInputFilterSensitiveLog;
    var ListChangeSetsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListChangeSetsOutputFilterSensitiveLog = ListChangeSetsOutputFilterSensitiveLog;
    var ListExportsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListExportsInputFilterSensitiveLog = ListExportsInputFilterSensitiveLog;
    var ExportFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ExportFilterSensitiveLog = ExportFilterSensitiveLog;
    var ListExportsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListExportsOutputFilterSensitiveLog = ListExportsOutputFilterSensitiveLog;
    var ListImportsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListImportsInputFilterSensitiveLog = ListImportsInputFilterSensitiveLog;
    var ListImportsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListImportsOutputFilterSensitiveLog = ListImportsOutputFilterSensitiveLog;
    var StackInstanceFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackInstanceFilterFilterSensitiveLog = StackInstanceFilterFilterSensitiveLog;
    var ListStackInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackInstancesInputFilterSensitiveLog = ListStackInstancesInputFilterSensitiveLog;
    var StackInstanceSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackInstanceSummaryFilterSensitiveLog = StackInstanceSummaryFilterSensitiveLog;
    var ListStackInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackInstancesOutputFilterSensitiveLog = ListStackInstancesOutputFilterSensitiveLog;
    var ListStackResourcesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackResourcesInputFilterSensitiveLog = ListStackResourcesInputFilterSensitiveLog;
    var StackResourceDriftInformationSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackResourceDriftInformationSummaryFilterSensitiveLog = StackResourceDriftInformationSummaryFilterSensitiveLog;
    var StackResourceSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackResourceSummaryFilterSensitiveLog = StackResourceSummaryFilterSensitiveLog;
    var ListStackResourcesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackResourcesOutputFilterSensitiveLog = ListStackResourcesOutputFilterSensitiveLog;
    var ListStacksInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStacksInputFilterSensitiveLog = ListStacksInputFilterSensitiveLog;
    var StackDriftInformationSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackDriftInformationSummaryFilterSensitiveLog = StackDriftInformationSummaryFilterSensitiveLog;
    var StackSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSummaryFilterSensitiveLog = StackSummaryFilterSensitiveLog;
    var ListStacksOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStacksOutputFilterSensitiveLog = ListStacksOutputFilterSensitiveLog;
    var OperationResultFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.OperationResultFilterFilterSensitiveLog = OperationResultFilterFilterSensitiveLog;
    var ListStackSetOperationResultsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackSetOperationResultsInputFilterSensitiveLog = ListStackSetOperationResultsInputFilterSensitiveLog;
    var StackSetOperationResultSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetOperationResultSummaryFilterSensitiveLog = StackSetOperationResultSummaryFilterSensitiveLog;
    var ListStackSetOperationResultsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackSetOperationResultsOutputFilterSensitiveLog = ListStackSetOperationResultsOutputFilterSensitiveLog;
    var ListStackSetOperationsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackSetOperationsInputFilterSensitiveLog = ListStackSetOperationsInputFilterSensitiveLog;
    var StackSetOperationSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetOperationSummaryFilterSensitiveLog = StackSetOperationSummaryFilterSensitiveLog;
    var ListStackSetOperationsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackSetOperationsOutputFilterSensitiveLog = ListStackSetOperationsOutputFilterSensitiveLog;
    var ListStackSetsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackSetsInputFilterSensitiveLog = ListStackSetsInputFilterSensitiveLog;
    var StackSetSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StackSetSummaryFilterSensitiveLog = StackSetSummaryFilterSensitiveLog;
    var ListStackSetsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListStackSetsOutputFilterSensitiveLog = ListStackSetsOutputFilterSensitiveLog;
    var ListTypeRegistrationsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTypeRegistrationsInputFilterSensitiveLog = ListTypeRegistrationsInputFilterSensitiveLog;
    var ListTypeRegistrationsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTypeRegistrationsOutputFilterSensitiveLog = ListTypeRegistrationsOutputFilterSensitiveLog;
    var TypeFiltersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TypeFiltersFilterSensitiveLog = TypeFiltersFilterSensitiveLog;
    var ListTypesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTypesInputFilterSensitiveLog = ListTypesInputFilterSensitiveLog;
    var TypeSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TypeSummaryFilterSensitiveLog = TypeSummaryFilterSensitiveLog;
    var ListTypesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTypesOutputFilterSensitiveLog = ListTypesOutputFilterSensitiveLog;
    var ListTypeVersionsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTypeVersionsInputFilterSensitiveLog = ListTypeVersionsInputFilterSensitiveLog;
    var TypeVersionSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TypeVersionSummaryFilterSensitiveLog = TypeVersionSummaryFilterSensitiveLog;
    var ListTypeVersionsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ListTypeVersionsOutputFilterSensitiveLog = ListTypeVersionsOutputFilterSensitiveLog;
    var PublishTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PublishTypeInputFilterSensitiveLog = PublishTypeInputFilterSensitiveLog;
    var PublishTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.PublishTypeOutputFilterSensitiveLog = PublishTypeOutputFilterSensitiveLog;
    var RecordHandlerProgressInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RecordHandlerProgressInputFilterSensitiveLog = RecordHandlerProgressInputFilterSensitiveLog;
    var RecordHandlerProgressOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RecordHandlerProgressOutputFilterSensitiveLog = RecordHandlerProgressOutputFilterSensitiveLog;
    var RegisterPublisherInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterPublisherInputFilterSensitiveLog = RegisterPublisherInputFilterSensitiveLog;
    var RegisterPublisherOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterPublisherOutputFilterSensitiveLog = RegisterPublisherOutputFilterSensitiveLog;
    var RegisterTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterTypeInputFilterSensitiveLog = RegisterTypeInputFilterSensitiveLog;
    var RegisterTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RegisterTypeOutputFilterSensitiveLog = RegisterTypeOutputFilterSensitiveLog;
    var RollbackStackInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RollbackStackInputFilterSensitiveLog = RollbackStackInputFilterSensitiveLog;
    var RollbackStackOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.RollbackStackOutputFilterSensitiveLog = RollbackStackOutputFilterSensitiveLog;
    var SetStackPolicyInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetStackPolicyInputFilterSensitiveLog = SetStackPolicyInputFilterSensitiveLog;
    var SetTypeConfigurationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetTypeConfigurationInputFilterSensitiveLog = SetTypeConfigurationInputFilterSensitiveLog;
    var SetTypeConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetTypeConfigurationOutputFilterSensitiveLog = SetTypeConfigurationOutputFilterSensitiveLog;
    var SetTypeDefaultVersionInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetTypeDefaultVersionInputFilterSensitiveLog = SetTypeDefaultVersionInputFilterSensitiveLog;
    var SetTypeDefaultVersionOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SetTypeDefaultVersionOutputFilterSensitiveLog = SetTypeDefaultVersionOutputFilterSensitiveLog;
    var SignalResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.SignalResourceInputFilterSensitiveLog = SignalResourceInputFilterSensitiveLog;
    var StopStackSetOperationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StopStackSetOperationInputFilterSensitiveLog = StopStackSetOperationInputFilterSensitiveLog;
    var StopStackSetOperationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.StopStackSetOperationOutputFilterSensitiveLog = StopStackSetOperationOutputFilterSensitiveLog;
    var TestTypeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TestTypeInputFilterSensitiveLog = TestTypeInputFilterSensitiveLog;
    var TestTypeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TestTypeOutputFilterSensitiveLog = TestTypeOutputFilterSensitiveLog;
    var UpdateStackInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateStackInputFilterSensitiveLog = UpdateStackInputFilterSensitiveLog;
    var UpdateStackOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateStackOutputFilterSensitiveLog = UpdateStackOutputFilterSensitiveLog;
    var UpdateStackInstancesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateStackInstancesInputFilterSensitiveLog = UpdateStackInstancesInputFilterSensitiveLog;
    var UpdateStackInstancesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateStackInstancesOutputFilterSensitiveLog = UpdateStackInstancesOutputFilterSensitiveLog;
    var UpdateStackSetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateStackSetInputFilterSensitiveLog = UpdateStackSetInputFilterSensitiveLog;
    var UpdateStackSetOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateStackSetOutputFilterSensitiveLog = UpdateStackSetOutputFilterSensitiveLog;
    var UpdateTerminationProtectionInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateTerminationProtectionInputFilterSensitiveLog = UpdateTerminationProtectionInputFilterSensitiveLog;
    var UpdateTerminationProtectionOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.UpdateTerminationProtectionOutputFilterSensitiveLog = UpdateTerminationProtectionOutputFilterSensitiveLog;
    var ValidateTemplateInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ValidateTemplateInputFilterSensitiveLog = ValidateTemplateInputFilterSensitiveLog;
    var TemplateParameterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.TemplateParameterFilterSensitiveLog = TemplateParameterFilterSensitiveLog;
    var ValidateTemplateOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports.ValidateTemplateOutputFilterSensitiveLog = ValidateTemplateOutputFilterSensitiveLog;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/protocols/Aws_query.js
var require_Aws_query2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_queryListTypeVersionsCommand = exports.serializeAws_queryListTypesCommand = exports.serializeAws_queryListTypeRegistrationsCommand = exports.serializeAws_queryListStackSetsCommand = exports.serializeAws_queryListStackSetOperationsCommand = exports.serializeAws_queryListStackSetOperationResultsCommand = exports.serializeAws_queryListStacksCommand = exports.serializeAws_queryListStackResourcesCommand = exports.serializeAws_queryListStackInstancesCommand = exports.serializeAws_queryListImportsCommand = exports.serializeAws_queryListExportsCommand = exports.serializeAws_queryListChangeSetsCommand = exports.serializeAws_queryImportStacksToStackSetCommand = exports.serializeAws_queryGetTemplateSummaryCommand = exports.serializeAws_queryGetTemplateCommand = exports.serializeAws_queryGetStackPolicyCommand = exports.serializeAws_queryExecuteChangeSetCommand = exports.serializeAws_queryEstimateTemplateCostCommand = exports.serializeAws_queryDetectStackSetDriftCommand = exports.serializeAws_queryDetectStackResourceDriftCommand = exports.serializeAws_queryDetectStackDriftCommand = exports.serializeAws_queryDescribeTypeRegistrationCommand = exports.serializeAws_queryDescribeTypeCommand = exports.serializeAws_queryDescribeStackSetOperationCommand = exports.serializeAws_queryDescribeStackSetCommand = exports.serializeAws_queryDescribeStacksCommand = exports.serializeAws_queryDescribeStackResourcesCommand = exports.serializeAws_queryDescribeStackResourceDriftsCommand = exports.serializeAws_queryDescribeStackResourceCommand = exports.serializeAws_queryDescribeStackInstanceCommand = exports.serializeAws_queryDescribeStackEventsCommand = exports.serializeAws_queryDescribeStackDriftDetectionStatusCommand = exports.serializeAws_queryDescribePublisherCommand = exports.serializeAws_queryDescribeChangeSetHooksCommand = exports.serializeAws_queryDescribeChangeSetCommand = exports.serializeAws_queryDescribeAccountLimitsCommand = exports.serializeAws_queryDeregisterTypeCommand = exports.serializeAws_queryDeleteStackSetCommand = exports.serializeAws_queryDeleteStackInstancesCommand = exports.serializeAws_queryDeleteStackCommand = exports.serializeAws_queryDeleteChangeSetCommand = exports.serializeAws_queryDeactivateTypeCommand = exports.serializeAws_queryCreateStackSetCommand = exports.serializeAws_queryCreateStackInstancesCommand = exports.serializeAws_queryCreateStackCommand = exports.serializeAws_queryCreateChangeSetCommand = exports.serializeAws_queryContinueUpdateRollbackCommand = exports.serializeAws_queryCancelUpdateStackCommand = exports.serializeAws_queryBatchDescribeTypeConfigurationsCommand = exports.serializeAws_queryActivateTypeCommand = void 0;
    exports.deserializeAws_queryExecuteChangeSetCommand = exports.deserializeAws_queryEstimateTemplateCostCommand = exports.deserializeAws_queryDetectStackSetDriftCommand = exports.deserializeAws_queryDetectStackResourceDriftCommand = exports.deserializeAws_queryDetectStackDriftCommand = exports.deserializeAws_queryDescribeTypeRegistrationCommand = exports.deserializeAws_queryDescribeTypeCommand = exports.deserializeAws_queryDescribeStackSetOperationCommand = exports.deserializeAws_queryDescribeStackSetCommand = exports.deserializeAws_queryDescribeStacksCommand = exports.deserializeAws_queryDescribeStackResourcesCommand = exports.deserializeAws_queryDescribeStackResourceDriftsCommand = exports.deserializeAws_queryDescribeStackResourceCommand = exports.deserializeAws_queryDescribeStackInstanceCommand = exports.deserializeAws_queryDescribeStackEventsCommand = exports.deserializeAws_queryDescribeStackDriftDetectionStatusCommand = exports.deserializeAws_queryDescribePublisherCommand = exports.deserializeAws_queryDescribeChangeSetHooksCommand = exports.deserializeAws_queryDescribeChangeSetCommand = exports.deserializeAws_queryDescribeAccountLimitsCommand = exports.deserializeAws_queryDeregisterTypeCommand = exports.deserializeAws_queryDeleteStackSetCommand = exports.deserializeAws_queryDeleteStackInstancesCommand = exports.deserializeAws_queryDeleteStackCommand = exports.deserializeAws_queryDeleteChangeSetCommand = exports.deserializeAws_queryDeactivateTypeCommand = exports.deserializeAws_queryCreateStackSetCommand = exports.deserializeAws_queryCreateStackInstancesCommand = exports.deserializeAws_queryCreateStackCommand = exports.deserializeAws_queryCreateChangeSetCommand = exports.deserializeAws_queryContinueUpdateRollbackCommand = exports.deserializeAws_queryCancelUpdateStackCommand = exports.deserializeAws_queryBatchDescribeTypeConfigurationsCommand = exports.deserializeAws_queryActivateTypeCommand = exports.serializeAws_queryValidateTemplateCommand = exports.serializeAws_queryUpdateTerminationProtectionCommand = exports.serializeAws_queryUpdateStackSetCommand = exports.serializeAws_queryUpdateStackInstancesCommand = exports.serializeAws_queryUpdateStackCommand = exports.serializeAws_queryTestTypeCommand = exports.serializeAws_queryStopStackSetOperationCommand = exports.serializeAws_querySignalResourceCommand = exports.serializeAws_querySetTypeDefaultVersionCommand = exports.serializeAws_querySetTypeConfigurationCommand = exports.serializeAws_querySetStackPolicyCommand = exports.serializeAws_queryRollbackStackCommand = exports.serializeAws_queryRegisterTypeCommand = exports.serializeAws_queryRegisterPublisherCommand = exports.serializeAws_queryRecordHandlerProgressCommand = exports.serializeAws_queryPublishTypeCommand = void 0;
    exports.deserializeAws_queryValidateTemplateCommand = exports.deserializeAws_queryUpdateTerminationProtectionCommand = exports.deserializeAws_queryUpdateStackSetCommand = exports.deserializeAws_queryUpdateStackInstancesCommand = exports.deserializeAws_queryUpdateStackCommand = exports.deserializeAws_queryTestTypeCommand = exports.deserializeAws_queryStopStackSetOperationCommand = exports.deserializeAws_querySignalResourceCommand = exports.deserializeAws_querySetTypeDefaultVersionCommand = exports.deserializeAws_querySetTypeConfigurationCommand = exports.deserializeAws_querySetStackPolicyCommand = exports.deserializeAws_queryRollbackStackCommand = exports.deserializeAws_queryRegisterTypeCommand = exports.deserializeAws_queryRegisterPublisherCommand = exports.deserializeAws_queryRecordHandlerProgressCommand = exports.deserializeAws_queryPublishTypeCommand = exports.deserializeAws_queryListTypeVersionsCommand = exports.deserializeAws_queryListTypesCommand = exports.deserializeAws_queryListTypeRegistrationsCommand = exports.deserializeAws_queryListStackSetsCommand = exports.deserializeAws_queryListStackSetOperationsCommand = exports.deserializeAws_queryListStackSetOperationResultsCommand = exports.deserializeAws_queryListStacksCommand = exports.deserializeAws_queryListStackResourcesCommand = exports.deserializeAws_queryListStackInstancesCommand = exports.deserializeAws_queryListImportsCommand = exports.deserializeAws_queryListExportsCommand = exports.deserializeAws_queryListChangeSetsCommand = exports.deserializeAws_queryImportStacksToStackSetCommand = exports.deserializeAws_queryGetTemplateSummaryCommand = exports.deserializeAws_queryGetTemplateCommand = exports.deserializeAws_queryGetStackPolicyCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var fast_xml_parser_1 = require_fxp();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var CloudFormationServiceException_1 = require_CloudFormationServiceException();
    var models_0_1 = require_models_05();
    var serializeAws_queryActivateTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryActivateTypeInput(input, context),
        Action: "ActivateType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryActivateTypeCommand = serializeAws_queryActivateTypeCommand;
    var serializeAws_queryBatchDescribeTypeConfigurationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryBatchDescribeTypeConfigurationsInput(input, context),
        Action: "BatchDescribeTypeConfigurations",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryBatchDescribeTypeConfigurationsCommand = serializeAws_queryBatchDescribeTypeConfigurationsCommand;
    var serializeAws_queryCancelUpdateStackCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCancelUpdateStackInput(input, context),
        Action: "CancelUpdateStack",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCancelUpdateStackCommand = serializeAws_queryCancelUpdateStackCommand;
    var serializeAws_queryContinueUpdateRollbackCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryContinueUpdateRollbackInput(input, context),
        Action: "ContinueUpdateRollback",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryContinueUpdateRollbackCommand = serializeAws_queryContinueUpdateRollbackCommand;
    var serializeAws_queryCreateChangeSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateChangeSetInput(input, context),
        Action: "CreateChangeSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateChangeSetCommand = serializeAws_queryCreateChangeSetCommand;
    var serializeAws_queryCreateStackCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateStackInput(input, context),
        Action: "CreateStack",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateStackCommand = serializeAws_queryCreateStackCommand;
    var serializeAws_queryCreateStackInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateStackInstancesInput(input, context),
        Action: "CreateStackInstances",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateStackInstancesCommand = serializeAws_queryCreateStackInstancesCommand;
    var serializeAws_queryCreateStackSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryCreateStackSetInput(input, context),
        Action: "CreateStackSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryCreateStackSetCommand = serializeAws_queryCreateStackSetCommand;
    var serializeAws_queryDeactivateTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeactivateTypeInput(input, context),
        Action: "DeactivateType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeactivateTypeCommand = serializeAws_queryDeactivateTypeCommand;
    var serializeAws_queryDeleteChangeSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteChangeSetInput(input, context),
        Action: "DeleteChangeSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteChangeSetCommand = serializeAws_queryDeleteChangeSetCommand;
    var serializeAws_queryDeleteStackCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteStackInput(input, context),
        Action: "DeleteStack",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteStackCommand = serializeAws_queryDeleteStackCommand;
    var serializeAws_queryDeleteStackInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteStackInstancesInput(input, context),
        Action: "DeleteStackInstances",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteStackInstancesCommand = serializeAws_queryDeleteStackInstancesCommand;
    var serializeAws_queryDeleteStackSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteStackSetInput(input, context),
        Action: "DeleteStackSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeleteStackSetCommand = serializeAws_queryDeleteStackSetCommand;
    var serializeAws_queryDeregisterTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDeregisterTypeInput(input, context),
        Action: "DeregisterType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDeregisterTypeCommand = serializeAws_queryDeregisterTypeCommand;
    var serializeAws_queryDescribeAccountLimitsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeAccountLimitsInput(input, context),
        Action: "DescribeAccountLimits",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeAccountLimitsCommand = serializeAws_queryDescribeAccountLimitsCommand;
    var serializeAws_queryDescribeChangeSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeChangeSetInput(input, context),
        Action: "DescribeChangeSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeChangeSetCommand = serializeAws_queryDescribeChangeSetCommand;
    var serializeAws_queryDescribeChangeSetHooksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeChangeSetHooksInput(input, context),
        Action: "DescribeChangeSetHooks",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeChangeSetHooksCommand = serializeAws_queryDescribeChangeSetHooksCommand;
    var serializeAws_queryDescribePublisherCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribePublisherInput(input, context),
        Action: "DescribePublisher",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribePublisherCommand = serializeAws_queryDescribePublisherCommand;
    var serializeAws_queryDescribeStackDriftDetectionStatusCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackDriftDetectionStatusInput(input, context),
        Action: "DescribeStackDriftDetectionStatus",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackDriftDetectionStatusCommand = serializeAws_queryDescribeStackDriftDetectionStatusCommand;
    var serializeAws_queryDescribeStackEventsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackEventsInput(input, context),
        Action: "DescribeStackEvents",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackEventsCommand = serializeAws_queryDescribeStackEventsCommand;
    var serializeAws_queryDescribeStackInstanceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackInstanceInput(input, context),
        Action: "DescribeStackInstance",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackInstanceCommand = serializeAws_queryDescribeStackInstanceCommand;
    var serializeAws_queryDescribeStackResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackResourceInput(input, context),
        Action: "DescribeStackResource",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackResourceCommand = serializeAws_queryDescribeStackResourceCommand;
    var serializeAws_queryDescribeStackResourceDriftsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackResourceDriftsInput(input, context),
        Action: "DescribeStackResourceDrifts",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackResourceDriftsCommand = serializeAws_queryDescribeStackResourceDriftsCommand;
    var serializeAws_queryDescribeStackResourcesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackResourcesInput(input, context),
        Action: "DescribeStackResources",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackResourcesCommand = serializeAws_queryDescribeStackResourcesCommand;
    var serializeAws_queryDescribeStacksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStacksInput(input, context),
        Action: "DescribeStacks",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStacksCommand = serializeAws_queryDescribeStacksCommand;
    var serializeAws_queryDescribeStackSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackSetInput(input, context),
        Action: "DescribeStackSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackSetCommand = serializeAws_queryDescribeStackSetCommand;
    var serializeAws_queryDescribeStackSetOperationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackSetOperationInput(input, context),
        Action: "DescribeStackSetOperation",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeStackSetOperationCommand = serializeAws_queryDescribeStackSetOperationCommand;
    var serializeAws_queryDescribeTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTypeInput(input, context),
        Action: "DescribeType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeTypeCommand = serializeAws_queryDescribeTypeCommand;
    var serializeAws_queryDescribeTypeRegistrationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTypeRegistrationInput(input, context),
        Action: "DescribeTypeRegistration",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDescribeTypeRegistrationCommand = serializeAws_queryDescribeTypeRegistrationCommand;
    var serializeAws_queryDetectStackDriftCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDetectStackDriftInput(input, context),
        Action: "DetectStackDrift",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDetectStackDriftCommand = serializeAws_queryDetectStackDriftCommand;
    var serializeAws_queryDetectStackResourceDriftCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDetectStackResourceDriftInput(input, context),
        Action: "DetectStackResourceDrift",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDetectStackResourceDriftCommand = serializeAws_queryDetectStackResourceDriftCommand;
    var serializeAws_queryDetectStackSetDriftCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDetectStackSetDriftInput(input, context),
        Action: "DetectStackSetDrift",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDetectStackSetDriftCommand = serializeAws_queryDetectStackSetDriftCommand;
    var serializeAws_queryEstimateTemplateCostCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryEstimateTemplateCostInput(input, context),
        Action: "EstimateTemplateCost",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryEstimateTemplateCostCommand = serializeAws_queryEstimateTemplateCostCommand;
    var serializeAws_queryExecuteChangeSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryExecuteChangeSetInput(input, context),
        Action: "ExecuteChangeSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryExecuteChangeSetCommand = serializeAws_queryExecuteChangeSetCommand;
    var serializeAws_queryGetStackPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetStackPolicyInput(input, context),
        Action: "GetStackPolicy",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetStackPolicyCommand = serializeAws_queryGetStackPolicyCommand;
    var serializeAws_queryGetTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetTemplateInput(input, context),
        Action: "GetTemplate",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetTemplateCommand = serializeAws_queryGetTemplateCommand;
    var serializeAws_queryGetTemplateSummaryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetTemplateSummaryInput(input, context),
        Action: "GetTemplateSummary",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetTemplateSummaryCommand = serializeAws_queryGetTemplateSummaryCommand;
    var serializeAws_queryImportStacksToStackSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryImportStacksToStackSetInput(input, context),
        Action: "ImportStacksToStackSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryImportStacksToStackSetCommand = serializeAws_queryImportStacksToStackSetCommand;
    var serializeAws_queryListChangeSetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListChangeSetsInput(input, context),
        Action: "ListChangeSets",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListChangeSetsCommand = serializeAws_queryListChangeSetsCommand;
    var serializeAws_queryListExportsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListExportsInput(input, context),
        Action: "ListExports",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListExportsCommand = serializeAws_queryListExportsCommand;
    var serializeAws_queryListImportsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListImportsInput(input, context),
        Action: "ListImports",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListImportsCommand = serializeAws_queryListImportsCommand;
    var serializeAws_queryListStackInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListStackInstancesInput(input, context),
        Action: "ListStackInstances",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListStackInstancesCommand = serializeAws_queryListStackInstancesCommand;
    var serializeAws_queryListStackResourcesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListStackResourcesInput(input, context),
        Action: "ListStackResources",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListStackResourcesCommand = serializeAws_queryListStackResourcesCommand;
    var serializeAws_queryListStacksCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListStacksInput(input, context),
        Action: "ListStacks",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListStacksCommand = serializeAws_queryListStacksCommand;
    var serializeAws_queryListStackSetOperationResultsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListStackSetOperationResultsInput(input, context),
        Action: "ListStackSetOperationResults",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListStackSetOperationResultsCommand = serializeAws_queryListStackSetOperationResultsCommand;
    var serializeAws_queryListStackSetOperationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListStackSetOperationsInput(input, context),
        Action: "ListStackSetOperations",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListStackSetOperationsCommand = serializeAws_queryListStackSetOperationsCommand;
    var serializeAws_queryListStackSetsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListStackSetsInput(input, context),
        Action: "ListStackSets",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListStackSetsCommand = serializeAws_queryListStackSetsCommand;
    var serializeAws_queryListTypeRegistrationsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListTypeRegistrationsInput(input, context),
        Action: "ListTypeRegistrations",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListTypeRegistrationsCommand = serializeAws_queryListTypeRegistrationsCommand;
    var serializeAws_queryListTypesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListTypesInput(input, context),
        Action: "ListTypes",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListTypesCommand = serializeAws_queryListTypesCommand;
    var serializeAws_queryListTypeVersionsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryListTypeVersionsInput(input, context),
        Action: "ListTypeVersions",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryListTypeVersionsCommand = serializeAws_queryListTypeVersionsCommand;
    var serializeAws_queryPublishTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryPublishTypeInput(input, context),
        Action: "PublishType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryPublishTypeCommand = serializeAws_queryPublishTypeCommand;
    var serializeAws_queryRecordHandlerProgressCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRecordHandlerProgressInput(input, context),
        Action: "RecordHandlerProgress",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRecordHandlerProgressCommand = serializeAws_queryRecordHandlerProgressCommand;
    var serializeAws_queryRegisterPublisherCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRegisterPublisherInput(input, context),
        Action: "RegisterPublisher",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRegisterPublisherCommand = serializeAws_queryRegisterPublisherCommand;
    var serializeAws_queryRegisterTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRegisterTypeInput(input, context),
        Action: "RegisterType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRegisterTypeCommand = serializeAws_queryRegisterTypeCommand;
    var serializeAws_queryRollbackStackCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryRollbackStackInput(input, context),
        Action: "RollbackStack",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryRollbackStackCommand = serializeAws_queryRollbackStackCommand;
    var serializeAws_querySetStackPolicyCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySetStackPolicyInput(input, context),
        Action: "SetStackPolicy",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySetStackPolicyCommand = serializeAws_querySetStackPolicyCommand;
    var serializeAws_querySetTypeConfigurationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySetTypeConfigurationInput(input, context),
        Action: "SetTypeConfiguration",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySetTypeConfigurationCommand = serializeAws_querySetTypeConfigurationCommand;
    var serializeAws_querySetTypeDefaultVersionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySetTypeDefaultVersionInput(input, context),
        Action: "SetTypeDefaultVersion",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySetTypeDefaultVersionCommand = serializeAws_querySetTypeDefaultVersionCommand;
    var serializeAws_querySignalResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_querySignalResourceInput(input, context),
        Action: "SignalResource",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_querySignalResourceCommand = serializeAws_querySignalResourceCommand;
    var serializeAws_queryStopStackSetOperationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryStopStackSetOperationInput(input, context),
        Action: "StopStackSetOperation",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryStopStackSetOperationCommand = serializeAws_queryStopStackSetOperationCommand;
    var serializeAws_queryTestTypeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryTestTypeInput(input, context),
        Action: "TestType",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryTestTypeCommand = serializeAws_queryTestTypeCommand;
    var serializeAws_queryUpdateStackCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateStackInput(input, context),
        Action: "UpdateStack",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateStackCommand = serializeAws_queryUpdateStackCommand;
    var serializeAws_queryUpdateStackInstancesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateStackInstancesInput(input, context),
        Action: "UpdateStackInstances",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateStackInstancesCommand = serializeAws_queryUpdateStackInstancesCommand;
    var serializeAws_queryUpdateStackSetCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateStackSetInput(input, context),
        Action: "UpdateStackSet",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateStackSetCommand = serializeAws_queryUpdateStackSetCommand;
    var serializeAws_queryUpdateTerminationProtectionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateTerminationProtectionInput(input, context),
        Action: "UpdateTerminationProtection",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryUpdateTerminationProtectionCommand = serializeAws_queryUpdateTerminationProtectionCommand;
    var serializeAws_queryValidateTemplateCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryValidateTemplateInput(input, context),
        Action: "ValidateTemplate",
        Version: "2010-05-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryValidateTemplateCommand = serializeAws_queryValidateTemplateCommand;
    var deserializeAws_queryActivateTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryActivateTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryActivateTypeOutput(data.ActivateTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryActivateTypeCommand = deserializeAws_queryActivateTypeCommand;
    var deserializeAws_queryActivateTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryBatchDescribeTypeConfigurationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryBatchDescribeTypeConfigurationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryBatchDescribeTypeConfigurationsOutput(data.BatchDescribeTypeConfigurationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryBatchDescribeTypeConfigurationsCommand = deserializeAws_queryBatchDescribeTypeConfigurationsCommand;
    var deserializeAws_queryBatchDescribeTypeConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeConfigurationNotFoundException":
        case "com.amazonaws.cloudformation#TypeConfigurationNotFoundException":
          throw await deserializeAws_queryTypeConfigurationNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCancelUpdateStackCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCancelUpdateStackCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCancelUpdateStackCommand = deserializeAws_queryCancelUpdateStackCommand;
    var deserializeAws_queryCancelUpdateStackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryContinueUpdateRollbackCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryContinueUpdateRollbackCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryContinueUpdateRollbackOutput(data.ContinueUpdateRollbackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryContinueUpdateRollbackCommand = deserializeAws_queryContinueUpdateRollbackCommand;
    var deserializeAws_queryContinueUpdateRollbackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateChangeSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateChangeSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateChangeSetOutput(data.CreateChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateChangeSetCommand = deserializeAws_queryCreateChangeSetCommand;
    var deserializeAws_queryCreateChangeSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.cloudformation#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
          throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateStackCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStackCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateStackOutput(data.CreateStackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateStackCommand = deserializeAws_queryCreateStackCommand;
    var deserializeAws_queryCreateStackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.cloudformation#AlreadyExistsException":
          throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
          throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateStackInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStackInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateStackInstancesOutput(data.CreateStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateStackInstancesCommand = deserializeAws_queryCreateStackInstancesCommand;
    var deserializeAws_queryCreateStackInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
          throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
          throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryCreateStackSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStackSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryCreateStackSetOutput(data.CreateStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryCreateStackSetCommand = deserializeAws_queryCreateStackSetCommand;
    var deserializeAws_queryCreateStackSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CreatedButModifiedException":
        case "com.amazonaws.cloudformation#CreatedButModifiedException":
          throw await deserializeAws_queryCreatedButModifiedExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NameAlreadyExistsException":
        case "com.amazonaws.cloudformation#NameAlreadyExistsException":
          throw await deserializeAws_queryNameAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeactivateTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeactivateTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeactivateTypeOutput(data.DeactivateTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeactivateTypeCommand = deserializeAws_queryDeactivateTypeCommand;
    var deserializeAws_queryDeactivateTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteChangeSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteChangeSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteChangeSetOutput(data.DeleteChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteChangeSetCommand = deserializeAws_queryDeleteChangeSetCommand;
    var deserializeAws_queryDeleteChangeSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidChangeSetStatus":
        case "com.amazonaws.cloudformation#InvalidChangeSetStatusException":
          throw await deserializeAws_queryInvalidChangeSetStatusExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteStackCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteStackCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteStackCommand = deserializeAws_queryDeleteStackCommand;
    var deserializeAws_queryDeleteStackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteStackInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteStackInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteStackInstancesOutput(data.DeleteStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteStackInstancesCommand = deserializeAws_queryDeleteStackInstancesCommand;
    var deserializeAws_queryDeleteStackInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
          throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
          throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeleteStackSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteStackSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeleteStackSetOutput(data.DeleteStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeleteStackSetCommand = deserializeAws_queryDeleteStackSetCommand;
    var deserializeAws_queryDeleteStackSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotEmptyException":
        case "com.amazonaws.cloudformation#StackSetNotEmptyException":
          throw await deserializeAws_queryStackSetNotEmptyExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDeregisterTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDeregisterTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDeregisterTypeOutput(data.DeregisterTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDeregisterTypeCommand = deserializeAws_queryDeregisterTypeCommand;
    var deserializeAws_queryDeregisterTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeAccountLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeAccountLimitsOutput(data.DescribeAccountLimitsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeAccountLimitsCommand = deserializeAws_queryDescribeAccountLimitsCommand;
    var deserializeAws_queryDescribeAccountLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeChangeSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeChangeSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeChangeSetOutput(data.DescribeChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeChangeSetCommand = deserializeAws_queryDescribeChangeSetCommand;
    var deserializeAws_queryDescribeChangeSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
          throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeChangeSetHooksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeChangeSetHooksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeChangeSetHooksOutput(data.DescribeChangeSetHooksResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeChangeSetHooksCommand = deserializeAws_queryDescribeChangeSetHooksCommand;
    var deserializeAws_queryDescribeChangeSetHooksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
          throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribePublisherCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePublisherCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribePublisherOutput(data.DescribePublisherResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribePublisherCommand = deserializeAws_queryDescribePublisherCommand;
    var deserializeAws_queryDescribePublisherCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeStackDriftDetectionStatusCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackDriftDetectionStatusCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackDriftDetectionStatusOutput(data.DescribeStackDriftDetectionStatusResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackDriftDetectionStatusCommand = deserializeAws_queryDescribeStackDriftDetectionStatusCommand;
    var deserializeAws_queryDescribeStackDriftDetectionStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeStackEventsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackEventsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackEventsOutput(data.DescribeStackEventsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackEventsCommand = deserializeAws_queryDescribeStackEventsCommand;
    var deserializeAws_queryDescribeStackEventsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeStackInstanceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackInstanceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackInstanceOutput(data.DescribeStackInstanceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackInstanceCommand = deserializeAws_queryDescribeStackInstanceCommand;
    var deserializeAws_queryDescribeStackInstanceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
          throw await deserializeAws_queryStackInstanceNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeStackResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackResourceOutput(data.DescribeStackResourceResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackResourceCommand = deserializeAws_queryDescribeStackResourceCommand;
    var deserializeAws_queryDescribeStackResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeStackResourceDriftsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackResourceDriftsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackResourceDriftsOutput(data.DescribeStackResourceDriftsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackResourceDriftsCommand = deserializeAws_queryDescribeStackResourceDriftsCommand;
    var deserializeAws_queryDescribeStackResourceDriftsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeStackResourcesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackResourcesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackResourcesOutput(data.DescribeStackResourcesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackResourcesCommand = deserializeAws_queryDescribeStackResourcesCommand;
    var deserializeAws_queryDescribeStackResourcesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeStacksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStacksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStacksOutput(data.DescribeStacksResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStacksCommand = deserializeAws_queryDescribeStacksCommand;
    var deserializeAws_queryDescribeStacksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDescribeStackSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackSetOutput(data.DescribeStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackSetCommand = deserializeAws_queryDescribeStackSetCommand;
    var deserializeAws_queryDescribeStackSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeStackSetOperationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackSetOperationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeStackSetOperationOutput(data.DescribeStackSetOperationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeStackSetOperationCommand = deserializeAws_queryDescribeStackSetOperationCommand;
    var deserializeAws_queryDescribeStackSetOperationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
          throw await deserializeAws_queryOperationNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeTypeOutput(data.DescribeTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeTypeCommand = deserializeAws_queryDescribeTypeCommand;
    var deserializeAws_queryDescribeTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDescribeTypeRegistrationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTypeRegistrationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDescribeTypeRegistrationOutput(data.DescribeTypeRegistrationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDescribeTypeRegistrationCommand = deserializeAws_queryDescribeTypeRegistrationCommand;
    var deserializeAws_queryDescribeTypeRegistrationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDetectStackDriftCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDetectStackDriftCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDetectStackDriftOutput(data.DetectStackDriftResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDetectStackDriftCommand = deserializeAws_queryDetectStackDriftCommand;
    var deserializeAws_queryDetectStackDriftCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDetectStackResourceDriftCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDetectStackResourceDriftCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDetectStackResourceDriftOutput(data.DetectStackResourceDriftResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDetectStackResourceDriftCommand = deserializeAws_queryDetectStackResourceDriftCommand;
    var deserializeAws_queryDetectStackResourceDriftCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryDetectStackSetDriftCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDetectStackSetDriftCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDetectStackSetDriftOutput(data.DetectStackSetDriftResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDetectStackSetDriftCommand = deserializeAws_queryDetectStackSetDriftCommand;
    var deserializeAws_queryDetectStackSetDriftCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryEstimateTemplateCostCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryEstimateTemplateCostCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryEstimateTemplateCostOutput(data.EstimateTemplateCostResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryEstimateTemplateCostCommand = deserializeAws_queryEstimateTemplateCostCommand;
    var deserializeAws_queryEstimateTemplateCostCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryExecuteChangeSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryExecuteChangeSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryExecuteChangeSetOutput(data.ExecuteChangeSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryExecuteChangeSetCommand = deserializeAws_queryExecuteChangeSetCommand;
    var deserializeAws_queryExecuteChangeSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
          throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
          throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "InvalidChangeSetStatus":
        case "com.amazonaws.cloudformation#InvalidChangeSetStatusException":
          throw await deserializeAws_queryInvalidChangeSetStatusExceptionResponse(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetStackPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetStackPolicyCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetStackPolicyOutput(data.GetStackPolicyResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetStackPolicyCommand = deserializeAws_queryGetStackPolicyCommand;
    var deserializeAws_queryGetStackPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetTemplateOutput(data.GetTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetTemplateCommand = deserializeAws_queryGetTemplateCommand;
    var deserializeAws_queryGetTemplateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
          throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetTemplateSummaryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetTemplateSummaryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetTemplateSummaryOutput(data.GetTemplateSummaryResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetTemplateSummaryCommand = deserializeAws_queryGetTemplateSummaryCommand;
    var deserializeAws_queryGetTemplateSummaryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryImportStacksToStackSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryImportStacksToStackSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryImportStacksToStackSetOutput(data.ImportStacksToStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryImportStacksToStackSetCommand = deserializeAws_queryImportStacksToStackSetCommand;
    var deserializeAws_queryImportStacksToStackSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
          throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
          throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackNotFoundException":
        case "com.amazonaws.cloudformation#StackNotFoundException":
          throw await deserializeAws_queryStackNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
          throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListChangeSetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListChangeSetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListChangeSetsOutput(data.ListChangeSetsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListChangeSetsCommand = deserializeAws_queryListChangeSetsCommand;
    var deserializeAws_queryListChangeSetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListExportsOutput(data.ListExportsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListExportsCommand = deserializeAws_queryListExportsCommand;
    var deserializeAws_queryListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryListImportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListImportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListImportsOutput(data.ListImportsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListImportsCommand = deserializeAws_queryListImportsCommand;
    var deserializeAws_queryListImportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryListStackInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListStackInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListStackInstancesOutput(data.ListStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListStackInstancesCommand = deserializeAws_queryListStackInstancesCommand;
    var deserializeAws_queryListStackInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListStackResourcesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListStackResourcesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListStackResourcesOutput(data.ListStackResourcesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListStackResourcesCommand = deserializeAws_queryListStackResourcesCommand;
    var deserializeAws_queryListStackResourcesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryListStacksCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListStacksCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListStacksOutput(data.ListStacksResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListStacksCommand = deserializeAws_queryListStacksCommand;
    var deserializeAws_queryListStacksCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryListStackSetOperationResultsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListStackSetOperationResultsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListStackSetOperationResultsOutput(data.ListStackSetOperationResultsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListStackSetOperationResultsCommand = deserializeAws_queryListStackSetOperationResultsCommand;
    var deserializeAws_queryListStackSetOperationResultsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
          throw await deserializeAws_queryOperationNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListStackSetOperationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListStackSetOperationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListStackSetOperationsOutput(data.ListStackSetOperationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListStackSetOperationsCommand = deserializeAws_queryListStackSetOperationsCommand;
    var deserializeAws_queryListStackSetOperationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListStackSetsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListStackSetsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListStackSetsOutput(data.ListStackSetsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListStackSetsCommand = deserializeAws_queryListStackSetsCommand;
    var deserializeAws_queryListStackSetsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryListTypeRegistrationsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListTypeRegistrationsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListTypeRegistrationsOutput(data.ListTypeRegistrationsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListTypeRegistrationsCommand = deserializeAws_queryListTypeRegistrationsCommand;
    var deserializeAws_queryListTypeRegistrationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListTypesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListTypesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListTypesOutput(data.ListTypesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListTypesCommand = deserializeAws_queryListTypesCommand;
    var deserializeAws_queryListTypesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryListTypeVersionsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryListTypeVersionsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryListTypeVersionsOutput(data.ListTypeVersionsResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryListTypeVersionsCommand = deserializeAws_queryListTypeVersionsCommand;
    var deserializeAws_queryListTypeVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryPublishTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryPublishTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryPublishTypeOutput(data.PublishTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryPublishTypeCommand = deserializeAws_queryPublishTypeCommand;
    var deserializeAws_queryPublishTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRecordHandlerProgressCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRecordHandlerProgressCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRecordHandlerProgressOutput(data.RecordHandlerProgressResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRecordHandlerProgressCommand = deserializeAws_queryRecordHandlerProgressCommand;
    var deserializeAws_queryRecordHandlerProgressCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailed":
        case "com.amazonaws.cloudformation#OperationStatusCheckFailedException":
          throw await deserializeAws_queryOperationStatusCheckFailedExceptionResponse(parsedOutput, context);
        case "InvalidStateTransition":
        case "com.amazonaws.cloudformation#InvalidStateTransitionException":
          throw await deserializeAws_queryInvalidStateTransitionExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRegisterPublisherCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRegisterPublisherCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRegisterPublisherOutput(data.RegisterPublisherResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRegisterPublisherCommand = deserializeAws_queryRegisterPublisherCommand;
    var deserializeAws_queryRegisterPublisherCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRegisterTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRegisterTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRegisterTypeOutput(data.RegisterTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRegisterTypeCommand = deserializeAws_queryRegisterTypeCommand;
    var deserializeAws_queryRegisterTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryRollbackStackCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryRollbackStackCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryRollbackStackOutput(data.RollbackStackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryRollbackStackCommand = deserializeAws_queryRollbackStackCommand;
    var deserializeAws_queryRollbackStackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySetStackPolicyCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetStackPolicyCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySetStackPolicyCommand = deserializeAws_querySetStackPolicyCommand;
    var deserializeAws_querySetStackPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_querySetTypeConfigurationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetTypeConfigurationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetTypeConfigurationOutput(data.SetTypeConfigurationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySetTypeConfigurationCommand = deserializeAws_querySetTypeConfigurationCommand;
    var deserializeAws_querySetTypeConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySetTypeDefaultVersionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySetTypeDefaultVersionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_querySetTypeDefaultVersionOutput(data.SetTypeDefaultVersionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySetTypeDefaultVersionCommand = deserializeAws_querySetTypeDefaultVersionCommand;
    var deserializeAws_querySetTypeDefaultVersionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_querySignalResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_querySignalResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_querySignalResourceCommand = deserializeAws_querySignalResourceCommand;
    var deserializeAws_querySignalResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryStopStackSetOperationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryStopStackSetOperationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryStopStackSetOperationOutput(data.StopStackSetOperationResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryStopStackSetOperationCommand = deserializeAws_queryStopStackSetOperationCommand;
    var deserializeAws_queryStopStackSetOperationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
          throw await deserializeAws_queryOperationNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryTestTypeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryTestTypeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryTestTypeOutput(data.TestTypeResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryTestTypeCommand = deserializeAws_queryTestTypeCommand;
    var deserializeAws_queryTestTypeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
          throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
          throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateStackCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateStackCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateStackOutput(data.UpdateStackResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateStackCommand = deserializeAws_queryUpdateStackCommand;
    var deserializeAws_queryUpdateStackCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
          throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
          throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateStackInstancesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateStackInstancesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateStackInstancesOutput(data.UpdateStackInstancesResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateStackInstancesCommand = deserializeAws_queryUpdateStackInstancesCommand;
    var deserializeAws_queryUpdateStackInstancesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
          throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
          throw await deserializeAws_queryStackInstanceNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
          throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateStackSetCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateStackSetCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateStackSetOutput(data.UpdateStackSetResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateStackSetCommand = deserializeAws_queryUpdateStackSetCommand;
    var deserializeAws_queryUpdateStackSetCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
          throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
          throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
          throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
          throw await deserializeAws_queryStackInstanceNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
          throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
          throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryUpdateTerminationProtectionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateTerminationProtectionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryUpdateTerminationProtectionOutput(data.UpdateTerminationProtectionResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryUpdateTerminationProtectionCommand = deserializeAws_queryUpdateTerminationProtectionCommand;
    var deserializeAws_queryUpdateTerminationProtectionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryValidateTemplateCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryValidateTemplateCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryValidateTemplateOutput(data.ValidateTemplateResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryValidateTemplateCommand = deserializeAws_queryValidateTemplateCommand;
    var deserializeAws_queryValidateTemplateCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: CloudFormationServiceException_1.CloudFormationServiceException,
        errorCode
      });
    };
    var deserializeAws_queryAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCFNRegistryExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCFNRegistryException(body.Error, context);
      const exception = new models_0_1.CFNRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryChangeSetNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryChangeSetNotFoundException(body.Error, context);
      const exception = new models_0_1.ChangeSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryCreatedButModifiedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryCreatedButModifiedException(body.Error, context);
      const exception = new models_0_1.CreatedButModifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInsufficientCapabilitiesExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInsufficientCapabilitiesException(body.Error, context);
      const exception = new models_0_1.InsufficientCapabilitiesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidChangeSetStatusExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidChangeSetStatusException(body.Error, context);
      const exception = new models_0_1.InvalidChangeSetStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidOperationExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidOperationException(body.Error, context);
      const exception = new models_0_1.InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidStateTransitionExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidStateTransitionException(body.Error, context);
      const exception = new models_0_1.InvalidStateTransitionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryLimitExceededException(body.Error, context);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryNameAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryNameAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.NameAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOperationIdAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOperationIdAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.OperationIdAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOperationInProgressExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOperationInProgressException(body.Error, context);
      const exception = new models_0_1.OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOperationNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOperationNotFoundException(body.Error, context);
      const exception = new models_0_1.OperationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryOperationStatusCheckFailedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryOperationStatusCheckFailedException(body.Error, context);
      const exception = new models_0_1.OperationStatusCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStackInstanceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStackInstanceNotFoundException(body.Error, context);
      const exception = new models_0_1.StackInstanceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStackNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStackNotFoundException(body.Error, context);
      const exception = new models_0_1.StackNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStackSetNotEmptyExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStackSetNotEmptyException(body.Error, context);
      const exception = new models_0_1.StackSetNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStackSetNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStackSetNotFoundException(body.Error, context);
      const exception = new models_0_1.StackSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryStaleRequestExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryStaleRequestException(body.Error, context);
      const exception = new models_0_1.StaleRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryTokenAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryTokenAlreadyExistsException(body.Error, context);
      const exception = new models_0_1.TokenAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryTypeConfigurationNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryTypeConfigurationNotFoundException(body.Error, context);
      const exception = new models_0_1.TypeConfigurationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryTypeNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryTypeNotFoundException(body.Error, context);
      const exception = new models_0_1.TypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAccountList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryActivateTypeInput = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.PublicTypeArn != null) {
        entries["PublicTypeArn"] = input.PublicTypeArn;
      }
      if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.TypeNameAlias != null) {
        entries["TypeNameAlias"] = input.TypeNameAlias;
      }
      if (input.AutoUpdate != null) {
        entries["AutoUpdate"] = input.AutoUpdate;
      }
      if (input.LoggingConfig != null) {
        const memberEntries = serializeAws_queryLoggingConfig(input.LoggingConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LoggingConfig.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExecutionRoleArn != null) {
        entries["ExecutionRoleArn"] = input.ExecutionRoleArn;
      }
      if (input.VersionBump != null) {
        entries["VersionBump"] = input.VersionBump;
      }
      if (input.MajorVersion != null) {
        entries["MajorVersion"] = input.MajorVersion;
      }
      return entries;
    };
    var serializeAws_queryAutoDeployment = (input, context) => {
      const entries = {};
      if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
      }
      if (input.RetainStacksOnAccountRemoval != null) {
        entries["RetainStacksOnAccountRemoval"] = input.RetainStacksOnAccountRemoval;
      }
      return entries;
    };
    var serializeAws_queryBatchDescribeTypeConfigurationsInput = (input, context) => {
      const entries = {};
      if (input.TypeConfigurationIdentifiers != null) {
        const memberEntries = serializeAws_queryTypeConfigurationIdentifiers(input.TypeConfigurationIdentifiers, context);
        if (input.TypeConfigurationIdentifiers?.length === 0) {
          entries.TypeConfigurationIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TypeConfigurationIdentifiers.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryCancelUpdateStackInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryCapabilities = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryContinueUpdateRollbackInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
      }
      if (input.ResourcesToSkip != null) {
        const memberEntries = serializeAws_queryResourcesToSkip(input.ResourcesToSkip, context);
        if (input.ResourcesToSkip?.length === 0) {
          entries.ResourcesToSkip = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourcesToSkip.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryCreateChangeSetInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.UsePreviousTemplate != null) {
        entries["UsePreviousTemplate"] = input.UsePreviousTemplate;
      }
      if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceTypes != null) {
        const memberEntries = serializeAws_queryResourceTypes(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
          entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
      }
      if (input.RollbackConfiguration != null) {
        const memberEntries = serializeAws_queryRollbackConfiguration(input.RollbackConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NotificationARNs != null) {
        const memberEntries = serializeAws_queryNotificationARNs(input.NotificationARNs, context);
        if (input.NotificationARNs?.length === 0) {
          entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NotificationARNs.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
      }
      if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.ChangeSetType != null) {
        entries["ChangeSetType"] = input.ChangeSetType;
      }
      if (input.ResourcesToImport != null) {
        const memberEntries = serializeAws_queryResourcesToImport(input.ResourcesToImport, context);
        if (input.ResourcesToImport?.length === 0) {
          entries.ResourcesToImport = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourcesToImport.${key}`;
          entries[loc] = value;
        });
      }
      if (input.IncludeNestedStacks != null) {
        entries["IncludeNestedStacks"] = input.IncludeNestedStacks;
      }
      return entries;
    };
    var serializeAws_queryCreateStackInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DisableRollback != null) {
        entries["DisableRollback"] = input.DisableRollback;
      }
      if (input.RollbackConfiguration != null) {
        const memberEntries = serializeAws_queryRollbackConfiguration(input.RollbackConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TimeoutInMinutes != null) {
        entries["TimeoutInMinutes"] = input.TimeoutInMinutes;
      }
      if (input.NotificationARNs != null) {
        const memberEntries = serializeAws_queryNotificationARNs(input.NotificationARNs, context);
        if (input.NotificationARNs?.length === 0) {
          entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NotificationARNs.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceTypes != null) {
        const memberEntries = serializeAws_queryResourceTypes(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
          entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
      }
      if (input.OnFailure != null) {
        entries["OnFailure"] = input.OnFailure;
      }
      if (input.StackPolicyBody != null) {
        entries["StackPolicyBody"] = input.StackPolicyBody;
      }
      if (input.StackPolicyURL != null) {
        entries["StackPolicyURL"] = input.StackPolicyURL;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      if (input.EnableTerminationProtection != null) {
        entries["EnableTerminationProtection"] = input.EnableTerminationProtection;
      }
      return entries;
    };
    var serializeAws_queryCreateStackInstancesInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ParameterOverrides != null) {
        const memberEntries = serializeAws_queryParameters(input.ParameterOverrides, context);
        if (input.ParameterOverrides?.length === 0) {
          entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ParameterOverrides.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationId === void 0) {
        input.OperationId = (0, uuid_1.v4)();
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryCreateStackSetInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.StackId != null) {
        entries["StackId"] = input.StackId;
      }
      if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AdministrationRoleARN != null) {
        entries["AdministrationRoleARN"] = input.AdministrationRoleARN;
      }
      if (input.ExecutionRoleName != null) {
        entries["ExecutionRoleName"] = input.ExecutionRoleName;
      }
      if (input.PermissionModel != null) {
        entries["PermissionModel"] = input.PermissionModel;
      }
      if (input.AutoDeployment != null) {
        const memberEntries = serializeAws_queryAutoDeployment(input.AutoDeployment, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AutoDeployment.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      if (input.ClientRequestToken === void 0) {
        input.ClientRequestToken = (0, uuid_1.v4)();
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      if (input.ManagedExecution != null) {
        const memberEntries = serializeAws_queryManagedExecution(input.ManagedExecution, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ManagedExecution.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDeactivateTypeInput = (input, context) => {
      const entries = {};
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      return entries;
    };
    var serializeAws_queryDeleteChangeSetInput = (input, context) => {
      const entries = {};
      if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
      }
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      return entries;
    };
    var serializeAws_queryDeleteStackInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.RetainResources != null) {
        const memberEntries = serializeAws_queryRetainResources(input.RetainResources, context);
        if (input.RetainResources?.length === 0) {
          entries.RetainResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RetainResources.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryDeleteStackInstancesInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RetainStacks != null) {
        entries["RetainStacks"] = input.RetainStacks;
      }
      if (input.OperationId === void 0) {
        input.OperationId = (0, uuid_1.v4)();
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryDeleteStackSetInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryDeploymentTargets = (input, context) => {
      const entries = {};
      if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AccountsUrl != null) {
        entries["AccountsUrl"] = input.AccountsUrl;
      }
      if (input.OrganizationalUnitIds != null) {
        const memberEntries = serializeAws_queryOrganizationalUnitIdList(input.OrganizationalUnitIds, context);
        if (input.OrganizationalUnitIds?.length === 0) {
          entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OrganizationalUnitIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AccountFilterType != null) {
        entries["AccountFilterType"] = input.AccountFilterType;
      }
      return entries;
    };
    var serializeAws_queryDeregisterTypeInput = (input, context) => {
      const entries = {};
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      return entries;
    };
    var serializeAws_queryDescribeAccountLimitsInput = (input, context) => {
      const entries = {};
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryDescribeChangeSetHooksInput = (input, context) => {
      const entries = {};
      if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
      }
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
      }
      return entries;
    };
    var serializeAws_queryDescribeChangeSetInput = (input, context) => {
      const entries = {};
      if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
      }
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryDescribePublisherInput = (input, context) => {
      const entries = {};
      if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackDriftDetectionStatusInput = (input, context) => {
      const entries = {};
      if (input.StackDriftDetectionId != null) {
        entries["StackDriftDetectionId"] = input.StackDriftDetectionId;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackEventsInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackInstanceInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.StackInstanceAccount != null) {
        entries["StackInstanceAccount"] = input.StackInstanceAccount;
      }
      if (input.StackInstanceRegion != null) {
        entries["StackInstanceRegion"] = input.StackInstanceRegion;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackResourceDriftsInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.StackResourceDriftStatusFilters != null) {
        const memberEntries = serializeAws_queryStackResourceDriftStatusFilters(input.StackResourceDriftStatusFilters, context);
        if (input.StackResourceDriftStatusFilters?.length === 0) {
          entries.StackResourceDriftStatusFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackResourceDriftStatusFilters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackResourceInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackResourcesInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
      }
      if (input.PhysicalResourceId != null) {
        entries["PhysicalResourceId"] = input.PhysicalResourceId;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackSetInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryDescribeStackSetOperationInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryDescribeStacksInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryDescribeTypeInput = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
      }
      if (input.PublicVersionNumber != null) {
        entries["PublicVersionNumber"] = input.PublicVersionNumber;
      }
      return entries;
    };
    var serializeAws_queryDescribeTypeRegistrationInput = (input, context) => {
      const entries = {};
      if (input.RegistrationToken != null) {
        entries["RegistrationToken"] = input.RegistrationToken;
      }
      return entries;
    };
    var serializeAws_queryDetectStackDriftInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.LogicalResourceIds != null) {
        const memberEntries = serializeAws_queryLogicalResourceIds(input.LogicalResourceIds, context);
        if (input.LogicalResourceIds?.length === 0) {
          entries.LogicalResourceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LogicalResourceIds.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryDetectStackResourceDriftInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
      }
      return entries;
    };
    var serializeAws_queryDetectStackSetDriftInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationId === void 0) {
        input.OperationId = (0, uuid_1.v4)();
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryEstimateTemplateCostInput = (input, context) => {
      const entries = {};
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryExecuteChangeSetInput = (input, context) => {
      const entries = {};
      if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
      }
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      if (input.DisableRollback != null) {
        entries["DisableRollback"] = input.DisableRollback;
      }
      return entries;
    };
    var serializeAws_queryGetStackPolicyInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      return entries;
    };
    var serializeAws_queryGetTemplateInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
      }
      if (input.TemplateStage != null) {
        entries["TemplateStage"] = input.TemplateStage;
      }
      return entries;
    };
    var serializeAws_queryGetTemplateSummaryInput = (input, context) => {
      const entries = {};
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryImportStacksToStackSetInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.StackIds != null) {
        const memberEntries = serializeAws_queryStackIdList(input.StackIds, context);
        if (input.StackIds?.length === 0) {
          entries.StackIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StackIdsUrl != null) {
        entries["StackIdsUrl"] = input.StackIdsUrl;
      }
      if (input.OrganizationalUnitIds != null) {
        const memberEntries = serializeAws_queryOrganizationalUnitIdList(input.OrganizationalUnitIds, context);
        if (input.OrganizationalUnitIds?.length === 0) {
          entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OrganizationalUnitIds.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationId === void 0) {
        input.OperationId = (0, uuid_1.v4)();
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryListChangeSetsInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListExportsInput = (input, context) => {
      const entries = {};
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListImportsInput = (input, context) => {
      const entries = {};
      if (input.ExportName != null) {
        entries["ExportName"] = input.ExportName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListStackInstancesInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.Filters != null) {
        const memberEntries = serializeAws_queryStackInstanceFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
          entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StackInstanceAccount != null) {
        entries["StackInstanceAccount"] = input.StackInstanceAccount;
      }
      if (input.StackInstanceRegion != null) {
        entries["StackInstanceRegion"] = input.StackInstanceRegion;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryListStackResourcesInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListStackSetOperationResultsInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      if (input.Filters != null) {
        const memberEntries = serializeAws_queryOperationResultFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
          entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryListStackSetOperationsInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryListStackSetsInput = (input, context) => {
      const entries = {};
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.Status != null) {
        entries["Status"] = input.Status;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryListStacksInput = (input, context) => {
      const entries = {};
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.StackStatusFilter != null) {
        const memberEntries = serializeAws_queryStackStatusFilter(input.StackStatusFilter, context);
        if (input.StackStatusFilter?.length === 0) {
          entries.StackStatusFilter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `StackStatusFilter.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryListTypeRegistrationsInput = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.TypeArn != null) {
        entries["TypeArn"] = input.TypeArn;
      }
      if (input.RegistrationStatusFilter != null) {
        entries["RegistrationStatusFilter"] = input.RegistrationStatusFilter;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListTypesInput = (input, context) => {
      const entries = {};
      if (input.Visibility != null) {
        entries["Visibility"] = input.Visibility;
      }
      if (input.ProvisioningType != null) {
        entries["ProvisioningType"] = input.ProvisioningType;
      }
      if (input.DeprecatedStatus != null) {
        entries["DeprecatedStatus"] = input.DeprecatedStatus;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.Filters != null) {
        const memberEntries = serializeAws_queryTypeFilters(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Filters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      return entries;
    };
    var serializeAws_queryListTypeVersionsInput = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
      }
      if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
      }
      if (input.DeprecatedStatus != null) {
        entries["DeprecatedStatus"] = input.DeprecatedStatus;
      }
      if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
      }
      return entries;
    };
    var serializeAws_queryLoggingConfig = (input, context) => {
      const entries = {};
      if (input.LogRoleArn != null) {
        entries["LogRoleArn"] = input.LogRoleArn;
      }
      if (input.LogGroupName != null) {
        entries["LogGroupName"] = input.LogGroupName;
      }
      return entries;
    };
    var serializeAws_queryLogicalResourceIds = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryManagedExecution = (input, context) => {
      const entries = {};
      if (input.Active != null) {
        entries["Active"] = input.Active;
      }
      return entries;
    };
    var serializeAws_queryNotificationARNs = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryOperationResultFilter = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Values != null) {
        entries["Values"] = input.Values;
      }
      return entries;
    };
    var serializeAws_queryOperationResultFilters = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryOperationResultFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryOrganizationalUnitIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryParameter = (input, context) => {
      const entries = {};
      if (input.ParameterKey != null) {
        entries["ParameterKey"] = input.ParameterKey;
      }
      if (input.ParameterValue != null) {
        entries["ParameterValue"] = input.ParameterValue;
      }
      if (input.UsePreviousValue != null) {
        entries["UsePreviousValue"] = input.UsePreviousValue;
      }
      if (input.ResolvedValue != null) {
        entries["ResolvedValue"] = input.ResolvedValue;
      }
      return entries;
    };
    var serializeAws_queryParameters = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryParameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPublishTypeInput = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.PublicVersionNumber != null) {
        entries["PublicVersionNumber"] = input.PublicVersionNumber;
      }
      return entries;
    };
    var serializeAws_queryRecordHandlerProgressInput = (input, context) => {
      const entries = {};
      if (input.BearerToken != null) {
        entries["BearerToken"] = input.BearerToken;
      }
      if (input.OperationStatus != null) {
        entries["OperationStatus"] = input.OperationStatus;
      }
      if (input.CurrentOperationStatus != null) {
        entries["CurrentOperationStatus"] = input.CurrentOperationStatus;
      }
      if (input.StatusMessage != null) {
        entries["StatusMessage"] = input.StatusMessage;
      }
      if (input.ErrorCode != null) {
        entries["ErrorCode"] = input.ErrorCode;
      }
      if (input.ResourceModel != null) {
        entries["ResourceModel"] = input.ResourceModel;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryRegionList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryRegisterPublisherInput = (input, context) => {
      const entries = {};
      if (input.AcceptTermsAndConditions != null) {
        entries["AcceptTermsAndConditions"] = input.AcceptTermsAndConditions;
      }
      if (input.ConnectionArn != null) {
        entries["ConnectionArn"] = input.ConnectionArn;
      }
      return entries;
    };
    var serializeAws_queryRegisterTypeInput = (input, context) => {
      const entries = {};
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.SchemaHandlerPackage != null) {
        entries["SchemaHandlerPackage"] = input.SchemaHandlerPackage;
      }
      if (input.LoggingConfig != null) {
        const memberEntries = serializeAws_queryLoggingConfig(input.LoggingConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `LoggingConfig.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExecutionRoleArn != null) {
        entries["ExecutionRoleArn"] = input.ExecutionRoleArn;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryResourceIdentifierProperties = (input, context) => {
      const entries = {};
      let counter = 1;
      Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
      });
      return entries;
    };
    var serializeAws_queryResourcesToImport = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryResourceToImport(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryResourcesToSkip = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryResourceToImport = (input, context) => {
      const entries = {};
      if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
      }
      if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
      }
      if (input.ResourceIdentifier != null) {
        const memberEntries = serializeAws_queryResourceIdentifierProperties(input.ResourceIdentifier, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceIdentifier.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryResourceTypes = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryRetainResources = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryRollbackConfiguration = (input, context) => {
      const entries = {};
      if (input.RollbackTriggers != null) {
        const memberEntries = serializeAws_queryRollbackTriggers(input.RollbackTriggers, context);
        if (input.RollbackTriggers?.length === 0) {
          entries.RollbackTriggers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackTriggers.${key}`;
          entries[loc] = value;
        });
      }
      if (input.MonitoringTimeInMinutes != null) {
        entries["MonitoringTimeInMinutes"] = input.MonitoringTimeInMinutes;
      }
      return entries;
    };
    var serializeAws_queryRollbackStackInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryRollbackTrigger = (input, context) => {
      const entries = {};
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      return entries;
    };
    var serializeAws_queryRollbackTriggers = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryRollbackTrigger(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_querySetStackPolicyInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.StackPolicyBody != null) {
        entries["StackPolicyBody"] = input.StackPolicyBody;
      }
      if (input.StackPolicyURL != null) {
        entries["StackPolicyURL"] = input.StackPolicyURL;
      }
      return entries;
    };
    var serializeAws_querySetTypeConfigurationInput = (input, context) => {
      const entries = {};
      if (input.TypeArn != null) {
        entries["TypeArn"] = input.TypeArn;
      }
      if (input.Configuration != null) {
        entries["Configuration"] = input.Configuration;
      }
      if (input.ConfigurationAlias != null) {
        entries["ConfigurationAlias"] = input.ConfigurationAlias;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      return entries;
    };
    var serializeAws_querySetTypeDefaultVersionInput = (input, context) => {
      const entries = {};
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      return entries;
    };
    var serializeAws_querySignalResourceInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
      }
      if (input.UniqueId != null) {
        entries["UniqueId"] = input.UniqueId;
      }
      if (input.Status != null) {
        entries["Status"] = input.Status;
      }
      return entries;
    };
    var serializeAws_queryStackIdList = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryStackInstanceFilter = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Values != null) {
        entries["Values"] = input.Values;
      }
      return entries;
    };
    var serializeAws_queryStackInstanceFilters = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryStackInstanceFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryStackResourceDriftStatusFilters = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryStackSetOperationPreferences = (input, context) => {
      const entries = {};
      if (input.RegionConcurrencyType != null) {
        entries["RegionConcurrencyType"] = input.RegionConcurrencyType;
      }
      if (input.RegionOrder != null) {
        const memberEntries = serializeAws_queryRegionList(input.RegionOrder, context);
        if (input.RegionOrder?.length === 0) {
          entries.RegionOrder = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RegionOrder.${key}`;
          entries[loc] = value;
        });
      }
      if (input.FailureToleranceCount != null) {
        entries["FailureToleranceCount"] = input.FailureToleranceCount;
      }
      if (input.FailureTolerancePercentage != null) {
        entries["FailureTolerancePercentage"] = input.FailureTolerancePercentage;
      }
      if (input.MaxConcurrentCount != null) {
        entries["MaxConcurrentCount"] = input.MaxConcurrentCount;
      }
      if (input.MaxConcurrentPercentage != null) {
        entries["MaxConcurrentPercentage"] = input.MaxConcurrentPercentage;
      }
      return entries;
    };
    var serializeAws_queryStackStatusFilter = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_queryStopStackSetOperationInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_queryTags = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryTestTypeInput = (input, context) => {
      const entries = {};
      if (input.Arn != null) {
        entries["Arn"] = input.Arn;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
      }
      if (input.LogDeliveryBucket != null) {
        entries["LogDeliveryBucket"] = input.LogDeliveryBucket;
      }
      return entries;
    };
    var serializeAws_queryTypeConfigurationIdentifier = (input, context) => {
      const entries = {};
      if (input.TypeArn != null) {
        entries["TypeArn"] = input.TypeArn;
      }
      if (input.TypeConfigurationAlias != null) {
        entries["TypeConfigurationAlias"] = input.TypeConfigurationAlias;
      }
      if (input.TypeConfigurationArn != null) {
        entries["TypeConfigurationArn"] = input.TypeConfigurationArn;
      }
      if (input.Type != null) {
        entries["Type"] = input.Type;
      }
      if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
      }
      return entries;
    };
    var serializeAws_queryTypeConfigurationIdentifiers = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTypeConfigurationIdentifier(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryTypeFilters = (input, context) => {
      const entries = {};
      if (input.Category != null) {
        entries["Category"] = input.Category;
      }
      if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
      }
      if (input.TypeNamePrefix != null) {
        entries["TypeNamePrefix"] = input.TypeNamePrefix;
      }
      return entries;
    };
    var serializeAws_queryUpdateStackInput = (input, context) => {
      const entries = {};
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.UsePreviousTemplate != null) {
        entries["UsePreviousTemplate"] = input.UsePreviousTemplate;
      }
      if (input.StackPolicyDuringUpdateBody != null) {
        entries["StackPolicyDuringUpdateBody"] = input.StackPolicyDuringUpdateBody;
      }
      if (input.StackPolicyDuringUpdateURL != null) {
        entries["StackPolicyDuringUpdateURL"] = input.StackPolicyDuringUpdateURL;
      }
      if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ResourceTypes != null) {
        const memberEntries = serializeAws_queryResourceTypes(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
          entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ResourceTypes.${key}`;
          entries[loc] = value;
        });
      }
      if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
      }
      if (input.RollbackConfiguration != null) {
        const memberEntries = serializeAws_queryRollbackConfiguration(input.RollbackConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `RollbackConfiguration.${key}`;
          entries[loc] = value;
        });
      }
      if (input.StackPolicyBody != null) {
        entries["StackPolicyBody"] = input.StackPolicyBody;
      }
      if (input.StackPolicyURL != null) {
        entries["StackPolicyURL"] = input.StackPolicyURL;
      }
      if (input.NotificationARNs != null) {
        const memberEntries = serializeAws_queryNotificationARNs(input.NotificationARNs, context);
        if (input.NotificationARNs?.length === 0) {
          entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `NotificationARNs.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DisableRollback != null) {
        entries["DisableRollback"] = input.DisableRollback;
      }
      if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
      }
      return entries;
    };
    var serializeAws_queryUpdateStackInstancesInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ParameterOverrides != null) {
        const memberEntries = serializeAws_queryParameters(input.ParameterOverrides, context);
        if (input.ParameterOverrides?.length === 0) {
          entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ParameterOverrides.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationId === void 0) {
        input.OperationId = (0, uuid_1.v4)();
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      return entries;
    };
    var serializeAws_queryUpdateStackSetInput = (input, context) => {
      const entries = {};
      if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
      }
      if (input.Description != null) {
        entries["Description"] = input.Description;
      }
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      if (input.UsePreviousTemplate != null) {
        entries["UsePreviousTemplate"] = input.UsePreviousTemplate;
      }
      if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
          entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Parameters.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
          entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Capabilities.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `OperationPreferences.${key}`;
          entries[loc] = value;
        });
      }
      if (input.AdministrationRoleARN != null) {
        entries["AdministrationRoleARN"] = input.AdministrationRoleARN;
      }
      if (input.ExecutionRoleName != null) {
        entries["ExecutionRoleName"] = input.ExecutionRoleName;
      }
      if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `DeploymentTargets.${key}`;
          entries[loc] = value;
        });
      }
      if (input.PermissionModel != null) {
        entries["PermissionModel"] = input.PermissionModel;
      }
      if (input.AutoDeployment != null) {
        const memberEntries = serializeAws_queryAutoDeployment(input.AutoDeployment, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `AutoDeployment.${key}`;
          entries[loc] = value;
        });
      }
      if (input.OperationId === void 0) {
        input.OperationId = (0, uuid_1.v4)();
      }
      if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
      }
      if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
          entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Accounts.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
          entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Regions.${key}`;
          entries[loc] = value;
        });
      }
      if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
      }
      if (input.ManagedExecution != null) {
        const memberEntries = serializeAws_queryManagedExecution(input.ManagedExecution, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `ManagedExecution.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryUpdateTerminationProtectionInput = (input, context) => {
      const entries = {};
      if (input.EnableTerminationProtection != null) {
        entries["EnableTerminationProtection"] = input.EnableTerminationProtection;
      }
      if (input.StackName != null) {
        entries["StackName"] = input.StackName;
      }
      return entries;
    };
    var serializeAws_queryValidateTemplateInput = (input, context) => {
      const entries = {};
      if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
      }
      if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
      }
      return entries;
    };
    var deserializeAws_queryAccountGateResult = (output, context) => {
      const contents = {
        Status: void 0,
        StatusReason: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      return contents;
    };
    var deserializeAws_queryAccountLimit = (output, context) => {
      const contents = {
        Name: void 0,
        Value: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.strictParseInt32)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_queryAccountLimitList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryAccountLimit(entry, context);
      });
    };
    var deserializeAws_queryAccountList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryActivateTypeOutput = (output, context) => {
      const contents = {
        Arn: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAllowedValues = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryAlreadyExistsException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryAutoDeployment = (output, context) => {
      const contents = {
        Enabled: void 0,
        RetainStacksOnAccountRemoval: void 0
      };
      if (output["Enabled"] !== void 0) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
      }
      if (output["RetainStacksOnAccountRemoval"] !== void 0) {
        contents.RetainStacksOnAccountRemoval = (0, smithy_client_1.parseBoolean)(output["RetainStacksOnAccountRemoval"]);
      }
      return contents;
    };
    var deserializeAws_queryBatchDescribeTypeConfigurationsError = (output, context) => {
      const contents = {
        ErrorCode: void 0,
        ErrorMessage: void 0,
        TypeConfigurationIdentifier: void 0
      };
      if (output["ErrorCode"] !== void 0) {
        contents.ErrorCode = (0, smithy_client_1.expectString)(output["ErrorCode"]);
      }
      if (output["ErrorMessage"] !== void 0) {
        contents.ErrorMessage = (0, smithy_client_1.expectString)(output["ErrorMessage"]);
      }
      if (output["TypeConfigurationIdentifier"] !== void 0) {
        contents.TypeConfigurationIdentifier = deserializeAws_queryTypeConfigurationIdentifier(output["TypeConfigurationIdentifier"], context);
      }
      return contents;
    };
    var deserializeAws_queryBatchDescribeTypeConfigurationsErrors = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryBatchDescribeTypeConfigurationsError(entry, context);
      });
    };
    var deserializeAws_queryBatchDescribeTypeConfigurationsOutput = (output, context) => {
      const contents = {
        Errors: void 0,
        UnprocessedTypeConfigurations: void 0,
        TypeConfigurations: void 0
      };
      if (output.Errors === "") {
        contents.Errors = [];
      } else if (output["Errors"] !== void 0 && output["Errors"]["member"] !== void 0) {
        contents.Errors = deserializeAws_queryBatchDescribeTypeConfigurationsErrors((0, smithy_client_1.getArrayIfSingleItem)(output["Errors"]["member"]), context);
      }
      if (output.UnprocessedTypeConfigurations === "") {
        contents.UnprocessedTypeConfigurations = [];
      } else if (output["UnprocessedTypeConfigurations"] !== void 0 && output["UnprocessedTypeConfigurations"]["member"] !== void 0) {
        contents.UnprocessedTypeConfigurations = deserializeAws_queryUnprocessedTypeConfigurations((0, smithy_client_1.getArrayIfSingleItem)(output["UnprocessedTypeConfigurations"]["member"]), context);
      }
      if (output.TypeConfigurations === "") {
        contents.TypeConfigurations = [];
      } else if (output["TypeConfigurations"] !== void 0 && output["TypeConfigurations"]["member"] !== void 0) {
        contents.TypeConfigurations = deserializeAws_queryTypeConfigurationDetailsList((0, smithy_client_1.getArrayIfSingleItem)(output["TypeConfigurations"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryCapabilities = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryCFNRegistryException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryChange = (output, context) => {
      const contents = {
        Type: void 0,
        HookInvocationCount: void 0,
        ResourceChange: void 0
      };
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["HookInvocationCount"] !== void 0) {
        contents.HookInvocationCount = (0, smithy_client_1.strictParseInt32)(output["HookInvocationCount"]);
      }
      if (output["ResourceChange"] !== void 0) {
        contents.ResourceChange = deserializeAws_queryResourceChange(output["ResourceChange"], context);
      }
      return contents;
    };
    var deserializeAws_queryChanges = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryChange(entry, context);
      });
    };
    var deserializeAws_queryChangeSetHook = (output, context) => {
      const contents = {
        InvocationPoint: void 0,
        FailureMode: void 0,
        TypeName: void 0,
        TypeVersionId: void 0,
        TypeConfigurationVersionId: void 0,
        TargetDetails: void 0
      };
      if (output["InvocationPoint"] !== void 0) {
        contents.InvocationPoint = (0, smithy_client_1.expectString)(output["InvocationPoint"]);
      }
      if (output["FailureMode"] !== void 0) {
        contents.FailureMode = (0, smithy_client_1.expectString)(output["FailureMode"]);
      }
      if (output["TypeName"] !== void 0) {
        contents.TypeName = (0, smithy_client_1.expectString)(output["TypeName"]);
      }
      if (output["TypeVersionId"] !== void 0) {
        contents.TypeVersionId = (0, smithy_client_1.expectString)(output["TypeVersionId"]);
      }
      if (output["TypeConfigurationVersionId"] !== void 0) {
        contents.TypeConfigurationVersionId = (0, smithy_client_1.expectString)(output["TypeConfigurationVersionId"]);
      }
      if (output["TargetDetails"] !== void 0) {
        contents.TargetDetails = deserializeAws_queryChangeSetHookTargetDetails(output["TargetDetails"], context);
      }
      return contents;
    };
    var deserializeAws_queryChangeSetHookResourceTargetDetails = (output, context) => {
      const contents = {
        LogicalResourceId: void 0,
        ResourceType: void 0,
        ResourceAction: void 0
      };
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["ResourceAction"] !== void 0) {
        contents.ResourceAction = (0, smithy_client_1.expectString)(output["ResourceAction"]);
      }
      return contents;
    };
    var deserializeAws_queryChangeSetHooks = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryChangeSetHook(entry, context);
      });
    };
    var deserializeAws_queryChangeSetHookTargetDetails = (output, context) => {
      const contents = {
        TargetType: void 0,
        ResourceTargetDetails: void 0
      };
      if (output["TargetType"] !== void 0) {
        contents.TargetType = (0, smithy_client_1.expectString)(output["TargetType"]);
      }
      if (output["ResourceTargetDetails"] !== void 0) {
        contents.ResourceTargetDetails = deserializeAws_queryChangeSetHookResourceTargetDetails(output["ResourceTargetDetails"], context);
      }
      return contents;
    };
    var deserializeAws_queryChangeSetNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryChangeSetSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryChangeSetSummary(entry, context);
      });
    };
    var deserializeAws_queryChangeSetSummary = (output, context) => {
      const contents = {
        StackId: void 0,
        StackName: void 0,
        ChangeSetId: void 0,
        ChangeSetName: void 0,
        ExecutionStatus: void 0,
        Status: void 0,
        StatusReason: void 0,
        CreationTime: void 0,
        Description: void 0,
        IncludeNestedStacks: void 0,
        ParentChangeSetId: void 0,
        RootChangeSetId: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["ChangeSetId"] !== void 0) {
        contents.ChangeSetId = (0, smithy_client_1.expectString)(output["ChangeSetId"]);
      }
      if (output["ChangeSetName"] !== void 0) {
        contents.ChangeSetName = (0, smithy_client_1.expectString)(output["ChangeSetName"]);
      }
      if (output["ExecutionStatus"] !== void 0) {
        contents.ExecutionStatus = (0, smithy_client_1.expectString)(output["ExecutionStatus"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output["CreationTime"] !== void 0) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationTime"]));
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["IncludeNestedStacks"] !== void 0) {
        contents.IncludeNestedStacks = (0, smithy_client_1.parseBoolean)(output["IncludeNestedStacks"]);
      }
      if (output["ParentChangeSetId"] !== void 0) {
        contents.ParentChangeSetId = (0, smithy_client_1.expectString)(output["ParentChangeSetId"]);
      }
      if (output["RootChangeSetId"] !== void 0) {
        contents.RootChangeSetId = (0, smithy_client_1.expectString)(output["RootChangeSetId"]);
      }
      return contents;
    };
    var deserializeAws_queryContinueUpdateRollbackOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryCreateChangeSetOutput = (output, context) => {
      const contents = {
        Id: void 0,
        StackId: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      return contents;
    };
    var deserializeAws_queryCreatedButModifiedException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryCreateStackInstancesOutput = (output, context) => {
      const contents = {
        OperationId: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryCreateStackOutput = (output, context) => {
      const contents = {
        StackId: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      return contents;
    };
    var deserializeAws_queryCreateStackSetOutput = (output, context) => {
      const contents = {
        StackSetId: void 0
      };
      if (output["StackSetId"] !== void 0) {
        contents.StackSetId = (0, smithy_client_1.expectString)(output["StackSetId"]);
      }
      return contents;
    };
    var deserializeAws_queryDeactivateTypeOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteChangeSetOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeleteStackInstancesOutput = (output, context) => {
      const contents = {
        OperationId: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryDeleteStackSetOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDeploymentTargets = (output, context) => {
      const contents = {
        Accounts: void 0,
        AccountsUrl: void 0,
        OrganizationalUnitIds: void 0,
        AccountFilterType: void 0
      };
      if (output.Accounts === "") {
        contents.Accounts = [];
      } else if (output["Accounts"] !== void 0 && output["Accounts"]["member"] !== void 0) {
        contents.Accounts = deserializeAws_queryAccountList((0, smithy_client_1.getArrayIfSingleItem)(output["Accounts"]["member"]), context);
      }
      if (output["AccountsUrl"] !== void 0) {
        contents.AccountsUrl = (0, smithy_client_1.expectString)(output["AccountsUrl"]);
      }
      if (output.OrganizationalUnitIds === "") {
        contents.OrganizationalUnitIds = [];
      } else if (output["OrganizationalUnitIds"] !== void 0 && output["OrganizationalUnitIds"]["member"] !== void 0) {
        contents.OrganizationalUnitIds = deserializeAws_queryOrganizationalUnitIdList((0, smithy_client_1.getArrayIfSingleItem)(output["OrganizationalUnitIds"]["member"]), context);
      }
      if (output["AccountFilterType"] !== void 0) {
        contents.AccountFilterType = (0, smithy_client_1.expectString)(output["AccountFilterType"]);
      }
      return contents;
    };
    var deserializeAws_queryDeregisterTypeOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryDescribeAccountLimitsOutput = (output, context) => {
      const contents = {
        AccountLimits: void 0,
        NextToken: void 0
      };
      if (output.AccountLimits === "") {
        contents.AccountLimits = [];
      } else if (output["AccountLimits"] !== void 0 && output["AccountLimits"]["member"] !== void 0) {
        contents.AccountLimits = deserializeAws_queryAccountLimitList((0, smithy_client_1.getArrayIfSingleItem)(output["AccountLimits"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeChangeSetHooksOutput = (output, context) => {
      const contents = {
        ChangeSetId: void 0,
        ChangeSetName: void 0,
        Hooks: void 0,
        Status: void 0,
        NextToken: void 0,
        StackId: void 0,
        StackName: void 0
      };
      if (output["ChangeSetId"] !== void 0) {
        contents.ChangeSetId = (0, smithy_client_1.expectString)(output["ChangeSetId"]);
      }
      if (output["ChangeSetName"] !== void 0) {
        contents.ChangeSetName = (0, smithy_client_1.expectString)(output["ChangeSetName"]);
      }
      if (output.Hooks === "") {
        contents.Hooks = [];
      } else if (output["Hooks"] !== void 0 && output["Hooks"]["member"] !== void 0) {
        contents.Hooks = deserializeAws_queryChangeSetHooks((0, smithy_client_1.getArrayIfSingleItem)(output["Hooks"]["member"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeChangeSetOutput = (output, context) => {
      const contents = {
        ChangeSetName: void 0,
        ChangeSetId: void 0,
        StackId: void 0,
        StackName: void 0,
        Description: void 0,
        Parameters: void 0,
        CreationTime: void 0,
        ExecutionStatus: void 0,
        Status: void 0,
        StatusReason: void 0,
        NotificationARNs: void 0,
        RollbackConfiguration: void 0,
        Capabilities: void 0,
        Tags: void 0,
        Changes: void 0,
        NextToken: void 0,
        IncludeNestedStacks: void 0,
        ParentChangeSetId: void 0,
        RootChangeSetId: void 0
      };
      if (output["ChangeSetName"] !== void 0) {
        contents.ChangeSetName = (0, smithy_client_1.expectString)(output["ChangeSetName"]);
      }
      if (output["ChangeSetId"] !== void 0) {
        contents.ChangeSetId = (0, smithy_client_1.expectString)(output["ChangeSetId"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["member"] !== void 0) {
        contents.Parameters = deserializeAws_queryParameters((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["member"]), context);
      }
      if (output["CreationTime"] !== void 0) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationTime"]));
      }
      if (output["ExecutionStatus"] !== void 0) {
        contents.ExecutionStatus = (0, smithy_client_1.expectString)(output["ExecutionStatus"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output.NotificationARNs === "") {
        contents.NotificationARNs = [];
      } else if (output["NotificationARNs"] !== void 0 && output["NotificationARNs"]["member"] !== void 0) {
        contents.NotificationARNs = deserializeAws_queryNotificationARNs((0, smithy_client_1.getArrayIfSingleItem)(output["NotificationARNs"]["member"]), context);
      }
      if (output["RollbackConfiguration"] !== void 0) {
        contents.RollbackConfiguration = deserializeAws_queryRollbackConfiguration(output["RollbackConfiguration"], context);
      }
      if (output.Capabilities === "") {
        contents.Capabilities = [];
      } else if (output["Capabilities"] !== void 0 && output["Capabilities"]["member"] !== void 0) {
        contents.Capabilities = deserializeAws_queryCapabilities((0, smithy_client_1.getArrayIfSingleItem)(output["Capabilities"]["member"]), context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_queryTags((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output.Changes === "") {
        contents.Changes = [];
      } else if (output["Changes"] !== void 0 && output["Changes"]["member"] !== void 0) {
        contents.Changes = deserializeAws_queryChanges((0, smithy_client_1.getArrayIfSingleItem)(output["Changes"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      if (output["IncludeNestedStacks"] !== void 0) {
        contents.IncludeNestedStacks = (0, smithy_client_1.parseBoolean)(output["IncludeNestedStacks"]);
      }
      if (output["ParentChangeSetId"] !== void 0) {
        contents.ParentChangeSetId = (0, smithy_client_1.expectString)(output["ParentChangeSetId"]);
      }
      if (output["RootChangeSetId"] !== void 0) {
        contents.RootChangeSetId = (0, smithy_client_1.expectString)(output["RootChangeSetId"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribePublisherOutput = (output, context) => {
      const contents = {
        PublisherId: void 0,
        PublisherStatus: void 0,
        IdentityProvider: void 0,
        PublisherProfile: void 0
      };
      if (output["PublisherId"] !== void 0) {
        contents.PublisherId = (0, smithy_client_1.expectString)(output["PublisherId"]);
      }
      if (output["PublisherStatus"] !== void 0) {
        contents.PublisherStatus = (0, smithy_client_1.expectString)(output["PublisherStatus"]);
      }
      if (output["IdentityProvider"] !== void 0) {
        contents.IdentityProvider = (0, smithy_client_1.expectString)(output["IdentityProvider"]);
      }
      if (output["PublisherProfile"] !== void 0) {
        contents.PublisherProfile = (0, smithy_client_1.expectString)(output["PublisherProfile"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackDriftDetectionStatusOutput = (output, context) => {
      const contents = {
        StackId: void 0,
        StackDriftDetectionId: void 0,
        StackDriftStatus: void 0,
        DetectionStatus: void 0,
        DetectionStatusReason: void 0,
        DriftedStackResourceCount: void 0,
        Timestamp: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["StackDriftDetectionId"] !== void 0) {
        contents.StackDriftDetectionId = (0, smithy_client_1.expectString)(output["StackDriftDetectionId"]);
      }
      if (output["StackDriftStatus"] !== void 0) {
        contents.StackDriftStatus = (0, smithy_client_1.expectString)(output["StackDriftStatus"]);
      }
      if (output["DetectionStatus"] !== void 0) {
        contents.DetectionStatus = (0, smithy_client_1.expectString)(output["DetectionStatus"]);
      }
      if (output["DetectionStatusReason"] !== void 0) {
        contents.DetectionStatusReason = (0, smithy_client_1.expectString)(output["DetectionStatusReason"]);
      }
      if (output["DriftedStackResourceCount"] !== void 0) {
        contents.DriftedStackResourceCount = (0, smithy_client_1.strictParseInt32)(output["DriftedStackResourceCount"]);
      }
      if (output["Timestamp"] !== void 0) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Timestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackEventsOutput = (output, context) => {
      const contents = {
        StackEvents: void 0,
        NextToken: void 0
      };
      if (output.StackEvents === "") {
        contents.StackEvents = [];
      } else if (output["StackEvents"] !== void 0 && output["StackEvents"]["member"] !== void 0) {
        contents.StackEvents = deserializeAws_queryStackEvents((0, smithy_client_1.getArrayIfSingleItem)(output["StackEvents"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackInstanceOutput = (output, context) => {
      const contents = {
        StackInstance: void 0
      };
      if (output["StackInstance"] !== void 0) {
        contents.StackInstance = deserializeAws_queryStackInstance(output["StackInstance"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackResourceDriftsOutput = (output, context) => {
      const contents = {
        StackResourceDrifts: void 0,
        NextToken: void 0
      };
      if (output.StackResourceDrifts === "") {
        contents.StackResourceDrifts = [];
      } else if (output["StackResourceDrifts"] !== void 0 && output["StackResourceDrifts"]["member"] !== void 0) {
        contents.StackResourceDrifts = deserializeAws_queryStackResourceDrifts((0, smithy_client_1.getArrayIfSingleItem)(output["StackResourceDrifts"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackResourceOutput = (output, context) => {
      const contents = {
        StackResourceDetail: void 0
      };
      if (output["StackResourceDetail"] !== void 0) {
        contents.StackResourceDetail = deserializeAws_queryStackResourceDetail(output["StackResourceDetail"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackResourcesOutput = (output, context) => {
      const contents = {
        StackResources: void 0
      };
      if (output.StackResources === "") {
        contents.StackResources = [];
      } else if (output["StackResources"] !== void 0 && output["StackResources"]["member"] !== void 0) {
        contents.StackResources = deserializeAws_queryStackResources((0, smithy_client_1.getArrayIfSingleItem)(output["StackResources"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackSetOperationOutput = (output, context) => {
      const contents = {
        StackSetOperation: void 0
      };
      if (output["StackSetOperation"] !== void 0) {
        contents.StackSetOperation = deserializeAws_queryStackSetOperation(output["StackSetOperation"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStackSetOutput = (output, context) => {
      const contents = {
        StackSet: void 0
      };
      if (output["StackSet"] !== void 0) {
        contents.StackSet = deserializeAws_queryStackSet(output["StackSet"], context);
      }
      return contents;
    };
    var deserializeAws_queryDescribeStacksOutput = (output, context) => {
      const contents = {
        Stacks: void 0,
        NextToken: void 0
      };
      if (output.Stacks === "") {
        contents.Stacks = [];
      } else if (output["Stacks"] !== void 0 && output["Stacks"]["member"] !== void 0) {
        contents.Stacks = deserializeAws_queryStacks((0, smithy_client_1.getArrayIfSingleItem)(output["Stacks"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeTypeOutput = (output, context) => {
      const contents = {
        Arn: void 0,
        Type: void 0,
        TypeName: void 0,
        DefaultVersionId: void 0,
        IsDefaultVersion: void 0,
        TypeTestsStatus: void 0,
        TypeTestsStatusDescription: void 0,
        Description: void 0,
        Schema: void 0,
        ProvisioningType: void 0,
        DeprecatedStatus: void 0,
        LoggingConfig: void 0,
        RequiredActivatedTypes: void 0,
        ExecutionRoleArn: void 0,
        Visibility: void 0,
        SourceUrl: void 0,
        DocumentationUrl: void 0,
        LastUpdated: void 0,
        TimeCreated: void 0,
        ConfigurationSchema: void 0,
        PublisherId: void 0,
        OriginalTypeName: void 0,
        OriginalTypeArn: void 0,
        PublicVersionNumber: void 0,
        LatestPublicVersion: void 0,
        IsActivated: void 0,
        AutoUpdate: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["TypeName"] !== void 0) {
        contents.TypeName = (0, smithy_client_1.expectString)(output["TypeName"]);
      }
      if (output["DefaultVersionId"] !== void 0) {
        contents.DefaultVersionId = (0, smithy_client_1.expectString)(output["DefaultVersionId"]);
      }
      if (output["IsDefaultVersion"] !== void 0) {
        contents.IsDefaultVersion = (0, smithy_client_1.parseBoolean)(output["IsDefaultVersion"]);
      }
      if (output["TypeTestsStatus"] !== void 0) {
        contents.TypeTestsStatus = (0, smithy_client_1.expectString)(output["TypeTestsStatus"]);
      }
      if (output["TypeTestsStatusDescription"] !== void 0) {
        contents.TypeTestsStatusDescription = (0, smithy_client_1.expectString)(output["TypeTestsStatusDescription"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Schema"] !== void 0) {
        contents.Schema = (0, smithy_client_1.expectString)(output["Schema"]);
      }
      if (output["ProvisioningType"] !== void 0) {
        contents.ProvisioningType = (0, smithy_client_1.expectString)(output["ProvisioningType"]);
      }
      if (output["DeprecatedStatus"] !== void 0) {
        contents.DeprecatedStatus = (0, smithy_client_1.expectString)(output["DeprecatedStatus"]);
      }
      if (output["LoggingConfig"] !== void 0) {
        contents.LoggingConfig = deserializeAws_queryLoggingConfig(output["LoggingConfig"], context);
      }
      if (output.RequiredActivatedTypes === "") {
        contents.RequiredActivatedTypes = [];
      } else if (output["RequiredActivatedTypes"] !== void 0 && output["RequiredActivatedTypes"]["member"] !== void 0) {
        contents.RequiredActivatedTypes = deserializeAws_queryRequiredActivatedTypes((0, smithy_client_1.getArrayIfSingleItem)(output["RequiredActivatedTypes"]["member"]), context);
      }
      if (output["ExecutionRoleArn"] !== void 0) {
        contents.ExecutionRoleArn = (0, smithy_client_1.expectString)(output["ExecutionRoleArn"]);
      }
      if (output["Visibility"] !== void 0) {
        contents.Visibility = (0, smithy_client_1.expectString)(output["Visibility"]);
      }
      if (output["SourceUrl"] !== void 0) {
        contents.SourceUrl = (0, smithy_client_1.expectString)(output["SourceUrl"]);
      }
      if (output["DocumentationUrl"] !== void 0) {
        contents.DocumentationUrl = (0, smithy_client_1.expectString)(output["DocumentationUrl"]);
      }
      if (output["LastUpdated"] !== void 0) {
        contents.LastUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdated"]));
      }
      if (output["TimeCreated"] !== void 0) {
        contents.TimeCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["TimeCreated"]));
      }
      if (output["ConfigurationSchema"] !== void 0) {
        contents.ConfigurationSchema = (0, smithy_client_1.expectString)(output["ConfigurationSchema"]);
      }
      if (output["PublisherId"] !== void 0) {
        contents.PublisherId = (0, smithy_client_1.expectString)(output["PublisherId"]);
      }
      if (output["OriginalTypeName"] !== void 0) {
        contents.OriginalTypeName = (0, smithy_client_1.expectString)(output["OriginalTypeName"]);
      }
      if (output["OriginalTypeArn"] !== void 0) {
        contents.OriginalTypeArn = (0, smithy_client_1.expectString)(output["OriginalTypeArn"]);
      }
      if (output["PublicVersionNumber"] !== void 0) {
        contents.PublicVersionNumber = (0, smithy_client_1.expectString)(output["PublicVersionNumber"]);
      }
      if (output["LatestPublicVersion"] !== void 0) {
        contents.LatestPublicVersion = (0, smithy_client_1.expectString)(output["LatestPublicVersion"]);
      }
      if (output["IsActivated"] !== void 0) {
        contents.IsActivated = (0, smithy_client_1.parseBoolean)(output["IsActivated"]);
      }
      if (output["AutoUpdate"] !== void 0) {
        contents.AutoUpdate = (0, smithy_client_1.parseBoolean)(output["AutoUpdate"]);
      }
      return contents;
    };
    var deserializeAws_queryDescribeTypeRegistrationOutput = (output, context) => {
      const contents = {
        ProgressStatus: void 0,
        Description: void 0,
        TypeArn: void 0,
        TypeVersionArn: void 0
      };
      if (output["ProgressStatus"] !== void 0) {
        contents.ProgressStatus = (0, smithy_client_1.expectString)(output["ProgressStatus"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["TypeArn"] !== void 0) {
        contents.TypeArn = (0, smithy_client_1.expectString)(output["TypeArn"]);
      }
      if (output["TypeVersionArn"] !== void 0) {
        contents.TypeVersionArn = (0, smithy_client_1.expectString)(output["TypeVersionArn"]);
      }
      return contents;
    };
    var deserializeAws_queryDetectStackDriftOutput = (output, context) => {
      const contents = {
        StackDriftDetectionId: void 0
      };
      if (output["StackDriftDetectionId"] !== void 0) {
        contents.StackDriftDetectionId = (0, smithy_client_1.expectString)(output["StackDriftDetectionId"]);
      }
      return contents;
    };
    var deserializeAws_queryDetectStackResourceDriftOutput = (output, context) => {
      const contents = {
        StackResourceDrift: void 0
      };
      if (output["StackResourceDrift"] !== void 0) {
        contents.StackResourceDrift = deserializeAws_queryStackResourceDrift(output["StackResourceDrift"], context);
      }
      return contents;
    };
    var deserializeAws_queryDetectStackSetDriftOutput = (output, context) => {
      const contents = {
        OperationId: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryEstimateTemplateCostOutput = (output, context) => {
      const contents = {
        Url: void 0
      };
      if (output["Url"] !== void 0) {
        contents.Url = (0, smithy_client_1.expectString)(output["Url"]);
      }
      return contents;
    };
    var deserializeAws_queryExecuteChangeSetOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryExport = (output, context) => {
      const contents = {
        ExportingStackId: void 0,
        Name: void 0,
        Value: void 0
      };
      if (output["ExportingStackId"] !== void 0) {
        contents.ExportingStackId = (0, smithy_client_1.expectString)(output["ExportingStackId"]);
      }
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_queryExports = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryExport(entry, context);
      });
    };
    var deserializeAws_queryGetStackPolicyOutput = (output, context) => {
      const contents = {
        StackPolicyBody: void 0
      };
      if (output["StackPolicyBody"] !== void 0) {
        contents.StackPolicyBody = (0, smithy_client_1.expectString)(output["StackPolicyBody"]);
      }
      return contents;
    };
    var deserializeAws_queryGetTemplateOutput = (output, context) => {
      const contents = {
        TemplateBody: void 0,
        StagesAvailable: void 0
      };
      if (output["TemplateBody"] !== void 0) {
        contents.TemplateBody = (0, smithy_client_1.expectString)(output["TemplateBody"]);
      }
      if (output.StagesAvailable === "") {
        contents.StagesAvailable = [];
      } else if (output["StagesAvailable"] !== void 0 && output["StagesAvailable"]["member"] !== void 0) {
        contents.StagesAvailable = deserializeAws_queryStageList((0, smithy_client_1.getArrayIfSingleItem)(output["StagesAvailable"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryGetTemplateSummaryOutput = (output, context) => {
      const contents = {
        Parameters: void 0,
        Description: void 0,
        Capabilities: void 0,
        CapabilitiesReason: void 0,
        ResourceTypes: void 0,
        Version: void 0,
        Metadata: void 0,
        DeclaredTransforms: void 0,
        ResourceIdentifierSummaries: void 0
      };
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["member"] !== void 0) {
        contents.Parameters = deserializeAws_queryParameterDeclarations((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["member"]), context);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output.Capabilities === "") {
        contents.Capabilities = [];
      } else if (output["Capabilities"] !== void 0 && output["Capabilities"]["member"] !== void 0) {
        contents.Capabilities = deserializeAws_queryCapabilities((0, smithy_client_1.getArrayIfSingleItem)(output["Capabilities"]["member"]), context);
      }
      if (output["CapabilitiesReason"] !== void 0) {
        contents.CapabilitiesReason = (0, smithy_client_1.expectString)(output["CapabilitiesReason"]);
      }
      if (output.ResourceTypes === "") {
        contents.ResourceTypes = [];
      } else if (output["ResourceTypes"] !== void 0 && output["ResourceTypes"]["member"] !== void 0) {
        contents.ResourceTypes = deserializeAws_queryResourceTypes((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceTypes"]["member"]), context);
      }
      if (output["Version"] !== void 0) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
      }
      if (output["Metadata"] !== void 0) {
        contents.Metadata = (0, smithy_client_1.expectString)(output["Metadata"]);
      }
      if (output.DeclaredTransforms === "") {
        contents.DeclaredTransforms = [];
      } else if (output["DeclaredTransforms"] !== void 0 && output["DeclaredTransforms"]["member"] !== void 0) {
        contents.DeclaredTransforms = deserializeAws_queryTransformsList((0, smithy_client_1.getArrayIfSingleItem)(output["DeclaredTransforms"]["member"]), context);
      }
      if (output.ResourceIdentifierSummaries === "") {
        contents.ResourceIdentifierSummaries = [];
      } else if (output["ResourceIdentifierSummaries"] !== void 0 && output["ResourceIdentifierSummaries"]["member"] !== void 0) {
        contents.ResourceIdentifierSummaries = deserializeAws_queryResourceIdentifierSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceIdentifierSummaries"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryImports = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryImportStacksToStackSetOutput = (output, context) => {
      const contents = {
        OperationId: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryInsufficientCapabilitiesException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidChangeSetStatusException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidOperationException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidStateTransitionException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryLimitExceededException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryListChangeSetsOutput = (output, context) => {
      const contents = {
        Summaries: void 0,
        NextToken: void 0
      };
      if (output.Summaries === "") {
        contents.Summaries = [];
      } else if (output["Summaries"] !== void 0 && output["Summaries"]["member"] !== void 0) {
        contents.Summaries = deserializeAws_queryChangeSetSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["Summaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListExportsOutput = (output, context) => {
      const contents = {
        Exports: void 0,
        NextToken: void 0
      };
      if (output.Exports === "") {
        contents.Exports = [];
      } else if (output["Exports"] !== void 0 && output["Exports"]["member"] !== void 0) {
        contents.Exports = deserializeAws_queryExports((0, smithy_client_1.getArrayIfSingleItem)(output["Exports"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListImportsOutput = (output, context) => {
      const contents = {
        Imports: void 0,
        NextToken: void 0
      };
      if (output.Imports === "") {
        contents.Imports = [];
      } else if (output["Imports"] !== void 0 && output["Imports"]["member"] !== void 0) {
        contents.Imports = deserializeAws_queryImports((0, smithy_client_1.getArrayIfSingleItem)(output["Imports"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListStackInstancesOutput = (output, context) => {
      const contents = {
        Summaries: void 0,
        NextToken: void 0
      };
      if (output.Summaries === "") {
        contents.Summaries = [];
      } else if (output["Summaries"] !== void 0 && output["Summaries"]["member"] !== void 0) {
        contents.Summaries = deserializeAws_queryStackInstanceSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["Summaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListStackResourcesOutput = (output, context) => {
      const contents = {
        StackResourceSummaries: void 0,
        NextToken: void 0
      };
      if (output.StackResourceSummaries === "") {
        contents.StackResourceSummaries = [];
      } else if (output["StackResourceSummaries"] !== void 0 && output["StackResourceSummaries"]["member"] !== void 0) {
        contents.StackResourceSummaries = deserializeAws_queryStackResourceSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["StackResourceSummaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListStackSetOperationResultsOutput = (output, context) => {
      const contents = {
        Summaries: void 0,
        NextToken: void 0
      };
      if (output.Summaries === "") {
        contents.Summaries = [];
      } else if (output["Summaries"] !== void 0 && output["Summaries"]["member"] !== void 0) {
        contents.Summaries = deserializeAws_queryStackSetOperationResultSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["Summaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListStackSetOperationsOutput = (output, context) => {
      const contents = {
        Summaries: void 0,
        NextToken: void 0
      };
      if (output.Summaries === "") {
        contents.Summaries = [];
      } else if (output["Summaries"] !== void 0 && output["Summaries"]["member"] !== void 0) {
        contents.Summaries = deserializeAws_queryStackSetOperationSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["Summaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListStackSetsOutput = (output, context) => {
      const contents = {
        Summaries: void 0,
        NextToken: void 0
      };
      if (output.Summaries === "") {
        contents.Summaries = [];
      } else if (output["Summaries"] !== void 0 && output["Summaries"]["member"] !== void 0) {
        contents.Summaries = deserializeAws_queryStackSetSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["Summaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListStacksOutput = (output, context) => {
      const contents = {
        StackSummaries: void 0,
        NextToken: void 0
      };
      if (output.StackSummaries === "") {
        contents.StackSummaries = [];
      } else if (output["StackSummaries"] !== void 0 && output["StackSummaries"]["member"] !== void 0) {
        contents.StackSummaries = deserializeAws_queryStackSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["StackSummaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListTypeRegistrationsOutput = (output, context) => {
      const contents = {
        RegistrationTokenList: void 0,
        NextToken: void 0
      };
      if (output.RegistrationTokenList === "") {
        contents.RegistrationTokenList = [];
      } else if (output["RegistrationTokenList"] !== void 0 && output["RegistrationTokenList"]["member"] !== void 0) {
        contents.RegistrationTokenList = deserializeAws_queryRegistrationTokenList((0, smithy_client_1.getArrayIfSingleItem)(output["RegistrationTokenList"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListTypesOutput = (output, context) => {
      const contents = {
        TypeSummaries: void 0,
        NextToken: void 0
      };
      if (output.TypeSummaries === "") {
        contents.TypeSummaries = [];
      } else if (output["TypeSummaries"] !== void 0 && output["TypeSummaries"]["member"] !== void 0) {
        contents.TypeSummaries = deserializeAws_queryTypeSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["TypeSummaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryListTypeVersionsOutput = (output, context) => {
      const contents = {
        TypeVersionSummaries: void 0,
        NextToken: void 0
      };
      if (output.TypeVersionSummaries === "") {
        contents.TypeVersionSummaries = [];
      } else if (output["TypeVersionSummaries"] !== void 0 && output["TypeVersionSummaries"]["member"] !== void 0) {
        contents.TypeVersionSummaries = deserializeAws_queryTypeVersionSummaries((0, smithy_client_1.getArrayIfSingleItem)(output["TypeVersionSummaries"]["member"]), context);
      }
      if (output["NextToken"] !== void 0) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
      }
      return contents;
    };
    var deserializeAws_queryLoggingConfig = (output, context) => {
      const contents = {
        LogRoleArn: void 0,
        LogGroupName: void 0
      };
      if (output["LogRoleArn"] !== void 0) {
        contents.LogRoleArn = (0, smithy_client_1.expectString)(output["LogRoleArn"]);
      }
      if (output["LogGroupName"] !== void 0) {
        contents.LogGroupName = (0, smithy_client_1.expectString)(output["LogGroupName"]);
      }
      return contents;
    };
    var deserializeAws_queryLogicalResourceIds = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryManagedExecution = (output, context) => {
      const contents = {
        Active: void 0
      };
      if (output["Active"] !== void 0) {
        contents.Active = (0, smithy_client_1.parseBoolean)(output["Active"]);
      }
      return contents;
    };
    var deserializeAws_queryModuleInfo = (output, context) => {
      const contents = {
        TypeHierarchy: void 0,
        LogicalIdHierarchy: void 0
      };
      if (output["TypeHierarchy"] !== void 0) {
        contents.TypeHierarchy = (0, smithy_client_1.expectString)(output["TypeHierarchy"]);
      }
      if (output["LogicalIdHierarchy"] !== void 0) {
        contents.LogicalIdHierarchy = (0, smithy_client_1.expectString)(output["LogicalIdHierarchy"]);
      }
      return contents;
    };
    var deserializeAws_queryNameAlreadyExistsException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryNotificationARNs = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryOperationIdAlreadyExistsException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryOperationInProgressException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryOperationNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryOperationStatusCheckFailedException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryOrganizationalUnitIdList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryOutput = (output, context) => {
      const contents = {
        OutputKey: void 0,
        OutputValue: void 0,
        Description: void 0,
        ExportName: void 0
      };
      if (output["OutputKey"] !== void 0) {
        contents.OutputKey = (0, smithy_client_1.expectString)(output["OutputKey"]);
      }
      if (output["OutputValue"] !== void 0) {
        contents.OutputValue = (0, smithy_client_1.expectString)(output["OutputValue"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["ExportName"] !== void 0) {
        contents.ExportName = (0, smithy_client_1.expectString)(output["ExportName"]);
      }
      return contents;
    };
    var deserializeAws_queryOutputs = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryOutput(entry, context);
      });
    };
    var deserializeAws_queryParameter = (output, context) => {
      const contents = {
        ParameterKey: void 0,
        ParameterValue: void 0,
        UsePreviousValue: void 0,
        ResolvedValue: void 0
      };
      if (output["ParameterKey"] !== void 0) {
        contents.ParameterKey = (0, smithy_client_1.expectString)(output["ParameterKey"]);
      }
      if (output["ParameterValue"] !== void 0) {
        contents.ParameterValue = (0, smithy_client_1.expectString)(output["ParameterValue"]);
      }
      if (output["UsePreviousValue"] !== void 0) {
        contents.UsePreviousValue = (0, smithy_client_1.parseBoolean)(output["UsePreviousValue"]);
      }
      if (output["ResolvedValue"] !== void 0) {
        contents.ResolvedValue = (0, smithy_client_1.expectString)(output["ResolvedValue"]);
      }
      return contents;
    };
    var deserializeAws_queryParameterConstraints = (output, context) => {
      const contents = {
        AllowedValues: void 0
      };
      if (output.AllowedValues === "") {
        contents.AllowedValues = [];
      } else if (output["AllowedValues"] !== void 0 && output["AllowedValues"]["member"] !== void 0) {
        contents.AllowedValues = deserializeAws_queryAllowedValues((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedValues"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryParameterDeclaration = (output, context) => {
      const contents = {
        ParameterKey: void 0,
        DefaultValue: void 0,
        ParameterType: void 0,
        NoEcho: void 0,
        Description: void 0,
        ParameterConstraints: void 0
      };
      if (output["ParameterKey"] !== void 0) {
        contents.ParameterKey = (0, smithy_client_1.expectString)(output["ParameterKey"]);
      }
      if (output["DefaultValue"] !== void 0) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
      }
      if (output["ParameterType"] !== void 0) {
        contents.ParameterType = (0, smithy_client_1.expectString)(output["ParameterType"]);
      }
      if (output["NoEcho"] !== void 0) {
        contents.NoEcho = (0, smithy_client_1.parseBoolean)(output["NoEcho"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["ParameterConstraints"] !== void 0) {
        contents.ParameterConstraints = deserializeAws_queryParameterConstraints(output["ParameterConstraints"], context);
      }
      return contents;
    };
    var deserializeAws_queryParameterDeclarations = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryParameterDeclaration(entry, context);
      });
    };
    var deserializeAws_queryParameters = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryParameter(entry, context);
      });
    };
    var deserializeAws_queryPhysicalResourceIdContext = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPhysicalResourceIdContextKeyValuePair(entry, context);
      });
    };
    var deserializeAws_queryPhysicalResourceIdContextKeyValuePair = (output, context) => {
      const contents = {
        Key: void 0,
        Value: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_queryPropertyDifference = (output, context) => {
      const contents = {
        PropertyPath: void 0,
        ExpectedValue: void 0,
        ActualValue: void 0,
        DifferenceType: void 0
      };
      if (output["PropertyPath"] !== void 0) {
        contents.PropertyPath = (0, smithy_client_1.expectString)(output["PropertyPath"]);
      }
      if (output["ExpectedValue"] !== void 0) {
        contents.ExpectedValue = (0, smithy_client_1.expectString)(output["ExpectedValue"]);
      }
      if (output["ActualValue"] !== void 0) {
        contents.ActualValue = (0, smithy_client_1.expectString)(output["ActualValue"]);
      }
      if (output["DifferenceType"] !== void 0) {
        contents.DifferenceType = (0, smithy_client_1.expectString)(output["DifferenceType"]);
      }
      return contents;
    };
    var deserializeAws_queryPropertyDifferences = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryPropertyDifference(entry, context);
      });
    };
    var deserializeAws_queryPublishTypeOutput = (output, context) => {
      const contents = {
        PublicTypeArn: void 0
      };
      if (output["PublicTypeArn"] !== void 0) {
        contents.PublicTypeArn = (0, smithy_client_1.expectString)(output["PublicTypeArn"]);
      }
      return contents;
    };
    var deserializeAws_queryRecordHandlerProgressOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryRegionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryRegisterPublisherOutput = (output, context) => {
      const contents = {
        PublisherId: void 0
      };
      if (output["PublisherId"] !== void 0) {
        contents.PublisherId = (0, smithy_client_1.expectString)(output["PublisherId"]);
      }
      return contents;
    };
    var deserializeAws_queryRegisterTypeOutput = (output, context) => {
      const contents = {
        RegistrationToken: void 0
      };
      if (output["RegistrationToken"] !== void 0) {
        contents.RegistrationToken = (0, smithy_client_1.expectString)(output["RegistrationToken"]);
      }
      return contents;
    };
    var deserializeAws_queryRegistrationTokenList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryRequiredActivatedType = (output, context) => {
      const contents = {
        TypeNameAlias: void 0,
        OriginalTypeName: void 0,
        PublisherId: void 0,
        SupportedMajorVersions: void 0
      };
      if (output["TypeNameAlias"] !== void 0) {
        contents.TypeNameAlias = (0, smithy_client_1.expectString)(output["TypeNameAlias"]);
      }
      if (output["OriginalTypeName"] !== void 0) {
        contents.OriginalTypeName = (0, smithy_client_1.expectString)(output["OriginalTypeName"]);
      }
      if (output["PublisherId"] !== void 0) {
        contents.PublisherId = (0, smithy_client_1.expectString)(output["PublisherId"]);
      }
      if (output.SupportedMajorVersions === "") {
        contents.SupportedMajorVersions = [];
      } else if (output["SupportedMajorVersions"] !== void 0 && output["SupportedMajorVersions"]["member"] !== void 0) {
        contents.SupportedMajorVersions = deserializeAws_querySupportedMajorVersions((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedMajorVersions"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryRequiredActivatedTypes = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryRequiredActivatedType(entry, context);
      });
    };
    var deserializeAws_queryResourceChange = (output, context) => {
      const contents = {
        Action: void 0,
        LogicalResourceId: void 0,
        PhysicalResourceId: void 0,
        ResourceType: void 0,
        Replacement: void 0,
        Scope: void 0,
        Details: void 0,
        ChangeSetId: void 0,
        ModuleInfo: void 0
      };
      if (output["Action"] !== void 0) {
        contents.Action = (0, smithy_client_1.expectString)(output["Action"]);
      }
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["PhysicalResourceId"] !== void 0) {
        contents.PhysicalResourceId = (0, smithy_client_1.expectString)(output["PhysicalResourceId"]);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["Replacement"] !== void 0) {
        contents.Replacement = (0, smithy_client_1.expectString)(output["Replacement"]);
      }
      if (output.Scope === "") {
        contents.Scope = [];
      } else if (output["Scope"] !== void 0 && output["Scope"]["member"] !== void 0) {
        contents.Scope = deserializeAws_queryScope((0, smithy_client_1.getArrayIfSingleItem)(output["Scope"]["member"]), context);
      }
      if (output.Details === "") {
        contents.Details = [];
      } else if (output["Details"] !== void 0 && output["Details"]["member"] !== void 0) {
        contents.Details = deserializeAws_queryResourceChangeDetails((0, smithy_client_1.getArrayIfSingleItem)(output["Details"]["member"]), context);
      }
      if (output["ChangeSetId"] !== void 0) {
        contents.ChangeSetId = (0, smithy_client_1.expectString)(output["ChangeSetId"]);
      }
      if (output["ModuleInfo"] !== void 0) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
      }
      return contents;
    };
    var deserializeAws_queryResourceChangeDetail = (output, context) => {
      const contents = {
        Target: void 0,
        Evaluation: void 0,
        ChangeSource: void 0,
        CausingEntity: void 0
      };
      if (output["Target"] !== void 0) {
        contents.Target = deserializeAws_queryResourceTargetDefinition(output["Target"], context);
      }
      if (output["Evaluation"] !== void 0) {
        contents.Evaluation = (0, smithy_client_1.expectString)(output["Evaluation"]);
      }
      if (output["ChangeSource"] !== void 0) {
        contents.ChangeSource = (0, smithy_client_1.expectString)(output["ChangeSource"]);
      }
      if (output["CausingEntity"] !== void 0) {
        contents.CausingEntity = (0, smithy_client_1.expectString)(output["CausingEntity"]);
      }
      return contents;
    };
    var deserializeAws_queryResourceChangeDetails = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryResourceChangeDetail(entry, context);
      });
    };
    var deserializeAws_queryResourceIdentifiers = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryResourceIdentifierSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryResourceIdentifierSummary(entry, context);
      });
    };
    var deserializeAws_queryResourceIdentifierSummary = (output, context) => {
      const contents = {
        ResourceType: void 0,
        LogicalResourceIds: void 0,
        ResourceIdentifiers: void 0
      };
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output.LogicalResourceIds === "") {
        contents.LogicalResourceIds = [];
      } else if (output["LogicalResourceIds"] !== void 0 && output["LogicalResourceIds"]["member"] !== void 0) {
        contents.LogicalResourceIds = deserializeAws_queryLogicalResourceIds((0, smithy_client_1.getArrayIfSingleItem)(output["LogicalResourceIds"]["member"]), context);
      }
      if (output.ResourceIdentifiers === "") {
        contents.ResourceIdentifiers = [];
      } else if (output["ResourceIdentifiers"] !== void 0 && output["ResourceIdentifiers"]["member"] !== void 0) {
        contents.ResourceIdentifiers = deserializeAws_queryResourceIdentifiers((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceIdentifiers"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryResourceTargetDefinition = (output, context) => {
      const contents = {
        Attribute: void 0,
        Name: void 0,
        RequiresRecreation: void 0
      };
      if (output["Attribute"] !== void 0) {
        contents.Attribute = (0, smithy_client_1.expectString)(output["Attribute"]);
      }
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["RequiresRecreation"] !== void 0) {
        contents.RequiresRecreation = (0, smithy_client_1.expectString)(output["RequiresRecreation"]);
      }
      return contents;
    };
    var deserializeAws_queryResourceTypes = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryRollbackConfiguration = (output, context) => {
      const contents = {
        RollbackTriggers: void 0,
        MonitoringTimeInMinutes: void 0
      };
      if (output.RollbackTriggers === "") {
        contents.RollbackTriggers = [];
      } else if (output["RollbackTriggers"] !== void 0 && output["RollbackTriggers"]["member"] !== void 0) {
        contents.RollbackTriggers = deserializeAws_queryRollbackTriggers((0, smithy_client_1.getArrayIfSingleItem)(output["RollbackTriggers"]["member"]), context);
      }
      if (output["MonitoringTimeInMinutes"] !== void 0) {
        contents.MonitoringTimeInMinutes = (0, smithy_client_1.strictParseInt32)(output["MonitoringTimeInMinutes"]);
      }
      return contents;
    };
    var deserializeAws_queryRollbackStackOutput = (output, context) => {
      const contents = {
        StackId: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      return contents;
    };
    var deserializeAws_queryRollbackTrigger = (output, context) => {
      const contents = {
        Arn: void 0,
        Type: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      return contents;
    };
    var deserializeAws_queryRollbackTriggers = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryRollbackTrigger(entry, context);
      });
    };
    var deserializeAws_queryScope = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_querySetTypeConfigurationOutput = (output, context) => {
      const contents = {
        ConfigurationArn: void 0
      };
      if (output["ConfigurationArn"] !== void 0) {
        contents.ConfigurationArn = (0, smithy_client_1.expectString)(output["ConfigurationArn"]);
      }
      return contents;
    };
    var deserializeAws_querySetTypeDefaultVersionOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_queryStack = (output, context) => {
      const contents = {
        StackId: void 0,
        StackName: void 0,
        ChangeSetId: void 0,
        Description: void 0,
        Parameters: void 0,
        CreationTime: void 0,
        DeletionTime: void 0,
        LastUpdatedTime: void 0,
        RollbackConfiguration: void 0,
        StackStatus: void 0,
        StackStatusReason: void 0,
        DisableRollback: void 0,
        NotificationARNs: void 0,
        TimeoutInMinutes: void 0,
        Capabilities: void 0,
        Outputs: void 0,
        RoleARN: void 0,
        Tags: void 0,
        EnableTerminationProtection: void 0,
        ParentId: void 0,
        RootId: void 0,
        DriftInformation: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["ChangeSetId"] !== void 0) {
        contents.ChangeSetId = (0, smithy_client_1.expectString)(output["ChangeSetId"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["member"] !== void 0) {
        contents.Parameters = deserializeAws_queryParameters((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["member"]), context);
      }
      if (output["CreationTime"] !== void 0) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationTime"]));
      }
      if (output["DeletionTime"] !== void 0) {
        contents.DeletionTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["DeletionTime"]));
      }
      if (output["LastUpdatedTime"] !== void 0) {
        contents.LastUpdatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdatedTime"]));
      }
      if (output["RollbackConfiguration"] !== void 0) {
        contents.RollbackConfiguration = deserializeAws_queryRollbackConfiguration(output["RollbackConfiguration"], context);
      }
      if (output["StackStatus"] !== void 0) {
        contents.StackStatus = (0, smithy_client_1.expectString)(output["StackStatus"]);
      }
      if (output["StackStatusReason"] !== void 0) {
        contents.StackStatusReason = (0, smithy_client_1.expectString)(output["StackStatusReason"]);
      }
      if (output["DisableRollback"] !== void 0) {
        contents.DisableRollback = (0, smithy_client_1.parseBoolean)(output["DisableRollback"]);
      }
      if (output.NotificationARNs === "") {
        contents.NotificationARNs = [];
      } else if (output["NotificationARNs"] !== void 0 && output["NotificationARNs"]["member"] !== void 0) {
        contents.NotificationARNs = deserializeAws_queryNotificationARNs((0, smithy_client_1.getArrayIfSingleItem)(output["NotificationARNs"]["member"]), context);
      }
      if (output["TimeoutInMinutes"] !== void 0) {
        contents.TimeoutInMinutes = (0, smithy_client_1.strictParseInt32)(output["TimeoutInMinutes"]);
      }
      if (output.Capabilities === "") {
        contents.Capabilities = [];
      } else if (output["Capabilities"] !== void 0 && output["Capabilities"]["member"] !== void 0) {
        contents.Capabilities = deserializeAws_queryCapabilities((0, smithy_client_1.getArrayIfSingleItem)(output["Capabilities"]["member"]), context);
      }
      if (output.Outputs === "") {
        contents.Outputs = [];
      } else if (output["Outputs"] !== void 0 && output["Outputs"]["member"] !== void 0) {
        contents.Outputs = deserializeAws_queryOutputs((0, smithy_client_1.getArrayIfSingleItem)(output["Outputs"]["member"]), context);
      }
      if (output["RoleARN"] !== void 0) {
        contents.RoleARN = (0, smithy_client_1.expectString)(output["RoleARN"]);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_queryTags((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["EnableTerminationProtection"] !== void 0) {
        contents.EnableTerminationProtection = (0, smithy_client_1.parseBoolean)(output["EnableTerminationProtection"]);
      }
      if (output["ParentId"] !== void 0) {
        contents.ParentId = (0, smithy_client_1.expectString)(output["ParentId"]);
      }
      if (output["RootId"] !== void 0) {
        contents.RootId = (0, smithy_client_1.expectString)(output["RootId"]);
      }
      if (output["DriftInformation"] !== void 0) {
        contents.DriftInformation = deserializeAws_queryStackDriftInformation(output["DriftInformation"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackDriftInformation = (output, context) => {
      const contents = {
        StackDriftStatus: void 0,
        LastCheckTimestamp: void 0
      };
      if (output["StackDriftStatus"] !== void 0) {
        contents.StackDriftStatus = (0, smithy_client_1.expectString)(output["StackDriftStatus"]);
      }
      if (output["LastCheckTimestamp"] !== void 0) {
        contents.LastCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastCheckTimestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryStackDriftInformationSummary = (output, context) => {
      const contents = {
        StackDriftStatus: void 0,
        LastCheckTimestamp: void 0
      };
      if (output["StackDriftStatus"] !== void 0) {
        contents.StackDriftStatus = (0, smithy_client_1.expectString)(output["StackDriftStatus"]);
      }
      if (output["LastCheckTimestamp"] !== void 0) {
        contents.LastCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastCheckTimestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryStackEvent = (output, context) => {
      const contents = {
        StackId: void 0,
        EventId: void 0,
        StackName: void 0,
        LogicalResourceId: void 0,
        PhysicalResourceId: void 0,
        ResourceType: void 0,
        Timestamp: void 0,
        ResourceStatus: void 0,
        ResourceStatusReason: void 0,
        ResourceProperties: void 0,
        ClientRequestToken: void 0,
        HookType: void 0,
        HookStatus: void 0,
        HookStatusReason: void 0,
        HookInvocationPoint: void 0,
        HookFailureMode: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["EventId"] !== void 0) {
        contents.EventId = (0, smithy_client_1.expectString)(output["EventId"]);
      }
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["PhysicalResourceId"] !== void 0) {
        contents.PhysicalResourceId = (0, smithy_client_1.expectString)(output["PhysicalResourceId"]);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["Timestamp"] !== void 0) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Timestamp"]));
      }
      if (output["ResourceStatus"] !== void 0) {
        contents.ResourceStatus = (0, smithy_client_1.expectString)(output["ResourceStatus"]);
      }
      if (output["ResourceStatusReason"] !== void 0) {
        contents.ResourceStatusReason = (0, smithy_client_1.expectString)(output["ResourceStatusReason"]);
      }
      if (output["ResourceProperties"] !== void 0) {
        contents.ResourceProperties = (0, smithy_client_1.expectString)(output["ResourceProperties"]);
      }
      if (output["ClientRequestToken"] !== void 0) {
        contents.ClientRequestToken = (0, smithy_client_1.expectString)(output["ClientRequestToken"]);
      }
      if (output["HookType"] !== void 0) {
        contents.HookType = (0, smithy_client_1.expectString)(output["HookType"]);
      }
      if (output["HookStatus"] !== void 0) {
        contents.HookStatus = (0, smithy_client_1.expectString)(output["HookStatus"]);
      }
      if (output["HookStatusReason"] !== void 0) {
        contents.HookStatusReason = (0, smithy_client_1.expectString)(output["HookStatusReason"]);
      }
      if (output["HookInvocationPoint"] !== void 0) {
        contents.HookInvocationPoint = (0, smithy_client_1.expectString)(output["HookInvocationPoint"]);
      }
      if (output["HookFailureMode"] !== void 0) {
        contents.HookFailureMode = (0, smithy_client_1.expectString)(output["HookFailureMode"]);
      }
      return contents;
    };
    var deserializeAws_queryStackEvents = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackEvent(entry, context);
      });
    };
    var deserializeAws_queryStackInstance = (output, context) => {
      const contents = {
        StackSetId: void 0,
        Region: void 0,
        Account: void 0,
        StackId: void 0,
        ParameterOverrides: void 0,
        Status: void 0,
        StackInstanceStatus: void 0,
        StatusReason: void 0,
        OrganizationalUnitId: void 0,
        DriftStatus: void 0,
        LastDriftCheckTimestamp: void 0,
        LastOperationId: void 0
      };
      if (output["StackSetId"] !== void 0) {
        contents.StackSetId = (0, smithy_client_1.expectString)(output["StackSetId"]);
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output.ParameterOverrides === "") {
        contents.ParameterOverrides = [];
      } else if (output["ParameterOverrides"] !== void 0 && output["ParameterOverrides"]["member"] !== void 0) {
        contents.ParameterOverrides = deserializeAws_queryParameters((0, smithy_client_1.getArrayIfSingleItem)(output["ParameterOverrides"]["member"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["StackInstanceStatus"] !== void 0) {
        contents.StackInstanceStatus = deserializeAws_queryStackInstanceComprehensiveStatus(output["StackInstanceStatus"], context);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output["OrganizationalUnitId"] !== void 0) {
        contents.OrganizationalUnitId = (0, smithy_client_1.expectString)(output["OrganizationalUnitId"]);
      }
      if (output["DriftStatus"] !== void 0) {
        contents.DriftStatus = (0, smithy_client_1.expectString)(output["DriftStatus"]);
      }
      if (output["LastDriftCheckTimestamp"] !== void 0) {
        contents.LastDriftCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastDriftCheckTimestamp"]));
      }
      if (output["LastOperationId"] !== void 0) {
        contents.LastOperationId = (0, smithy_client_1.expectString)(output["LastOperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryStackInstanceComprehensiveStatus = (output, context) => {
      const contents = {
        DetailedStatus: void 0
      };
      if (output["DetailedStatus"] !== void 0) {
        contents.DetailedStatus = (0, smithy_client_1.expectString)(output["DetailedStatus"]);
      }
      return contents;
    };
    var deserializeAws_queryStackInstanceNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryStackInstanceSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackInstanceSummary(entry, context);
      });
    };
    var deserializeAws_queryStackInstanceSummary = (output, context) => {
      const contents = {
        StackSetId: void 0,
        Region: void 0,
        Account: void 0,
        StackId: void 0,
        Status: void 0,
        StatusReason: void 0,
        StackInstanceStatus: void 0,
        OrganizationalUnitId: void 0,
        DriftStatus: void 0,
        LastDriftCheckTimestamp: void 0,
        LastOperationId: void 0
      };
      if (output["StackSetId"] !== void 0) {
        contents.StackSetId = (0, smithy_client_1.expectString)(output["StackSetId"]);
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output["StackInstanceStatus"] !== void 0) {
        contents.StackInstanceStatus = deserializeAws_queryStackInstanceComprehensiveStatus(output["StackInstanceStatus"], context);
      }
      if (output["OrganizationalUnitId"] !== void 0) {
        contents.OrganizationalUnitId = (0, smithy_client_1.expectString)(output["OrganizationalUnitId"]);
      }
      if (output["DriftStatus"] !== void 0) {
        contents.DriftStatus = (0, smithy_client_1.expectString)(output["DriftStatus"]);
      }
      if (output["LastDriftCheckTimestamp"] !== void 0) {
        contents.LastDriftCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastDriftCheckTimestamp"]));
      }
      if (output["LastOperationId"] !== void 0) {
        contents.LastOperationId = (0, smithy_client_1.expectString)(output["LastOperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryStackNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryStackResource = (output, context) => {
      const contents = {
        StackName: void 0,
        StackId: void 0,
        LogicalResourceId: void 0,
        PhysicalResourceId: void 0,
        ResourceType: void 0,
        Timestamp: void 0,
        ResourceStatus: void 0,
        ResourceStatusReason: void 0,
        Description: void 0,
        DriftInformation: void 0,
        ModuleInfo: void 0
      };
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["PhysicalResourceId"] !== void 0) {
        contents.PhysicalResourceId = (0, smithy_client_1.expectString)(output["PhysicalResourceId"]);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["Timestamp"] !== void 0) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Timestamp"]));
      }
      if (output["ResourceStatus"] !== void 0) {
        contents.ResourceStatus = (0, smithy_client_1.expectString)(output["ResourceStatus"]);
      }
      if (output["ResourceStatusReason"] !== void 0) {
        contents.ResourceStatusReason = (0, smithy_client_1.expectString)(output["ResourceStatusReason"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["DriftInformation"] !== void 0) {
        contents.DriftInformation = deserializeAws_queryStackResourceDriftInformation(output["DriftInformation"], context);
      }
      if (output["ModuleInfo"] !== void 0) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackResourceDetail = (output, context) => {
      const contents = {
        StackName: void 0,
        StackId: void 0,
        LogicalResourceId: void 0,
        PhysicalResourceId: void 0,
        ResourceType: void 0,
        LastUpdatedTimestamp: void 0,
        ResourceStatus: void 0,
        ResourceStatusReason: void 0,
        Description: void 0,
        Metadata: void 0,
        DriftInformation: void 0,
        ModuleInfo: void 0
      };
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["PhysicalResourceId"] !== void 0) {
        contents.PhysicalResourceId = (0, smithy_client_1.expectString)(output["PhysicalResourceId"]);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["LastUpdatedTimestamp"] !== void 0) {
        contents.LastUpdatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdatedTimestamp"]));
      }
      if (output["ResourceStatus"] !== void 0) {
        contents.ResourceStatus = (0, smithy_client_1.expectString)(output["ResourceStatus"]);
      }
      if (output["ResourceStatusReason"] !== void 0) {
        contents.ResourceStatusReason = (0, smithy_client_1.expectString)(output["ResourceStatusReason"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Metadata"] !== void 0) {
        contents.Metadata = (0, smithy_client_1.expectString)(output["Metadata"]);
      }
      if (output["DriftInformation"] !== void 0) {
        contents.DriftInformation = deserializeAws_queryStackResourceDriftInformation(output["DriftInformation"], context);
      }
      if (output["ModuleInfo"] !== void 0) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackResourceDrift = (output, context) => {
      const contents = {
        StackId: void 0,
        LogicalResourceId: void 0,
        PhysicalResourceId: void 0,
        PhysicalResourceIdContext: void 0,
        ResourceType: void 0,
        ExpectedProperties: void 0,
        ActualProperties: void 0,
        PropertyDifferences: void 0,
        StackResourceDriftStatus: void 0,
        Timestamp: void 0,
        ModuleInfo: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["PhysicalResourceId"] !== void 0) {
        contents.PhysicalResourceId = (0, smithy_client_1.expectString)(output["PhysicalResourceId"]);
      }
      if (output.PhysicalResourceIdContext === "") {
        contents.PhysicalResourceIdContext = [];
      } else if (output["PhysicalResourceIdContext"] !== void 0 && output["PhysicalResourceIdContext"]["member"] !== void 0) {
        contents.PhysicalResourceIdContext = deserializeAws_queryPhysicalResourceIdContext((0, smithy_client_1.getArrayIfSingleItem)(output["PhysicalResourceIdContext"]["member"]), context);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["ExpectedProperties"] !== void 0) {
        contents.ExpectedProperties = (0, smithy_client_1.expectString)(output["ExpectedProperties"]);
      }
      if (output["ActualProperties"] !== void 0) {
        contents.ActualProperties = (0, smithy_client_1.expectString)(output["ActualProperties"]);
      }
      if (output.PropertyDifferences === "") {
        contents.PropertyDifferences = [];
      } else if (output["PropertyDifferences"] !== void 0 && output["PropertyDifferences"]["member"] !== void 0) {
        contents.PropertyDifferences = deserializeAws_queryPropertyDifferences((0, smithy_client_1.getArrayIfSingleItem)(output["PropertyDifferences"]["member"]), context);
      }
      if (output["StackResourceDriftStatus"] !== void 0) {
        contents.StackResourceDriftStatus = (0, smithy_client_1.expectString)(output["StackResourceDriftStatus"]);
      }
      if (output["Timestamp"] !== void 0) {
        contents.Timestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["Timestamp"]));
      }
      if (output["ModuleInfo"] !== void 0) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackResourceDriftInformation = (output, context) => {
      const contents = {
        StackResourceDriftStatus: void 0,
        LastCheckTimestamp: void 0
      };
      if (output["StackResourceDriftStatus"] !== void 0) {
        contents.StackResourceDriftStatus = (0, smithy_client_1.expectString)(output["StackResourceDriftStatus"]);
      }
      if (output["LastCheckTimestamp"] !== void 0) {
        contents.LastCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastCheckTimestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryStackResourceDriftInformationSummary = (output, context) => {
      const contents = {
        StackResourceDriftStatus: void 0,
        LastCheckTimestamp: void 0
      };
      if (output["StackResourceDriftStatus"] !== void 0) {
        contents.StackResourceDriftStatus = (0, smithy_client_1.expectString)(output["StackResourceDriftStatus"]);
      }
      if (output["LastCheckTimestamp"] !== void 0) {
        contents.LastCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastCheckTimestamp"]));
      }
      return contents;
    };
    var deserializeAws_queryStackResourceDrifts = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackResourceDrift(entry, context);
      });
    };
    var deserializeAws_queryStackResources = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackResource(entry, context);
      });
    };
    var deserializeAws_queryStackResourceSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackResourceSummary(entry, context);
      });
    };
    var deserializeAws_queryStackResourceSummary = (output, context) => {
      const contents = {
        LogicalResourceId: void 0,
        PhysicalResourceId: void 0,
        ResourceType: void 0,
        LastUpdatedTimestamp: void 0,
        ResourceStatus: void 0,
        ResourceStatusReason: void 0,
        DriftInformation: void 0,
        ModuleInfo: void 0
      };
      if (output["LogicalResourceId"] !== void 0) {
        contents.LogicalResourceId = (0, smithy_client_1.expectString)(output["LogicalResourceId"]);
      }
      if (output["PhysicalResourceId"] !== void 0) {
        contents.PhysicalResourceId = (0, smithy_client_1.expectString)(output["PhysicalResourceId"]);
      }
      if (output["ResourceType"] !== void 0) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
      }
      if (output["LastUpdatedTimestamp"] !== void 0) {
        contents.LastUpdatedTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdatedTimestamp"]));
      }
      if (output["ResourceStatus"] !== void 0) {
        contents.ResourceStatus = (0, smithy_client_1.expectString)(output["ResourceStatus"]);
      }
      if (output["ResourceStatusReason"] !== void 0) {
        contents.ResourceStatusReason = (0, smithy_client_1.expectString)(output["ResourceStatusReason"]);
      }
      if (output["DriftInformation"] !== void 0) {
        contents.DriftInformation = deserializeAws_queryStackResourceDriftInformationSummary(output["DriftInformation"], context);
      }
      if (output["ModuleInfo"] !== void 0) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
      }
      return contents;
    };
    var deserializeAws_queryStacks = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStack(entry, context);
      });
    };
    var deserializeAws_queryStackSet = (output, context) => {
      const contents = {
        StackSetName: void 0,
        StackSetId: void 0,
        Description: void 0,
        Status: void 0,
        TemplateBody: void 0,
        Parameters: void 0,
        Capabilities: void 0,
        Tags: void 0,
        StackSetARN: void 0,
        AdministrationRoleARN: void 0,
        ExecutionRoleName: void 0,
        StackSetDriftDetectionDetails: void 0,
        AutoDeployment: void 0,
        PermissionModel: void 0,
        OrganizationalUnitIds: void 0,
        ManagedExecution: void 0,
        Regions: void 0
      };
      if (output["StackSetName"] !== void 0) {
        contents.StackSetName = (0, smithy_client_1.expectString)(output["StackSetName"]);
      }
      if (output["StackSetId"] !== void 0) {
        contents.StackSetId = (0, smithy_client_1.expectString)(output["StackSetId"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["TemplateBody"] !== void 0) {
        contents.TemplateBody = (0, smithy_client_1.expectString)(output["TemplateBody"]);
      }
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["member"] !== void 0) {
        contents.Parameters = deserializeAws_queryParameters((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["member"]), context);
      }
      if (output.Capabilities === "") {
        contents.Capabilities = [];
      } else if (output["Capabilities"] !== void 0 && output["Capabilities"]["member"] !== void 0) {
        contents.Capabilities = deserializeAws_queryCapabilities((0, smithy_client_1.getArrayIfSingleItem)(output["Capabilities"]["member"]), context);
      }
      if (output.Tags === "") {
        contents.Tags = [];
      } else if (output["Tags"] !== void 0 && output["Tags"]["member"] !== void 0) {
        contents.Tags = deserializeAws_queryTags((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["member"]), context);
      }
      if (output["StackSetARN"] !== void 0) {
        contents.StackSetARN = (0, smithy_client_1.expectString)(output["StackSetARN"]);
      }
      if (output["AdministrationRoleARN"] !== void 0) {
        contents.AdministrationRoleARN = (0, smithy_client_1.expectString)(output["AdministrationRoleARN"]);
      }
      if (output["ExecutionRoleName"] !== void 0) {
        contents.ExecutionRoleName = (0, smithy_client_1.expectString)(output["ExecutionRoleName"]);
      }
      if (output["StackSetDriftDetectionDetails"] !== void 0) {
        contents.StackSetDriftDetectionDetails = deserializeAws_queryStackSetDriftDetectionDetails(output["StackSetDriftDetectionDetails"], context);
      }
      if (output["AutoDeployment"] !== void 0) {
        contents.AutoDeployment = deserializeAws_queryAutoDeployment(output["AutoDeployment"], context);
      }
      if (output["PermissionModel"] !== void 0) {
        contents.PermissionModel = (0, smithy_client_1.expectString)(output["PermissionModel"]);
      }
      if (output.OrganizationalUnitIds === "") {
        contents.OrganizationalUnitIds = [];
      } else if (output["OrganizationalUnitIds"] !== void 0 && output["OrganizationalUnitIds"]["member"] !== void 0) {
        contents.OrganizationalUnitIds = deserializeAws_queryOrganizationalUnitIdList((0, smithy_client_1.getArrayIfSingleItem)(output["OrganizationalUnitIds"]["member"]), context);
      }
      if (output["ManagedExecution"] !== void 0) {
        contents.ManagedExecution = deserializeAws_queryManagedExecution(output["ManagedExecution"], context);
      }
      if (output.Regions === "") {
        contents.Regions = [];
      } else if (output["Regions"] !== void 0 && output["Regions"]["member"] !== void 0) {
        contents.Regions = deserializeAws_queryRegionList((0, smithy_client_1.getArrayIfSingleItem)(output["Regions"]["member"]), context);
      }
      return contents;
    };
    var deserializeAws_queryStackSetDriftDetectionDetails = (output, context) => {
      const contents = {
        DriftStatus: void 0,
        DriftDetectionStatus: void 0,
        LastDriftCheckTimestamp: void 0,
        TotalStackInstancesCount: void 0,
        DriftedStackInstancesCount: void 0,
        InSyncStackInstancesCount: void 0,
        InProgressStackInstancesCount: void 0,
        FailedStackInstancesCount: void 0
      };
      if (output["DriftStatus"] !== void 0) {
        contents.DriftStatus = (0, smithy_client_1.expectString)(output["DriftStatus"]);
      }
      if (output["DriftDetectionStatus"] !== void 0) {
        contents.DriftDetectionStatus = (0, smithy_client_1.expectString)(output["DriftDetectionStatus"]);
      }
      if (output["LastDriftCheckTimestamp"] !== void 0) {
        contents.LastDriftCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastDriftCheckTimestamp"]));
      }
      if (output["TotalStackInstancesCount"] !== void 0) {
        contents.TotalStackInstancesCount = (0, smithy_client_1.strictParseInt32)(output["TotalStackInstancesCount"]);
      }
      if (output["DriftedStackInstancesCount"] !== void 0) {
        contents.DriftedStackInstancesCount = (0, smithy_client_1.strictParseInt32)(output["DriftedStackInstancesCount"]);
      }
      if (output["InSyncStackInstancesCount"] !== void 0) {
        contents.InSyncStackInstancesCount = (0, smithy_client_1.strictParseInt32)(output["InSyncStackInstancesCount"]);
      }
      if (output["InProgressStackInstancesCount"] !== void 0) {
        contents.InProgressStackInstancesCount = (0, smithy_client_1.strictParseInt32)(output["InProgressStackInstancesCount"]);
      }
      if (output["FailedStackInstancesCount"] !== void 0) {
        contents.FailedStackInstancesCount = (0, smithy_client_1.strictParseInt32)(output["FailedStackInstancesCount"]);
      }
      return contents;
    };
    var deserializeAws_queryStackSetNotEmptyException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryStackSetNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryStackSetOperation = (output, context) => {
      const contents = {
        OperationId: void 0,
        StackSetId: void 0,
        Action: void 0,
        Status: void 0,
        OperationPreferences: void 0,
        RetainStacks: void 0,
        AdministrationRoleARN: void 0,
        ExecutionRoleName: void 0,
        CreationTimestamp: void 0,
        EndTimestamp: void 0,
        DeploymentTargets: void 0,
        StackSetDriftDetectionDetails: void 0,
        StatusReason: void 0,
        StatusDetails: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      if (output["StackSetId"] !== void 0) {
        contents.StackSetId = (0, smithy_client_1.expectString)(output["StackSetId"]);
      }
      if (output["Action"] !== void 0) {
        contents.Action = (0, smithy_client_1.expectString)(output["Action"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["OperationPreferences"] !== void 0) {
        contents.OperationPreferences = deserializeAws_queryStackSetOperationPreferences(output["OperationPreferences"], context);
      }
      if (output["RetainStacks"] !== void 0) {
        contents.RetainStacks = (0, smithy_client_1.parseBoolean)(output["RetainStacks"]);
      }
      if (output["AdministrationRoleARN"] !== void 0) {
        contents.AdministrationRoleARN = (0, smithy_client_1.expectString)(output["AdministrationRoleARN"]);
      }
      if (output["ExecutionRoleName"] !== void 0) {
        contents.ExecutionRoleName = (0, smithy_client_1.expectString)(output["ExecutionRoleName"]);
      }
      if (output["CreationTimestamp"] !== void 0) {
        contents.CreationTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationTimestamp"]));
      }
      if (output["EndTimestamp"] !== void 0) {
        contents.EndTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EndTimestamp"]));
      }
      if (output["DeploymentTargets"] !== void 0) {
        contents.DeploymentTargets = deserializeAws_queryDeploymentTargets(output["DeploymentTargets"], context);
      }
      if (output["StackSetDriftDetectionDetails"] !== void 0) {
        contents.StackSetDriftDetectionDetails = deserializeAws_queryStackSetDriftDetectionDetails(output["StackSetDriftDetectionDetails"], context);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output["StatusDetails"] !== void 0) {
        contents.StatusDetails = deserializeAws_queryStackSetOperationStatusDetails(output["StatusDetails"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackSetOperationPreferences = (output, context) => {
      const contents = {
        RegionConcurrencyType: void 0,
        RegionOrder: void 0,
        FailureToleranceCount: void 0,
        FailureTolerancePercentage: void 0,
        MaxConcurrentCount: void 0,
        MaxConcurrentPercentage: void 0
      };
      if (output["RegionConcurrencyType"] !== void 0) {
        contents.RegionConcurrencyType = (0, smithy_client_1.expectString)(output["RegionConcurrencyType"]);
      }
      if (output.RegionOrder === "") {
        contents.RegionOrder = [];
      } else if (output["RegionOrder"] !== void 0 && output["RegionOrder"]["member"] !== void 0) {
        contents.RegionOrder = deserializeAws_queryRegionList((0, smithy_client_1.getArrayIfSingleItem)(output["RegionOrder"]["member"]), context);
      }
      if (output["FailureToleranceCount"] !== void 0) {
        contents.FailureToleranceCount = (0, smithy_client_1.strictParseInt32)(output["FailureToleranceCount"]);
      }
      if (output["FailureTolerancePercentage"] !== void 0) {
        contents.FailureTolerancePercentage = (0, smithy_client_1.strictParseInt32)(output["FailureTolerancePercentage"]);
      }
      if (output["MaxConcurrentCount"] !== void 0) {
        contents.MaxConcurrentCount = (0, smithy_client_1.strictParseInt32)(output["MaxConcurrentCount"]);
      }
      if (output["MaxConcurrentPercentage"] !== void 0) {
        contents.MaxConcurrentPercentage = (0, smithy_client_1.strictParseInt32)(output["MaxConcurrentPercentage"]);
      }
      return contents;
    };
    var deserializeAws_queryStackSetOperationResultSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackSetOperationResultSummary(entry, context);
      });
    };
    var deserializeAws_queryStackSetOperationResultSummary = (output, context) => {
      const contents = {
        Account: void 0,
        Region: void 0,
        Status: void 0,
        StatusReason: void 0,
        AccountGateResult: void 0,
        OrganizationalUnitId: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Region"] !== void 0) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output["AccountGateResult"] !== void 0) {
        contents.AccountGateResult = deserializeAws_queryAccountGateResult(output["AccountGateResult"], context);
      }
      if (output["OrganizationalUnitId"] !== void 0) {
        contents.OrganizationalUnitId = (0, smithy_client_1.expectString)(output["OrganizationalUnitId"]);
      }
      return contents;
    };
    var deserializeAws_queryStackSetOperationStatusDetails = (output, context) => {
      const contents = {
        FailedStackInstancesCount: void 0
      };
      if (output["FailedStackInstancesCount"] !== void 0) {
        contents.FailedStackInstancesCount = (0, smithy_client_1.strictParseInt32)(output["FailedStackInstancesCount"]);
      }
      return contents;
    };
    var deserializeAws_queryStackSetOperationSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackSetOperationSummary(entry, context);
      });
    };
    var deserializeAws_queryStackSetOperationSummary = (output, context) => {
      const contents = {
        OperationId: void 0,
        Action: void 0,
        Status: void 0,
        CreationTimestamp: void 0,
        EndTimestamp: void 0,
        StatusReason: void 0,
        StatusDetails: void 0,
        OperationPreferences: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      if (output["Action"] !== void 0) {
        contents.Action = (0, smithy_client_1.expectString)(output["Action"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["CreationTimestamp"] !== void 0) {
        contents.CreationTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationTimestamp"]));
      }
      if (output["EndTimestamp"] !== void 0) {
        contents.EndTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["EndTimestamp"]));
      }
      if (output["StatusReason"] !== void 0) {
        contents.StatusReason = (0, smithy_client_1.expectString)(output["StatusReason"]);
      }
      if (output["StatusDetails"] !== void 0) {
        contents.StatusDetails = deserializeAws_queryStackSetOperationStatusDetails(output["StatusDetails"], context);
      }
      if (output["OperationPreferences"] !== void 0) {
        contents.OperationPreferences = deserializeAws_queryStackSetOperationPreferences(output["OperationPreferences"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackSetSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackSetSummary(entry, context);
      });
    };
    var deserializeAws_queryStackSetSummary = (output, context) => {
      const contents = {
        StackSetName: void 0,
        StackSetId: void 0,
        Description: void 0,
        Status: void 0,
        AutoDeployment: void 0,
        PermissionModel: void 0,
        DriftStatus: void 0,
        LastDriftCheckTimestamp: void 0,
        ManagedExecution: void 0
      };
      if (output["StackSetName"] !== void 0) {
        contents.StackSetName = (0, smithy_client_1.expectString)(output["StackSetName"]);
      }
      if (output["StackSetId"] !== void 0) {
        contents.StackSetId = (0, smithy_client_1.expectString)(output["StackSetId"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["AutoDeployment"] !== void 0) {
        contents.AutoDeployment = deserializeAws_queryAutoDeployment(output["AutoDeployment"], context);
      }
      if (output["PermissionModel"] !== void 0) {
        contents.PermissionModel = (0, smithy_client_1.expectString)(output["PermissionModel"]);
      }
      if (output["DriftStatus"] !== void 0) {
        contents.DriftStatus = (0, smithy_client_1.expectString)(output["DriftStatus"]);
      }
      if (output["LastDriftCheckTimestamp"] !== void 0) {
        contents.LastDriftCheckTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastDriftCheckTimestamp"]));
      }
      if (output["ManagedExecution"] !== void 0) {
        contents.ManagedExecution = deserializeAws_queryManagedExecution(output["ManagedExecution"], context);
      }
      return contents;
    };
    var deserializeAws_queryStackSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryStackSummary(entry, context);
      });
    };
    var deserializeAws_queryStackSummary = (output, context) => {
      const contents = {
        StackId: void 0,
        StackName: void 0,
        TemplateDescription: void 0,
        CreationTime: void 0,
        LastUpdatedTime: void 0,
        DeletionTime: void 0,
        StackStatus: void 0,
        StackStatusReason: void 0,
        ParentId: void 0,
        RootId: void 0,
        DriftInformation: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      if (output["StackName"] !== void 0) {
        contents.StackName = (0, smithy_client_1.expectString)(output["StackName"]);
      }
      if (output["TemplateDescription"] !== void 0) {
        contents.TemplateDescription = (0, smithy_client_1.expectString)(output["TemplateDescription"]);
      }
      if (output["CreationTime"] !== void 0) {
        contents.CreationTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["CreationTime"]));
      }
      if (output["LastUpdatedTime"] !== void 0) {
        contents.LastUpdatedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdatedTime"]));
      }
      if (output["DeletionTime"] !== void 0) {
        contents.DeletionTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["DeletionTime"]));
      }
      if (output["StackStatus"] !== void 0) {
        contents.StackStatus = (0, smithy_client_1.expectString)(output["StackStatus"]);
      }
      if (output["StackStatusReason"] !== void 0) {
        contents.StackStatusReason = (0, smithy_client_1.expectString)(output["StackStatusReason"]);
      }
      if (output["ParentId"] !== void 0) {
        contents.ParentId = (0, smithy_client_1.expectString)(output["ParentId"]);
      }
      if (output["RootId"] !== void 0) {
        contents.RootId = (0, smithy_client_1.expectString)(output["RootId"]);
      }
      if (output["DriftInformation"] !== void 0) {
        contents.DriftInformation = deserializeAws_queryStackDriftInformationSummary(output["DriftInformation"], context);
      }
      return contents;
    };
    var deserializeAws_queryStageList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryStaleRequestException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryStopStackSetOperationOutput = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_querySupportedMajorVersions = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.strictParseInt32)(entry);
      });
    };
    var deserializeAws_queryTag = (output, context) => {
      const contents = {
        Key: void 0,
        Value: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_queryTags = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTag(entry, context);
      });
    };
    var deserializeAws_queryTemplateParameter = (output, context) => {
      const contents = {
        ParameterKey: void 0,
        DefaultValue: void 0,
        NoEcho: void 0,
        Description: void 0
      };
      if (output["ParameterKey"] !== void 0) {
        contents.ParameterKey = (0, smithy_client_1.expectString)(output["ParameterKey"]);
      }
      if (output["DefaultValue"] !== void 0) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
      }
      if (output["NoEcho"] !== void 0) {
        contents.NoEcho = (0, smithy_client_1.parseBoolean)(output["NoEcho"]);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      return contents;
    };
    var deserializeAws_queryTemplateParameters = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTemplateParameter(entry, context);
      });
    };
    var deserializeAws_queryTestTypeOutput = (output, context) => {
      const contents = {
        TypeVersionArn: void 0
      };
      if (output["TypeVersionArn"] !== void 0) {
        contents.TypeVersionArn = (0, smithy_client_1.expectString)(output["TypeVersionArn"]);
      }
      return contents;
    };
    var deserializeAws_queryTokenAlreadyExistsException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryTransformsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_queryTypeConfigurationDetails = (output, context) => {
      const contents = {
        Arn: void 0,
        Alias: void 0,
        Configuration: void 0,
        LastUpdated: void 0,
        TypeArn: void 0,
        TypeName: void 0,
        IsDefaultConfiguration: void 0
      };
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["Alias"] !== void 0) {
        contents.Alias = (0, smithy_client_1.expectString)(output["Alias"]);
      }
      if (output["Configuration"] !== void 0) {
        contents.Configuration = (0, smithy_client_1.expectString)(output["Configuration"]);
      }
      if (output["LastUpdated"] !== void 0) {
        contents.LastUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdated"]));
      }
      if (output["TypeArn"] !== void 0) {
        contents.TypeArn = (0, smithy_client_1.expectString)(output["TypeArn"]);
      }
      if (output["TypeName"] !== void 0) {
        contents.TypeName = (0, smithy_client_1.expectString)(output["TypeName"]);
      }
      if (output["IsDefaultConfiguration"] !== void 0) {
        contents.IsDefaultConfiguration = (0, smithy_client_1.parseBoolean)(output["IsDefaultConfiguration"]);
      }
      return contents;
    };
    var deserializeAws_queryTypeConfigurationDetailsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTypeConfigurationDetails(entry, context);
      });
    };
    var deserializeAws_queryTypeConfigurationIdentifier = (output, context) => {
      const contents = {
        TypeArn: void 0,
        TypeConfigurationAlias: void 0,
        TypeConfigurationArn: void 0,
        Type: void 0,
        TypeName: void 0
      };
      if (output["TypeArn"] !== void 0) {
        contents.TypeArn = (0, smithy_client_1.expectString)(output["TypeArn"]);
      }
      if (output["TypeConfigurationAlias"] !== void 0) {
        contents.TypeConfigurationAlias = (0, smithy_client_1.expectString)(output["TypeConfigurationAlias"]);
      }
      if (output["TypeConfigurationArn"] !== void 0) {
        contents.TypeConfigurationArn = (0, smithy_client_1.expectString)(output["TypeConfigurationArn"]);
      }
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["TypeName"] !== void 0) {
        contents.TypeName = (0, smithy_client_1.expectString)(output["TypeName"]);
      }
      return contents;
    };
    var deserializeAws_queryTypeConfigurationNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryTypeNotFoundException = (output, context) => {
      const contents = {
        Message: void 0
      };
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_queryTypeSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTypeSummary(entry, context);
      });
    };
    var deserializeAws_queryTypeSummary = (output, context) => {
      const contents = {
        Type: void 0,
        TypeName: void 0,
        DefaultVersionId: void 0,
        TypeArn: void 0,
        LastUpdated: void 0,
        Description: void 0,
        PublisherId: void 0,
        OriginalTypeName: void 0,
        PublicVersionNumber: void 0,
        LatestPublicVersion: void 0,
        PublisherIdentity: void 0,
        PublisherName: void 0,
        IsActivated: void 0
      };
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["TypeName"] !== void 0) {
        contents.TypeName = (0, smithy_client_1.expectString)(output["TypeName"]);
      }
      if (output["DefaultVersionId"] !== void 0) {
        contents.DefaultVersionId = (0, smithy_client_1.expectString)(output["DefaultVersionId"]);
      }
      if (output["TypeArn"] !== void 0) {
        contents.TypeArn = (0, smithy_client_1.expectString)(output["TypeArn"]);
      }
      if (output["LastUpdated"] !== void 0) {
        contents.LastUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["LastUpdated"]));
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["PublisherId"] !== void 0) {
        contents.PublisherId = (0, smithy_client_1.expectString)(output["PublisherId"]);
      }
      if (output["OriginalTypeName"] !== void 0) {
        contents.OriginalTypeName = (0, smithy_client_1.expectString)(output["OriginalTypeName"]);
      }
      if (output["PublicVersionNumber"] !== void 0) {
        contents.PublicVersionNumber = (0, smithy_client_1.expectString)(output["PublicVersionNumber"]);
      }
      if (output["LatestPublicVersion"] !== void 0) {
        contents.LatestPublicVersion = (0, smithy_client_1.expectString)(output["LatestPublicVersion"]);
      }
      if (output["PublisherIdentity"] !== void 0) {
        contents.PublisherIdentity = (0, smithy_client_1.expectString)(output["PublisherIdentity"]);
      }
      if (output["PublisherName"] !== void 0) {
        contents.PublisherName = (0, smithy_client_1.expectString)(output["PublisherName"]);
      }
      if (output["IsActivated"] !== void 0) {
        contents.IsActivated = (0, smithy_client_1.parseBoolean)(output["IsActivated"]);
      }
      return contents;
    };
    var deserializeAws_queryTypeVersionSummaries = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTypeVersionSummary(entry, context);
      });
    };
    var deserializeAws_queryTypeVersionSummary = (output, context) => {
      const contents = {
        Type: void 0,
        TypeName: void 0,
        VersionId: void 0,
        IsDefaultVersion: void 0,
        Arn: void 0,
        TimeCreated: void 0,
        Description: void 0,
        PublicVersionNumber: void 0
      };
      if (output["Type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
      }
      if (output["TypeName"] !== void 0) {
        contents.TypeName = (0, smithy_client_1.expectString)(output["TypeName"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["IsDefaultVersion"] !== void 0) {
        contents.IsDefaultVersion = (0, smithy_client_1.parseBoolean)(output["IsDefaultVersion"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      if (output["TimeCreated"] !== void 0) {
        contents.TimeCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(output["TimeCreated"]));
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output["PublicVersionNumber"] !== void 0) {
        contents.PublicVersionNumber = (0, smithy_client_1.expectString)(output["PublicVersionNumber"]);
      }
      return contents;
    };
    var deserializeAws_queryUnprocessedTypeConfigurations = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_queryTypeConfigurationIdentifier(entry, context);
      });
    };
    var deserializeAws_queryUpdateStackInstancesOutput = (output, context) => {
      const contents = {
        OperationId: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryUpdateStackOutput = (output, context) => {
      const contents = {
        StackId: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      return contents;
    };
    var deserializeAws_queryUpdateStackSetOutput = (output, context) => {
      const contents = {
        OperationId: void 0
      };
      if (output["OperationId"] !== void 0) {
        contents.OperationId = (0, smithy_client_1.expectString)(output["OperationId"]);
      }
      return contents;
    };
    var deserializeAws_queryUpdateTerminationProtectionOutput = (output, context) => {
      const contents = {
        StackId: void 0
      };
      if (output["StackId"] !== void 0) {
        contents.StackId = (0, smithy_client_1.expectString)(output["StackId"]);
      }
      return contents;
    };
    var deserializeAws_queryValidateTemplateOutput = (output, context) => {
      const contents = {
        Parameters: void 0,
        Description: void 0,
        Capabilities: void 0,
        CapabilitiesReason: void 0,
        DeclaredTransforms: void 0
      };
      if (output.Parameters === "") {
        contents.Parameters = [];
      } else if (output["Parameters"] !== void 0 && output["Parameters"]["member"] !== void 0) {
        contents.Parameters = deserializeAws_queryTemplateParameters((0, smithy_client_1.getArrayIfSingleItem)(output["Parameters"]["member"]), context);
      }
      if (output["Description"] !== void 0) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
      }
      if (output.Capabilities === "") {
        contents.Capabilities = [];
      } else if (output["Capabilities"] !== void 0 && output["Capabilities"]["member"] !== void 0) {
        contents.Capabilities = deserializeAws_queryCapabilities((0, smithy_client_1.getArrayIfSingleItem)(output["Capabilities"]["member"]), context);
      }
      if (output["CapabilitiesReason"] !== void 0) {
        contents.CapabilitiesReason = (0, smithy_client_1.expectString)(output["CapabilitiesReason"]);
      }
      if (output.DeclaredTransforms === "") {
        contents.DeclaredTransforms = [];
      } else if (output["DeclaredTransforms"] !== void 0 && output["DeclaredTransforms"]["member"] !== void 0) {
        contents.DeclaredTransforms = deserializeAws_queryTransformsList((0, smithy_client_1.getArrayIfSingleItem)(output["DeclaredTransforms"]["member"]), context);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error?.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ActivateTypeCommand.js
var require_ActivateTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ActivateTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActivateTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ActivateTypeCommand = class _ActivateTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ActivateTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ActivateTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ActivateTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ActivateTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryActivateTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryActivateTypeCommand)(output, context);
      }
    };
    exports.ActivateTypeCommand = ActivateTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/BatchDescribeTypeConfigurationsCommand.js
var require_BatchDescribeTypeConfigurationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/BatchDescribeTypeConfigurationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchDescribeTypeConfigurationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var BatchDescribeTypeConfigurationsCommand = class _BatchDescribeTypeConfigurationsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _BatchDescribeTypeConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "BatchDescribeTypeConfigurationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchDescribeTypeConfigurationsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchDescribeTypeConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryBatchDescribeTypeConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryBatchDescribeTypeConfigurationsCommand)(output, context);
      }
    };
    exports.BatchDescribeTypeConfigurationsCommand = BatchDescribeTypeConfigurationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CancelUpdateStackCommand.js
var require_CancelUpdateStackCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CancelUpdateStackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancelUpdateStackCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var CancelUpdateStackCommand = class _CancelUpdateStackCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CancelUpdateStackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "CancelUpdateStackCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CancelUpdateStackInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCancelUpdateStackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCancelUpdateStackCommand)(output, context);
      }
    };
    exports.CancelUpdateStackCommand = CancelUpdateStackCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ContinueUpdateRollbackCommand.js
var require_ContinueUpdateRollbackCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ContinueUpdateRollbackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContinueUpdateRollbackCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ContinueUpdateRollbackCommand = class _ContinueUpdateRollbackCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ContinueUpdateRollbackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ContinueUpdateRollbackCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ContinueUpdateRollbackInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ContinueUpdateRollbackOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryContinueUpdateRollbackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryContinueUpdateRollbackCommand)(output, context);
      }
    };
    exports.ContinueUpdateRollbackCommand = ContinueUpdateRollbackCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateChangeSetCommand.js
var require_CreateChangeSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateChangeSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateChangeSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var CreateChangeSetCommand = class _CreateChangeSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateChangeSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "CreateChangeSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateChangeSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateChangeSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateChangeSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateChangeSetCommand)(output, context);
      }
    };
    exports.CreateChangeSetCommand = CreateChangeSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateStackCommand.js
var require_CreateStackCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateStackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateStackCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var CreateStackCommand = class _CreateStackCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateStackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "CreateStackCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateStackInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateStackOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateStackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateStackCommand)(output, context);
      }
    };
    exports.CreateStackCommand = CreateStackCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateStackInstancesCommand.js
var require_CreateStackInstancesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateStackInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateStackInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var CreateStackInstancesCommand = class _CreateStackInstancesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateStackInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "CreateStackInstancesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateStackInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateStackInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateStackInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateStackInstancesCommand)(output, context);
      }
    };
    exports.CreateStackInstancesCommand = CreateStackInstancesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateStackSetCommand.js
var require_CreateStackSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/CreateStackSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateStackSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var CreateStackSetCommand = class _CreateStackSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _CreateStackSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "CreateStackSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateStackSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateStackSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryCreateStackSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryCreateStackSetCommand)(output, context);
      }
    };
    exports.CreateStackSetCommand = CreateStackSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeactivateTypeCommand.js
var require_DeactivateTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeactivateTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeactivateTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DeactivateTypeCommand = class _DeactivateTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeactivateTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DeactivateTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeactivateTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeactivateTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeactivateTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeactivateTypeCommand)(output, context);
      }
    };
    exports.DeactivateTypeCommand = DeactivateTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteChangeSetCommand.js
var require_DeleteChangeSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteChangeSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteChangeSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DeleteChangeSetCommand = class _DeleteChangeSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteChangeSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DeleteChangeSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteChangeSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteChangeSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteChangeSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteChangeSetCommand)(output, context);
      }
    };
    exports.DeleteChangeSetCommand = DeleteChangeSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteStackCommand.js
var require_DeleteStackCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteStackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteStackCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DeleteStackCommand = class _DeleteStackCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteStackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DeleteStackCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteStackInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteStackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteStackCommand)(output, context);
      }
    };
    exports.DeleteStackCommand = DeleteStackCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteStackInstancesCommand.js
var require_DeleteStackInstancesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteStackInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteStackInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DeleteStackInstancesCommand = class _DeleteStackInstancesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteStackInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DeleteStackInstancesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteStackInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteStackInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteStackInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteStackInstancesCommand)(output, context);
      }
    };
    exports.DeleteStackInstancesCommand = DeleteStackInstancesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteStackSetCommand.js
var require_DeleteStackSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeleteStackSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteStackSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DeleteStackSetCommand = class _DeleteStackSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeleteStackSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DeleteStackSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteStackSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteStackSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeleteStackSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeleteStackSetCommand)(output, context);
      }
    };
    exports.DeleteStackSetCommand = DeleteStackSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeregisterTypeCommand.js
var require_DeregisterTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DeregisterTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeregisterTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DeregisterTypeCommand = class _DeregisterTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DeregisterTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DeregisterTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeregisterTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeregisterTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDeregisterTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDeregisterTypeCommand)(output, context);
      }
    };
    exports.DeregisterTypeCommand = DeregisterTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeAccountLimitsCommand.js
var require_DescribeAccountLimitsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeAccountLimitsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeAccountLimitsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeAccountLimitsCommand = class _DescribeAccountLimitsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeAccountLimitsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeAccountLimitsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeAccountLimitsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeAccountLimitsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeAccountLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeAccountLimitsCommand)(output, context);
      }
    };
    exports.DescribeAccountLimitsCommand = DescribeAccountLimitsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeChangeSetCommand.js
var require_DescribeChangeSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeChangeSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChangeSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeChangeSetCommand = class _DescribeChangeSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChangeSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeChangeSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeChangeSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeChangeSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeChangeSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeChangeSetCommand)(output, context);
      }
    };
    exports.DescribeChangeSetCommand = DescribeChangeSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeChangeSetHooksCommand.js
var require_DescribeChangeSetHooksCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeChangeSetHooksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeChangeSetHooksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeChangeSetHooksCommand = class _DescribeChangeSetHooksCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeChangeSetHooksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeChangeSetHooksCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeChangeSetHooksInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeChangeSetHooksOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeChangeSetHooksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeChangeSetHooksCommand)(output, context);
      }
    };
    exports.DescribeChangeSetHooksCommand = DescribeChangeSetHooksCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribePublisherCommand.js
var require_DescribePublisherCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribePublisherCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribePublisherCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribePublisherCommand = class _DescribePublisherCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribePublisherCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribePublisherCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribePublisherInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribePublisherOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribePublisherCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribePublisherCommand)(output, context);
      }
    };
    exports.DescribePublisherCommand = DescribePublisherCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackDriftDetectionStatusCommand.js
var require_DescribeStackDriftDetectionStatusCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackDriftDetectionStatusCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackDriftDetectionStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackDriftDetectionStatusCommand = class _DescribeStackDriftDetectionStatusCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackDriftDetectionStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackDriftDetectionStatusCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackDriftDetectionStatusInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackDriftDetectionStatusOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackDriftDetectionStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackDriftDetectionStatusCommand)(output, context);
      }
    };
    exports.DescribeStackDriftDetectionStatusCommand = DescribeStackDriftDetectionStatusCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackEventsCommand.js
var require_DescribeStackEventsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackEventsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackEventsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackEventsCommand = class _DescribeStackEventsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackEventsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackEventsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackEventsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackEventsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackEventsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackEventsCommand)(output, context);
      }
    };
    exports.DescribeStackEventsCommand = DescribeStackEventsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackInstanceCommand.js
var require_DescribeStackInstanceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackInstanceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackInstanceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackInstanceCommand = class _DescribeStackInstanceCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackInstanceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackInstanceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackInstanceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackInstanceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackInstanceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackInstanceCommand)(output, context);
      }
    };
    exports.DescribeStackInstanceCommand = DescribeStackInstanceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackResourceCommand.js
var require_DescribeStackResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackResourceCommand = class _DescribeStackResourceCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackResourceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackResourceCommand)(output, context);
      }
    };
    exports.DescribeStackResourceCommand = DescribeStackResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackResourceDriftsCommand.js
var require_DescribeStackResourceDriftsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackResourceDriftsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackResourceDriftsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackResourceDriftsCommand = class _DescribeStackResourceDriftsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackResourceDriftsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackResourceDriftsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackResourceDriftsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackResourceDriftsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackResourceDriftsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackResourceDriftsCommand)(output, context);
      }
    };
    exports.DescribeStackResourceDriftsCommand = DescribeStackResourceDriftsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackResourcesCommand.js
var require_DescribeStackResourcesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackResourcesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackResourcesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackResourcesCommand = class _DescribeStackResourcesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackResourcesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackResourcesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackResourcesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackResourcesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackResourcesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackResourcesCommand)(output, context);
      }
    };
    exports.DescribeStackResourcesCommand = DescribeStackResourcesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStacksCommand.js
var require_DescribeStacksCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStacksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStacksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStacksCommand2 = class _DescribeStacksCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStacksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStacksCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStacksInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStacksOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStacksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStacksCommand)(output, context);
      }
    };
    exports.DescribeStacksCommand = DescribeStacksCommand2;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackSetCommand.js
var require_DescribeStackSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackSetCommand = class _DescribeStackSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackSetCommand)(output, context);
      }
    };
    exports.DescribeStackSetCommand = DescribeStackSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackSetOperationCommand.js
var require_DescribeStackSetOperationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeStackSetOperationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeStackSetOperationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeStackSetOperationCommand = class _DescribeStackSetOperationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeStackSetOperationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeStackSetOperationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeStackSetOperationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeStackSetOperationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeStackSetOperationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeStackSetOperationCommand)(output, context);
      }
    };
    exports.DescribeStackSetOperationCommand = DescribeStackSetOperationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeTypeCommand.js
var require_DescribeTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeTypeCommand = class _DescribeTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeTypeCommand)(output, context);
      }
    };
    exports.DescribeTypeCommand = DescribeTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeTypeRegistrationCommand.js
var require_DescribeTypeRegistrationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DescribeTypeRegistrationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTypeRegistrationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DescribeTypeRegistrationCommand = class _DescribeTypeRegistrationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DescribeTypeRegistrationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DescribeTypeRegistrationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTypeRegistrationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTypeRegistrationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDescribeTypeRegistrationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDescribeTypeRegistrationCommand)(output, context);
      }
    };
    exports.DescribeTypeRegistrationCommand = DescribeTypeRegistrationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DetectStackDriftCommand.js
var require_DetectStackDriftCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DetectStackDriftCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetectStackDriftCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DetectStackDriftCommand = class _DetectStackDriftCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DetectStackDriftCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DetectStackDriftCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DetectStackDriftInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DetectStackDriftOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDetectStackDriftCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDetectStackDriftCommand)(output, context);
      }
    };
    exports.DetectStackDriftCommand = DetectStackDriftCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DetectStackResourceDriftCommand.js
var require_DetectStackResourceDriftCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DetectStackResourceDriftCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetectStackResourceDriftCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DetectStackResourceDriftCommand = class _DetectStackResourceDriftCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DetectStackResourceDriftCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DetectStackResourceDriftCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DetectStackResourceDriftInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DetectStackResourceDriftOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDetectStackResourceDriftCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDetectStackResourceDriftCommand)(output, context);
      }
    };
    exports.DetectStackResourceDriftCommand = DetectStackResourceDriftCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DetectStackSetDriftCommand.js
var require_DetectStackSetDriftCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/DetectStackSetDriftCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DetectStackSetDriftCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var DetectStackSetDriftCommand = class _DetectStackSetDriftCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _DetectStackSetDriftCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "DetectStackSetDriftCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DetectStackSetDriftInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DetectStackSetDriftOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDetectStackSetDriftCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDetectStackSetDriftCommand)(output, context);
      }
    };
    exports.DetectStackSetDriftCommand = DetectStackSetDriftCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/EstimateTemplateCostCommand.js
var require_EstimateTemplateCostCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/EstimateTemplateCostCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EstimateTemplateCostCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var EstimateTemplateCostCommand = class _EstimateTemplateCostCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _EstimateTemplateCostCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "EstimateTemplateCostCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.EstimateTemplateCostInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.EstimateTemplateCostOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryEstimateTemplateCostCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryEstimateTemplateCostCommand)(output, context);
      }
    };
    exports.EstimateTemplateCostCommand = EstimateTemplateCostCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ExecuteChangeSetCommand.js
var require_ExecuteChangeSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ExecuteChangeSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteChangeSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ExecuteChangeSetCommand = class _ExecuteChangeSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ExecuteChangeSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ExecuteChangeSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteChangeSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteChangeSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryExecuteChangeSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryExecuteChangeSetCommand)(output, context);
      }
    };
    exports.ExecuteChangeSetCommand = ExecuteChangeSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/GetStackPolicyCommand.js
var require_GetStackPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/GetStackPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetStackPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var GetStackPolicyCommand = class _GetStackPolicyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetStackPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "GetStackPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetStackPolicyInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetStackPolicyOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetStackPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetStackPolicyCommand)(output, context);
      }
    };
    exports.GetStackPolicyCommand = GetStackPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/GetTemplateCommand.js
var require_GetTemplateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/GetTemplateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetTemplateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var GetTemplateCommand = class _GetTemplateCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetTemplateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "GetTemplateCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetTemplateInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetTemplateOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetTemplateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetTemplateCommand)(output, context);
      }
    };
    exports.GetTemplateCommand = GetTemplateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/GetTemplateSummaryCommand.js
var require_GetTemplateSummaryCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/GetTemplateSummaryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetTemplateSummaryCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var GetTemplateSummaryCommand = class _GetTemplateSummaryCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _GetTemplateSummaryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "GetTemplateSummaryCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetTemplateSummaryInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetTemplateSummaryOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetTemplateSummaryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetTemplateSummaryCommand)(output, context);
      }
    };
    exports.GetTemplateSummaryCommand = GetTemplateSummaryCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ImportStacksToStackSetCommand.js
var require_ImportStacksToStackSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ImportStacksToStackSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImportStacksToStackSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ImportStacksToStackSetCommand = class _ImportStacksToStackSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ImportStacksToStackSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ImportStacksToStackSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ImportStacksToStackSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ImportStacksToStackSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryImportStacksToStackSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryImportStacksToStackSetCommand)(output, context);
      }
    };
    exports.ImportStacksToStackSetCommand = ImportStacksToStackSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListChangeSetsCommand.js
var require_ListChangeSetsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListChangeSetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListChangeSetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListChangeSetsCommand = class _ListChangeSetsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListChangeSetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListChangeSetsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListChangeSetsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListChangeSetsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListChangeSetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListChangeSetsCommand)(output, context);
      }
    };
    exports.ListChangeSetsCommand = ListChangeSetsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListExportsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListExportsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListExportsCommand = class _ListExportsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListExportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListExportsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListExportsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListExportsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListExportsCommand)(output, context);
      }
    };
    exports.ListExportsCommand = ListExportsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListImportsCommand.js
var require_ListImportsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListImportsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListImportsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListImportsCommand = class _ListImportsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListImportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListImportsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListImportsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListImportsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListImportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListImportsCommand)(output, context);
      }
    };
    exports.ListImportsCommand = ListImportsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackInstancesCommand.js
var require_ListStackInstancesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListStackInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListStackInstancesCommand = class _ListStackInstancesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListStackInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListStackInstancesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListStackInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListStackInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListStackInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListStackInstancesCommand)(output, context);
      }
    };
    exports.ListStackInstancesCommand = ListStackInstancesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackResourcesCommand.js
var require_ListStackResourcesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackResourcesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListStackResourcesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListStackResourcesCommand = class _ListStackResourcesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListStackResourcesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListStackResourcesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListStackResourcesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListStackResourcesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListStackResourcesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListStackResourcesCommand)(output, context);
      }
    };
    exports.ListStackResourcesCommand = ListStackResourcesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStacksCommand.js
var require_ListStacksCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStacksCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListStacksCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListStacksCommand = class _ListStacksCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListStacksCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListStacksCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListStacksInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListStacksOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListStacksCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListStacksCommand)(output, context);
      }
    };
    exports.ListStacksCommand = ListStacksCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackSetOperationResultsCommand.js
var require_ListStackSetOperationResultsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackSetOperationResultsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListStackSetOperationResultsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListStackSetOperationResultsCommand = class _ListStackSetOperationResultsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListStackSetOperationResultsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListStackSetOperationResultsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListStackSetOperationResultsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListStackSetOperationResultsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListStackSetOperationResultsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListStackSetOperationResultsCommand)(output, context);
      }
    };
    exports.ListStackSetOperationResultsCommand = ListStackSetOperationResultsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackSetOperationsCommand.js
var require_ListStackSetOperationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackSetOperationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListStackSetOperationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListStackSetOperationsCommand = class _ListStackSetOperationsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListStackSetOperationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListStackSetOperationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListStackSetOperationsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListStackSetOperationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListStackSetOperationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListStackSetOperationsCommand)(output, context);
      }
    };
    exports.ListStackSetOperationsCommand = ListStackSetOperationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackSetsCommand.js
var require_ListStackSetsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListStackSetsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListStackSetsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListStackSetsCommand = class _ListStackSetsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListStackSetsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListStackSetsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListStackSetsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListStackSetsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListStackSetsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListStackSetsCommand)(output, context);
      }
    };
    exports.ListStackSetsCommand = ListStackSetsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListTypeRegistrationsCommand.js
var require_ListTypeRegistrationsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListTypeRegistrationsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTypeRegistrationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListTypeRegistrationsCommand = class _ListTypeRegistrationsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTypeRegistrationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListTypeRegistrationsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTypeRegistrationsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTypeRegistrationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListTypeRegistrationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListTypeRegistrationsCommand)(output, context);
      }
    };
    exports.ListTypeRegistrationsCommand = ListTypeRegistrationsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListTypesCommand.js
var require_ListTypesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListTypesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTypesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListTypesCommand = class _ListTypesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTypesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListTypesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTypesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTypesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListTypesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListTypesCommand)(output, context);
      }
    };
    exports.ListTypesCommand = ListTypesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListTypeVersionsCommand.js
var require_ListTypeVersionsCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ListTypeVersionsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTypeVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ListTypeVersionsCommand = class _ListTypeVersionsCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ListTypeVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ListTypeVersionsCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTypeVersionsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTypeVersionsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryListTypeVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryListTypeVersionsCommand)(output, context);
      }
    };
    exports.ListTypeVersionsCommand = ListTypeVersionsCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/PublishTypeCommand.js
var require_PublishTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/PublishTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PublishTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var PublishTypeCommand = class _PublishTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _PublishTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "PublishTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PublishTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PublishTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryPublishTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryPublishTypeCommand)(output, context);
      }
    };
    exports.PublishTypeCommand = PublishTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RecordHandlerProgressCommand.js
var require_RecordHandlerProgressCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RecordHandlerProgressCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RecordHandlerProgressCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var RecordHandlerProgressCommand = class _RecordHandlerProgressCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RecordHandlerProgressCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "RecordHandlerProgressCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RecordHandlerProgressInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RecordHandlerProgressOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRecordHandlerProgressCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRecordHandlerProgressCommand)(output, context);
      }
    };
    exports.RecordHandlerProgressCommand = RecordHandlerProgressCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RegisterPublisherCommand.js
var require_RegisterPublisherCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RegisterPublisherCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterPublisherCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var RegisterPublisherCommand = class _RegisterPublisherCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterPublisherCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "RegisterPublisherCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterPublisherInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterPublisherOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRegisterPublisherCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRegisterPublisherCommand)(output, context);
      }
    };
    exports.RegisterPublisherCommand = RegisterPublisherCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RegisterTypeCommand.js
var require_RegisterTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RegisterTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RegisterTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var RegisterTypeCommand = class _RegisterTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RegisterTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "RegisterTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRegisterTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRegisterTypeCommand)(output, context);
      }
    };
    exports.RegisterTypeCommand = RegisterTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RollbackStackCommand.js
var require_RollbackStackCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/RollbackStackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RollbackStackCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var RollbackStackCommand = class _RollbackStackCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _RollbackStackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "RollbackStackCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RollbackStackInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RollbackStackOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryRollbackStackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryRollbackStackCommand)(output, context);
      }
    };
    exports.RollbackStackCommand = RollbackStackCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SetStackPolicyCommand.js
var require_SetStackPolicyCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SetStackPolicyCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetStackPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var SetStackPolicyCommand = class _SetStackPolicyCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SetStackPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "SetStackPolicyCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetStackPolicyInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySetStackPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySetStackPolicyCommand)(output, context);
      }
    };
    exports.SetStackPolicyCommand = SetStackPolicyCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SetTypeConfigurationCommand.js
var require_SetTypeConfigurationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SetTypeConfigurationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetTypeConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var SetTypeConfigurationCommand = class _SetTypeConfigurationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SetTypeConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "SetTypeConfigurationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetTypeConfigurationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetTypeConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySetTypeConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySetTypeConfigurationCommand)(output, context);
      }
    };
    exports.SetTypeConfigurationCommand = SetTypeConfigurationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SetTypeDefaultVersionCommand.js
var require_SetTypeDefaultVersionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SetTypeDefaultVersionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetTypeDefaultVersionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var SetTypeDefaultVersionCommand = class _SetTypeDefaultVersionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SetTypeDefaultVersionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "SetTypeDefaultVersionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SetTypeDefaultVersionInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.SetTypeDefaultVersionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySetTypeDefaultVersionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySetTypeDefaultVersionCommand)(output, context);
      }
    };
    exports.SetTypeDefaultVersionCommand = SetTypeDefaultVersionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SignalResourceCommand.js
var require_SignalResourceCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/SignalResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignalResourceCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var SignalResourceCommand = class _SignalResourceCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _SignalResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "SignalResourceCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.SignalResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_querySignalResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_querySignalResourceCommand)(output, context);
      }
    };
    exports.SignalResourceCommand = SignalResourceCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/StopStackSetOperationCommand.js
var require_StopStackSetOperationCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/StopStackSetOperationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StopStackSetOperationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var StopStackSetOperationCommand = class _StopStackSetOperationCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _StopStackSetOperationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "StopStackSetOperationCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StopStackSetOperationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StopStackSetOperationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryStopStackSetOperationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryStopStackSetOperationCommand)(output, context);
      }
    };
    exports.StopStackSetOperationCommand = StopStackSetOperationCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/TestTypeCommand.js
var require_TestTypeCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/TestTypeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestTypeCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var TestTypeCommand = class _TestTypeCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _TestTypeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "TestTypeCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TestTypeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TestTypeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryTestTypeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryTestTypeCommand)(output, context);
      }
    };
    exports.TestTypeCommand = TestTypeCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateStackCommand.js
var require_UpdateStackCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateStackCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateStackCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var UpdateStackCommand = class _UpdateStackCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateStackCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "UpdateStackCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateStackInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateStackOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateStackCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateStackCommand)(output, context);
      }
    };
    exports.UpdateStackCommand = UpdateStackCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateStackInstancesCommand.js
var require_UpdateStackInstancesCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateStackInstancesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateStackInstancesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var UpdateStackInstancesCommand = class _UpdateStackInstancesCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateStackInstancesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "UpdateStackInstancesCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateStackInstancesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateStackInstancesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateStackInstancesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateStackInstancesCommand)(output, context);
      }
    };
    exports.UpdateStackInstancesCommand = UpdateStackInstancesCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateStackSetCommand.js
var require_UpdateStackSetCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateStackSetCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateStackSetCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var UpdateStackSetCommand = class _UpdateStackSetCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateStackSetCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "UpdateStackSetCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateStackSetInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateStackSetOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateStackSetCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateStackSetCommand)(output, context);
      }
    };
    exports.UpdateStackSetCommand = UpdateStackSetCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateTerminationProtectionCommand.js
var require_UpdateTerminationProtectionCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/UpdateTerminationProtectionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTerminationProtectionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var UpdateTerminationProtectionCommand = class _UpdateTerminationProtectionCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _UpdateTerminationProtectionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "UpdateTerminationProtectionCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTerminationProtectionInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTerminationProtectionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryUpdateTerminationProtectionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryUpdateTerminationProtectionCommand)(output, context);
      }
    };
    exports.UpdateTerminationProtectionCommand = UpdateTerminationProtectionCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ValidateTemplateCommand.js
var require_ValidateTemplateCommand = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/ValidateTemplateCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidateTemplateCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_05();
    var Aws_query_1 = require_Aws_query2();
    var ValidateTemplateCommand = class _ValidateTemplateCommand extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, _ValidateTemplateCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger: logger2 } = configuration;
        const clientName = "CloudFormationClient";
        const commandName = "ValidateTemplateCommand";
        const handlerExecutionContext = {
          logger: logger2,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ValidateTemplateInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ValidateTemplateOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryValidateTemplateCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryValidateTemplateCommand)(output, context);
      }
    };
    exports.ValidateTemplateCommand = ValidateTemplateCommand;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/CloudFormation.js
var require_CloudFormation = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/CloudFormation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudFormation = void 0;
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ActivateTypeCommand_1 = require_ActivateTypeCommand();
    var BatchDescribeTypeConfigurationsCommand_1 = require_BatchDescribeTypeConfigurationsCommand();
    var CancelUpdateStackCommand_1 = require_CancelUpdateStackCommand();
    var ContinueUpdateRollbackCommand_1 = require_ContinueUpdateRollbackCommand();
    var CreateChangeSetCommand_1 = require_CreateChangeSetCommand();
    var CreateStackCommand_1 = require_CreateStackCommand();
    var CreateStackInstancesCommand_1 = require_CreateStackInstancesCommand();
    var CreateStackSetCommand_1 = require_CreateStackSetCommand();
    var DeactivateTypeCommand_1 = require_DeactivateTypeCommand();
    var DeleteChangeSetCommand_1 = require_DeleteChangeSetCommand();
    var DeleteStackCommand_1 = require_DeleteStackCommand();
    var DeleteStackInstancesCommand_1 = require_DeleteStackInstancesCommand();
    var DeleteStackSetCommand_1 = require_DeleteStackSetCommand();
    var DeregisterTypeCommand_1 = require_DeregisterTypeCommand();
    var DescribeAccountLimitsCommand_1 = require_DescribeAccountLimitsCommand();
    var DescribeChangeSetCommand_1 = require_DescribeChangeSetCommand();
    var DescribeChangeSetHooksCommand_1 = require_DescribeChangeSetHooksCommand();
    var DescribePublisherCommand_1 = require_DescribePublisherCommand();
    var DescribeStackDriftDetectionStatusCommand_1 = require_DescribeStackDriftDetectionStatusCommand();
    var DescribeStackEventsCommand_1 = require_DescribeStackEventsCommand();
    var DescribeStackInstanceCommand_1 = require_DescribeStackInstanceCommand();
    var DescribeStackResourceCommand_1 = require_DescribeStackResourceCommand();
    var DescribeStackResourceDriftsCommand_1 = require_DescribeStackResourceDriftsCommand();
    var DescribeStackResourcesCommand_1 = require_DescribeStackResourcesCommand();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var DescribeStackSetCommand_1 = require_DescribeStackSetCommand();
    var DescribeStackSetOperationCommand_1 = require_DescribeStackSetOperationCommand();
    var DescribeTypeCommand_1 = require_DescribeTypeCommand();
    var DescribeTypeRegistrationCommand_1 = require_DescribeTypeRegistrationCommand();
    var DetectStackDriftCommand_1 = require_DetectStackDriftCommand();
    var DetectStackResourceDriftCommand_1 = require_DetectStackResourceDriftCommand();
    var DetectStackSetDriftCommand_1 = require_DetectStackSetDriftCommand();
    var EstimateTemplateCostCommand_1 = require_EstimateTemplateCostCommand();
    var ExecuteChangeSetCommand_1 = require_ExecuteChangeSetCommand();
    var GetStackPolicyCommand_1 = require_GetStackPolicyCommand();
    var GetTemplateCommand_1 = require_GetTemplateCommand();
    var GetTemplateSummaryCommand_1 = require_GetTemplateSummaryCommand();
    var ImportStacksToStackSetCommand_1 = require_ImportStacksToStackSetCommand();
    var ListChangeSetsCommand_1 = require_ListChangeSetsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListImportsCommand_1 = require_ListImportsCommand();
    var ListStackInstancesCommand_1 = require_ListStackInstancesCommand();
    var ListStackResourcesCommand_1 = require_ListStackResourcesCommand();
    var ListStacksCommand_1 = require_ListStacksCommand();
    var ListStackSetOperationResultsCommand_1 = require_ListStackSetOperationResultsCommand();
    var ListStackSetOperationsCommand_1 = require_ListStackSetOperationsCommand();
    var ListStackSetsCommand_1 = require_ListStackSetsCommand();
    var ListTypeRegistrationsCommand_1 = require_ListTypeRegistrationsCommand();
    var ListTypesCommand_1 = require_ListTypesCommand();
    var ListTypeVersionsCommand_1 = require_ListTypeVersionsCommand();
    var PublishTypeCommand_1 = require_PublishTypeCommand();
    var RecordHandlerProgressCommand_1 = require_RecordHandlerProgressCommand();
    var RegisterPublisherCommand_1 = require_RegisterPublisherCommand();
    var RegisterTypeCommand_1 = require_RegisterTypeCommand();
    var RollbackStackCommand_1 = require_RollbackStackCommand();
    var SetStackPolicyCommand_1 = require_SetStackPolicyCommand();
    var SetTypeConfigurationCommand_1 = require_SetTypeConfigurationCommand();
    var SetTypeDefaultVersionCommand_1 = require_SetTypeDefaultVersionCommand();
    var SignalResourceCommand_1 = require_SignalResourceCommand();
    var StopStackSetOperationCommand_1 = require_StopStackSetOperationCommand();
    var TestTypeCommand_1 = require_TestTypeCommand();
    var UpdateStackCommand_1 = require_UpdateStackCommand();
    var UpdateStackInstancesCommand_1 = require_UpdateStackInstancesCommand();
    var UpdateStackSetCommand_1 = require_UpdateStackSetCommand();
    var UpdateTerminationProtectionCommand_1 = require_UpdateTerminationProtectionCommand();
    var ValidateTemplateCommand_1 = require_ValidateTemplateCommand();
    var CloudFormation = class extends CloudFormationClient_1.CloudFormationClient {
      activateType(args, optionsOrCb, cb) {
        const command = new ActivateTypeCommand_1.ActivateTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchDescribeTypeConfigurations(args, optionsOrCb, cb) {
        const command = new BatchDescribeTypeConfigurationsCommand_1.BatchDescribeTypeConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      cancelUpdateStack(args, optionsOrCb, cb) {
        const command = new CancelUpdateStackCommand_1.CancelUpdateStackCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      continueUpdateRollback(args, optionsOrCb, cb) {
        const command = new ContinueUpdateRollbackCommand_1.ContinueUpdateRollbackCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createChangeSet(args, optionsOrCb, cb) {
        const command = new CreateChangeSetCommand_1.CreateChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createStack(args, optionsOrCb, cb) {
        const command = new CreateStackCommand_1.CreateStackCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createStackInstances(args, optionsOrCb, cb) {
        const command = new CreateStackInstancesCommand_1.CreateStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createStackSet(args, optionsOrCb, cb) {
        const command = new CreateStackSetCommand_1.CreateStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deactivateType(args, optionsOrCb, cb) {
        const command = new DeactivateTypeCommand_1.DeactivateTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteChangeSet(args, optionsOrCb, cb) {
        const command = new DeleteChangeSetCommand_1.DeleteChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteStack(args, optionsOrCb, cb) {
        const command = new DeleteStackCommand_1.DeleteStackCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteStackInstances(args, optionsOrCb, cb) {
        const command = new DeleteStackInstancesCommand_1.DeleteStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteStackSet(args, optionsOrCb, cb) {
        const command = new DeleteStackSetCommand_1.DeleteStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deregisterType(args, optionsOrCb, cb) {
        const command = new DeregisterTypeCommand_1.DeregisterTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeAccountLimits(args, optionsOrCb, cb) {
        const command = new DescribeAccountLimitsCommand_1.DescribeAccountLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeChangeSet(args, optionsOrCb, cb) {
        const command = new DescribeChangeSetCommand_1.DescribeChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeChangeSetHooks(args, optionsOrCb, cb) {
        const command = new DescribeChangeSetHooksCommand_1.DescribeChangeSetHooksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describePublisher(args, optionsOrCb, cb) {
        const command = new DescribePublisherCommand_1.DescribePublisherCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackDriftDetectionStatus(args, optionsOrCb, cb) {
        const command = new DescribeStackDriftDetectionStatusCommand_1.DescribeStackDriftDetectionStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackEvents(args, optionsOrCb, cb) {
        const command = new DescribeStackEventsCommand_1.DescribeStackEventsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackInstance(args, optionsOrCb, cb) {
        const command = new DescribeStackInstanceCommand_1.DescribeStackInstanceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackResource(args, optionsOrCb, cb) {
        const command = new DescribeStackResourceCommand_1.DescribeStackResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackResourceDrifts(args, optionsOrCb, cb) {
        const command = new DescribeStackResourceDriftsCommand_1.DescribeStackResourceDriftsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackResources(args, optionsOrCb, cb) {
        const command = new DescribeStackResourcesCommand_1.DescribeStackResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStacks(args, optionsOrCb, cb) {
        const command = new DescribeStacksCommand_1.DescribeStacksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackSet(args, optionsOrCb, cb) {
        const command = new DescribeStackSetCommand_1.DescribeStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeStackSetOperation(args, optionsOrCb, cb) {
        const command = new DescribeStackSetOperationCommand_1.DescribeStackSetOperationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeType(args, optionsOrCb, cb) {
        const command = new DescribeTypeCommand_1.DescribeTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTypeRegistration(args, optionsOrCb, cb) {
        const command = new DescribeTypeRegistrationCommand_1.DescribeTypeRegistrationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      detectStackDrift(args, optionsOrCb, cb) {
        const command = new DetectStackDriftCommand_1.DetectStackDriftCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      detectStackResourceDrift(args, optionsOrCb, cb) {
        const command = new DetectStackResourceDriftCommand_1.DetectStackResourceDriftCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      detectStackSetDrift(args, optionsOrCb, cb) {
        const command = new DetectStackSetDriftCommand_1.DetectStackSetDriftCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      estimateTemplateCost(args, optionsOrCb, cb) {
        const command = new EstimateTemplateCostCommand_1.EstimateTemplateCostCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeChangeSet(args, optionsOrCb, cb) {
        const command = new ExecuteChangeSetCommand_1.ExecuteChangeSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getStackPolicy(args, optionsOrCb, cb) {
        const command = new GetStackPolicyCommand_1.GetStackPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getTemplate(args, optionsOrCb, cb) {
        const command = new GetTemplateCommand_1.GetTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getTemplateSummary(args, optionsOrCb, cb) {
        const command = new GetTemplateSummaryCommand_1.GetTemplateSummaryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      importStacksToStackSet(args, optionsOrCb, cb) {
        const command = new ImportStacksToStackSetCommand_1.ImportStacksToStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listChangeSets(args, optionsOrCb, cb) {
        const command = new ListChangeSetsCommand_1.ListChangeSetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listExports(args, optionsOrCb, cb) {
        const command = new ListExportsCommand_1.ListExportsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listImports(args, optionsOrCb, cb) {
        const command = new ListImportsCommand_1.ListImportsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listStackInstances(args, optionsOrCb, cb) {
        const command = new ListStackInstancesCommand_1.ListStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listStackResources(args, optionsOrCb, cb) {
        const command = new ListStackResourcesCommand_1.ListStackResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listStacks(args, optionsOrCb, cb) {
        const command = new ListStacksCommand_1.ListStacksCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listStackSetOperationResults(args, optionsOrCb, cb) {
        const command = new ListStackSetOperationResultsCommand_1.ListStackSetOperationResultsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listStackSetOperations(args, optionsOrCb, cb) {
        const command = new ListStackSetOperationsCommand_1.ListStackSetOperationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listStackSets(args, optionsOrCb, cb) {
        const command = new ListStackSetsCommand_1.ListStackSetsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTypeRegistrations(args, optionsOrCb, cb) {
        const command = new ListTypeRegistrationsCommand_1.ListTypeRegistrationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTypes(args, optionsOrCb, cb) {
        const command = new ListTypesCommand_1.ListTypesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTypeVersions(args, optionsOrCb, cb) {
        const command = new ListTypeVersionsCommand_1.ListTypeVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      publishType(args, optionsOrCb, cb) {
        const command = new PublishTypeCommand_1.PublishTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      recordHandlerProgress(args, optionsOrCb, cb) {
        const command = new RecordHandlerProgressCommand_1.RecordHandlerProgressCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerPublisher(args, optionsOrCb, cb) {
        const command = new RegisterPublisherCommand_1.RegisterPublisherCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerType(args, optionsOrCb, cb) {
        const command = new RegisterTypeCommand_1.RegisterTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      rollbackStack(args, optionsOrCb, cb) {
        const command = new RollbackStackCommand_1.RollbackStackCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setStackPolicy(args, optionsOrCb, cb) {
        const command = new SetStackPolicyCommand_1.SetStackPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setTypeConfiguration(args, optionsOrCb, cb) {
        const command = new SetTypeConfigurationCommand_1.SetTypeConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      setTypeDefaultVersion(args, optionsOrCb, cb) {
        const command = new SetTypeDefaultVersionCommand_1.SetTypeDefaultVersionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      signalResource(args, optionsOrCb, cb) {
        const command = new SignalResourceCommand_1.SignalResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      stopStackSetOperation(args, optionsOrCb, cb) {
        const command = new StopStackSetOperationCommand_1.StopStackSetOperationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      testType(args, optionsOrCb, cb) {
        const command = new TestTypeCommand_1.TestTypeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateStack(args, optionsOrCb, cb) {
        const command = new UpdateStackCommand_1.UpdateStackCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateStackInstances(args, optionsOrCb, cb) {
        const command = new UpdateStackInstancesCommand_1.UpdateStackInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateStackSet(args, optionsOrCb, cb) {
        const command = new UpdateStackSetCommand_1.UpdateStackSetCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTerminationProtection(args, optionsOrCb, cb) {
        const command = new UpdateTerminationProtectionCommand_1.UpdateTerminationProtectionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      validateTemplate(args, optionsOrCb, cb) {
        const command = new ValidateTemplateCommand_1.ValidateTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.CloudFormation = CloudFormation;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/index.js
var require_commands5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_ActivateTypeCommand(), exports);
    tslib_1.__exportStar(require_BatchDescribeTypeConfigurationsCommand(), exports);
    tslib_1.__exportStar(require_CancelUpdateStackCommand(), exports);
    tslib_1.__exportStar(require_ContinueUpdateRollbackCommand(), exports);
    tslib_1.__exportStar(require_CreateChangeSetCommand(), exports);
    tslib_1.__exportStar(require_CreateStackCommand(), exports);
    tslib_1.__exportStar(require_CreateStackInstancesCommand(), exports);
    tslib_1.__exportStar(require_CreateStackSetCommand(), exports);
    tslib_1.__exportStar(require_DeactivateTypeCommand(), exports);
    tslib_1.__exportStar(require_DeleteChangeSetCommand(), exports);
    tslib_1.__exportStar(require_DeleteStackCommand(), exports);
    tslib_1.__exportStar(require_DeleteStackInstancesCommand(), exports);
    tslib_1.__exportStar(require_DeleteStackSetCommand(), exports);
    tslib_1.__exportStar(require_DeregisterTypeCommand(), exports);
    tslib_1.__exportStar(require_DescribeAccountLimitsCommand(), exports);
    tslib_1.__exportStar(require_DescribeChangeSetCommand(), exports);
    tslib_1.__exportStar(require_DescribeChangeSetHooksCommand(), exports);
    tslib_1.__exportStar(require_DescribePublisherCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackDriftDetectionStatusCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackEventsCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackInstanceCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackResourceCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackResourceDriftsCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackResourcesCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackSetCommand(), exports);
    tslib_1.__exportStar(require_DescribeStackSetOperationCommand(), exports);
    tslib_1.__exportStar(require_DescribeStacksCommand(), exports);
    tslib_1.__exportStar(require_DescribeTypeCommand(), exports);
    tslib_1.__exportStar(require_DescribeTypeRegistrationCommand(), exports);
    tslib_1.__exportStar(require_DetectStackDriftCommand(), exports);
    tslib_1.__exportStar(require_DetectStackResourceDriftCommand(), exports);
    tslib_1.__exportStar(require_DetectStackSetDriftCommand(), exports);
    tslib_1.__exportStar(require_EstimateTemplateCostCommand(), exports);
    tslib_1.__exportStar(require_ExecuteChangeSetCommand(), exports);
    tslib_1.__exportStar(require_GetStackPolicyCommand(), exports);
    tslib_1.__exportStar(require_GetTemplateCommand(), exports);
    tslib_1.__exportStar(require_GetTemplateSummaryCommand(), exports);
    tslib_1.__exportStar(require_ImportStacksToStackSetCommand(), exports);
    tslib_1.__exportStar(require_ListChangeSetsCommand(), exports);
    tslib_1.__exportStar(require_ListExportsCommand(), exports);
    tslib_1.__exportStar(require_ListImportsCommand(), exports);
    tslib_1.__exportStar(require_ListStackInstancesCommand(), exports);
    tslib_1.__exportStar(require_ListStackResourcesCommand(), exports);
    tslib_1.__exportStar(require_ListStackSetOperationResultsCommand(), exports);
    tslib_1.__exportStar(require_ListStackSetOperationsCommand(), exports);
    tslib_1.__exportStar(require_ListStackSetsCommand(), exports);
    tslib_1.__exportStar(require_ListStacksCommand(), exports);
    tslib_1.__exportStar(require_ListTypeRegistrationsCommand(), exports);
    tslib_1.__exportStar(require_ListTypeVersionsCommand(), exports);
    tslib_1.__exportStar(require_ListTypesCommand(), exports);
    tslib_1.__exportStar(require_PublishTypeCommand(), exports);
    tslib_1.__exportStar(require_RecordHandlerProgressCommand(), exports);
    tslib_1.__exportStar(require_RegisterPublisherCommand(), exports);
    tslib_1.__exportStar(require_RegisterTypeCommand(), exports);
    tslib_1.__exportStar(require_RollbackStackCommand(), exports);
    tslib_1.__exportStar(require_SetStackPolicyCommand(), exports);
    tslib_1.__exportStar(require_SetTypeConfigurationCommand(), exports);
    tslib_1.__exportStar(require_SetTypeDefaultVersionCommand(), exports);
    tslib_1.__exportStar(require_SignalResourceCommand(), exports);
    tslib_1.__exportStar(require_StopStackSetOperationCommand(), exports);
    tslib_1.__exportStar(require_TestTypeCommand(), exports);
    tslib_1.__exportStar(require_UpdateStackCommand(), exports);
    tslib_1.__exportStar(require_UpdateStackInstancesCommand(), exports);
    tslib_1.__exportStar(require_UpdateStackSetCommand(), exports);
    tslib_1.__exportStar(require_UpdateTerminationProtectionCommand(), exports);
    tslib_1.__exportStar(require_ValidateTemplateCommand(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/models/index.js
var require_models5 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_05(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeAccountLimitsPaginator.js
var require_DescribeAccountLimitsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeAccountLimitsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeAccountLimits = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var DescribeAccountLimitsCommand_1 = require_DescribeAccountLimitsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeAccountLimitsCommand_1.DescribeAccountLimitsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeAccountLimits(input, ...args);
    };
    async function* paginateDescribeAccountLimits(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeAccountLimits = paginateDescribeAccountLimits;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeStackEventsPaginator.js
var require_DescribeStackEventsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeStackEventsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeStackEvents = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var DescribeStackEventsCommand_1 = require_DescribeStackEventsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeStackEventsCommand_1.DescribeStackEventsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeStackEvents(input, ...args);
    };
    async function* paginateDescribeStackEvents(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeStackEvents = paginateDescribeStackEvents;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeStackResourceDriftsPaginator.js
var require_DescribeStackResourceDriftsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeStackResourceDriftsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeStackResourceDrifts = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var DescribeStackResourceDriftsCommand_1 = require_DescribeStackResourceDriftsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeStackResourceDriftsCommand_1.DescribeStackResourceDriftsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeStackResourceDrifts(input, ...args);
    };
    async function* paginateDescribeStackResourceDrifts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeStackResourceDrifts = paginateDescribeStackResourceDrifts;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeStacksPaginator.js
var require_DescribeStacksPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/DescribeStacksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateDescribeStacks = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.describeStacks(input, ...args);
    };
    async function* paginateDescribeStacks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateDescribeStacks = paginateDescribeStacks;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/Interfaces.js
var require_Interfaces3 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListChangeSetsPaginator.js
var require_ListChangeSetsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListChangeSetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListChangeSets = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListChangeSetsCommand_1 = require_ListChangeSetsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListChangeSetsCommand_1.ListChangeSetsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listChangeSets(input, ...args);
    };
    async function* paginateListChangeSets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListChangeSets = paginateListChangeSets;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListExportsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListExports = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListExportsCommand_1.ListExportsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listExports(input, ...args);
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListExports = paginateListExports;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListImportsPaginator.js
var require_ListImportsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListImportsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListImports = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListImportsCommand_1 = require_ListImportsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListImportsCommand_1.ListImportsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listImports(input, ...args);
    };
    async function* paginateListImports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListImports = paginateListImports;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackInstancesPaginator.js
var require_ListStackInstancesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackInstancesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListStackInstances = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListStackInstancesCommand_1 = require_ListStackInstancesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListStackInstancesCommand_1.ListStackInstancesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listStackInstances(input, ...args);
    };
    async function* paginateListStackInstances(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListStackInstances = paginateListStackInstances;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackResourcesPaginator.js
var require_ListStackResourcesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackResourcesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListStackResources = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListStackResourcesCommand_1 = require_ListStackResourcesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListStackResourcesCommand_1.ListStackResourcesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listStackResources(input, ...args);
    };
    async function* paginateListStackResources(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListStackResources = paginateListStackResources;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackSetOperationResultsPaginator.js
var require_ListStackSetOperationResultsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackSetOperationResultsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListStackSetOperationResults = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListStackSetOperationResultsCommand_1 = require_ListStackSetOperationResultsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListStackSetOperationResultsCommand_1.ListStackSetOperationResultsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listStackSetOperationResults(input, ...args);
    };
    async function* paginateListStackSetOperationResults(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListStackSetOperationResults = paginateListStackSetOperationResults;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackSetOperationsPaginator.js
var require_ListStackSetOperationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackSetOperationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListStackSetOperations = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListStackSetOperationsCommand_1 = require_ListStackSetOperationsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListStackSetOperationsCommand_1.ListStackSetOperationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listStackSetOperations(input, ...args);
    };
    async function* paginateListStackSetOperations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListStackSetOperations = paginateListStackSetOperations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackSetsPaginator.js
var require_ListStackSetsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStackSetsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListStackSets = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListStackSetsCommand_1 = require_ListStackSetsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListStackSetsCommand_1.ListStackSetsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listStackSets(input, ...args);
    };
    async function* paginateListStackSets(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListStackSets = paginateListStackSets;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStacksPaginator.js
var require_ListStacksPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListStacksPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListStacks = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListStacksCommand_1 = require_ListStacksCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListStacksCommand_1.ListStacksCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listStacks(input, ...args);
    };
    async function* paginateListStacks(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListStacks = paginateListStacks;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListTypeRegistrationsPaginator.js
var require_ListTypeRegistrationsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListTypeRegistrationsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListTypeRegistrations = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListTypeRegistrationsCommand_1 = require_ListTypeRegistrationsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTypeRegistrationsCommand_1.ListTypeRegistrationsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listTypeRegistrations(input, ...args);
    };
    async function* paginateListTypeRegistrations(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTypeRegistrations = paginateListTypeRegistrations;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListTypeVersionsPaginator.js
var require_ListTypeVersionsPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListTypeVersionsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListTypeVersions = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListTypeVersionsCommand_1 = require_ListTypeVersionsCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTypeVersionsCommand_1.ListTypeVersionsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listTypeVersions(input, ...args);
    };
    async function* paginateListTypeVersions(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTypeVersions = paginateListTypeVersions;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListTypesPaginator.js
var require_ListTypesPaginator = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/ListTypesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListTypes = void 0;
    var CloudFormation_1 = require_CloudFormation();
    var CloudFormationClient_1 = require_CloudFormationClient();
    var ListTypesCommand_1 = require_ListTypesCommand();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTypesCommand_1.ListTypesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listTypes(input, ...args);
    };
    async function* paginateListTypes(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof CloudFormation_1.CloudFormation) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof CloudFormationClient_1.CloudFormationClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected CloudFormation | CloudFormationClient");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports.paginateListTypes = paginateListTypes;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/index.js
var require_pagination4 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_DescribeAccountLimitsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeStackEventsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeStackResourceDriftsPaginator(), exports);
    tslib_1.__exportStar(require_DescribeStacksPaginator(), exports);
    tslib_1.__exportStar(require_Interfaces3(), exports);
    tslib_1.__exportStar(require_ListChangeSetsPaginator(), exports);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports);
    tslib_1.__exportStar(require_ListImportsPaginator(), exports);
    tslib_1.__exportStar(require_ListStackInstancesPaginator(), exports);
    tslib_1.__exportStar(require_ListStackResourcesPaginator(), exports);
    tslib_1.__exportStar(require_ListStackSetOperationResultsPaginator(), exports);
    tslib_1.__exportStar(require_ListStackSetOperationsPaginator(), exports);
    tslib_1.__exportStar(require_ListStackSetsPaginator(), exports);
    tslib_1.__exportStar(require_ListStacksPaginator(), exports);
    tslib_1.__exportStar(require_ListTypeRegistrationsPaginator(), exports);
    tslib_1.__exportStar(require_ListTypeVersionsPaginator(), exports);
    tslib_1.__exportStar(require_ListTypesPaginator(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForChangeSetCreateComplete.js
var require_waitForChangeSetCreateComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForChangeSetCreateComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilChangeSetCreateComplete = exports.waitForChangeSetCreateComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeChangeSetCommand_1 = require_DescribeChangeSetCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeChangeSetCommand_1.DescribeChangeSetCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "CREATE_COMPLETE") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.Status;
          };
          if (returnComparator() === "FAILED") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.FAILURE, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForChangeSetCreateComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForChangeSetCreateComplete = waitForChangeSetCreateComplete;
    var waitUntilChangeSetCreateComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilChangeSetCreateComplete = waitUntilChangeSetCreateComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackCreateComplete.js
var require_waitForStackCreateComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackCreateComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilStackCreateComplete = exports.waitForStackCreateComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "CREATE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "CREATE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_COMPLETE") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_COMPLETE") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.FAILURE, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForStackCreateComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForStackCreateComplete = waitForStackCreateComplete;
    var waitUntilStackCreateComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilStackCreateComplete = waitUntilStackCreateComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackDeleteComplete.js
var require_waitForStackDeleteComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackDeleteComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilStackDeleteComplete = exports.waitForStackDeleteComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "DELETE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "CREATE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_IN_PROGRESS") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_COMPLETE") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForStackDeleteComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForStackDeleteComplete = waitForStackDeleteComplete;
    var waitUntilStackDeleteComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilStackDeleteComplete = waitUntilStackDeleteComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackExists.js
var require_waitForStackExists = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilStackExists = exports.waitForStackExists = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForStackExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForStackExists = waitForStackExists;
    var waitUntilStackExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilStackExists = waitUntilStackExists;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackImportComplete.js
var require_waitForStackImportComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackImportComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilStackImportComplete = exports.waitForStackImportComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "IMPORT_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_COMPLETE") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "IMPORT_ROLLBACK_IN_PROGRESS") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "IMPORT_ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "IMPORT_ROLLBACK_COMPLETE") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.FAILURE, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForStackImportComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForStackImportComplete = waitForStackImportComplete;
    var waitUntilStackImportComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilStackImportComplete = waitUntilStackImportComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackRollbackComplete.js
var require_waitForStackRollbackComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackRollbackComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilStackRollbackComplete = exports.waitForStackRollbackComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_ROLLBACK_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "DELETE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.FAILURE, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForStackRollbackComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForStackRollbackComplete = waitForStackRollbackComplete;
    var waitUntilStackRollbackComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilStackRollbackComplete = waitUntilStackRollbackComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackUpdateComplete.js
var require_waitForStackUpdateComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForStackUpdateComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilStackUpdateComplete = exports.waitForStackUpdateComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeStacksCommand_1 = require_DescribeStacksCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeStacksCommand_1.DescribeStacksCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          let allStringEq_5 = returnComparator().length > 0;
          for (const element_4 of returnComparator()) {
            allStringEq_5 = allStringEq_5 && element_4 == "UPDATE_COMPLETE";
          }
          if (allStringEq_5) {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_FAILED") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            const flat_1 = [].concat(...result.Stacks);
            const projection_3 = flat_1.map((element_2) => {
              return element_2.StackStatus;
            });
            return projection_3;
          };
          for (const anyStringEq_4 of returnComparator()) {
            if (anyStringEq_4 == "UPDATE_ROLLBACK_COMPLETE") {
              return { state: util_waiter_1.WaiterState.FAILURE, reason };
            }
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationError") {
          return { state: util_waiter_1.WaiterState.FAILURE, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForStackUpdateComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForStackUpdateComplete = waitForStackUpdateComplete;
    var waitUntilStackUpdateComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilStackUpdateComplete = waitUntilStackUpdateComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForTypeRegistrationComplete.js
var require_waitForTypeRegistrationComplete = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/waitForTypeRegistrationComplete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilTypeRegistrationComplete = exports.waitForTypeRegistrationComplete = void 0;
    var util_waiter_1 = require_dist_cjs50();
    var DescribeTypeRegistrationCommand_1 = require_DescribeTypeRegistrationCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTypeRegistrationCommand_1.DescribeTypeRegistrationCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.ProgressStatus;
          };
          if (returnComparator() === "COMPLETE") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
        try {
          const returnComparator = () => {
            return result.ProgressStatus;
          };
          if (returnComparator() === "FAILED") {
            return { state: util_waiter_1.WaiterState.FAILURE, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTypeRegistrationComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports.waitForTypeRegistrationComplete = waitForTypeRegistrationComplete;
    var waitUntilTypeRegistrationComplete = async (params, input) => {
      const serviceDefaults = { minDelay: 30, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTypeRegistrationComplete = waitUntilTypeRegistrationComplete;
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/index.js
var require_waiters2 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForChangeSetCreateComplete(), exports);
    tslib_1.__exportStar(require_waitForStackCreateComplete(), exports);
    tslib_1.__exportStar(require_waitForStackDeleteComplete(), exports);
    tslib_1.__exportStar(require_waitForStackExists(), exports);
    tslib_1.__exportStar(require_waitForStackImportComplete(), exports);
    tslib_1.__exportStar(require_waitForStackRollbackComplete(), exports);
    tslib_1.__exportStar(require_waitForStackUpdateComplete(), exports);
    tslib_1.__exportStar(require_waitForTypeRegistrationComplete(), exports);
  }
});

// ../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/index.js
var require_dist_cjs52 = __commonJS({
  "../../node_modules/.pnpm/@aws-sdk+client-cloudformation@3.279.0/node_modules/@aws-sdk/client-cloudformation/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudFormationServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CloudFormation(), exports);
    tslib_1.__exportStar(require_CloudFormationClient(), exports);
    tslib_1.__exportStar(require_commands5(), exports);
    tslib_1.__exportStar(require_models5(), exports);
    tslib_1.__exportStar(require_pagination4(), exports);
    tslib_1.__exportStar(require_waiters2(), exports);
    var CloudFormationServiceException_1 = require_CloudFormationServiceException();
    Object.defineProperty(exports, "CloudFormationServiceException", { enumerable: true, get: function() {
      return CloudFormationServiceException_1.CloudFormationServiceException;
    } });
  }
});

// support/script-function/index.ts
var import_client_lambda = __toESM(require_dist_cjs51(), 1);
var import_client_cloudformation = __toESM(require_dist_cjs52(), 1);

// support/script-function/cfn-response.ts
import https from "https";
import url from "url";
var CREATE_FAILED_PHYSICAL_ID_MARKER = "AWSCDK::CustomResourceProviderFramework::CREATE_FAILED";
var MISSING_PHYSICAL_ID_MARKER = "AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID";
async function submitResponse(status, event, options = {}) {
  const json = {
    Status: status,
    Reason: options.reason || status,
    StackId: event.StackId,
    RequestId: event.RequestId,
    PhysicalResourceId: event.PhysicalResourceId || MISSING_PHYSICAL_ID_MARKER,
    LogicalResourceId: event.LogicalResourceId,
    NoEcho: options.noEcho,
    Data: event.Data
  };
  log("submit response to cloudformation", json);
  const responseBody = JSON.stringify(json);
  const parsedUrl = url.parse(event.ResponseURL);
  await httpRequest(
    {
      hostname: parsedUrl.hostname,
      path: parsedUrl.path,
      method: "PUT",
      headers: {
        "content-type": "",
        "content-length": responseBody.length
      }
    },
    responseBody
  );
}
function safeHandler(block) {
  return async (event) => {
    try {
      await block(event);
    } catch (e) {
      log(e);
      if (e instanceof Retry) {
        log("retry requested by handler");
        throw e;
      }
      if (!event.PhysicalResourceId) {
        if (event.RequestType === "Create") {
          log(
            "CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored"
          );
          event.PhysicalResourceId = CREATE_FAILED_PHYSICAL_ID_MARKER;
        } else {
          log(
            `ERROR: Malformed event. "PhysicalResourceId" is required: ${JSON.stringify(
              event
            )}`
          );
        }
      }
      const reason = e.reason || `${e.message} - Logs: https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(
        process.env.AWS_LAMBDA_LOG_GROUP_NAME
      )}/log-events/${encodeURIComponent(
        process.env.AWS_LAMBDA_LOG_STREAM_NAME
      )}`;
      await submitResponse("FAILED", event, { reason });
    }
  };
}
var Retry = class extends Error {
};
async function httpRequest(options, responseBody) {
  return new Promise((resolve, reject) => {
    try {
      const request = https.request(options, resolve);
      request.on("error", reject);
      request.write(responseBody);
      request.end();
    } catch (e) {
      reject(e);
    }
  });
}

// support/script-function/util.ts
function wrapper(block) {
  return safeHandler(
    async (cfnRequest) => {
      await block(cfnRequest);
      return submitResponse("SUCCESS", {
        ...cfnRequest,
        PhysicalResourceId: defaultPhysicalResourceId(cfnRequest)
      });
    }
  );
}
function log(title, ...args) {
  console.log(
    "[provider-framework]",
    title,
    ...args.map(
      (x) => typeof x === "object" ? JSON.stringify(x, void 0, 2) : x
    )
  );
}
function defaultPhysicalResourceId(req) {
  switch (req.RequestType) {
    case "Create":
      return req.RequestId;
    case "Update":
    case "Delete":
      return req.PhysicalResourceId;
    default:
      throw new Error(
        `Invalid "RequestType" in request "${JSON.stringify(req)}"`
      );
  }
}

// support/script-function/index.ts
var logger = { ...console, debug: () => {
} };
var lambda = new import_client_lambda.LambdaClient({ logger });
var cf = new import_client_cloudformation.CloudFormationClient({ logger });
var handler = wrapper(async (cfnRequest) => {
  log("onEventHandler", cfnRequest);
  const { RequestType, ResourceProperties, StackId } = cfnRequest;
  if (StackId && await isStackRollingBack(StackId))
    return;
  const fnCreate = ResourceProperties.UserCreateFunction;
  const fnUpdate = ResourceProperties.UserUpdateFunction;
  const fnDelete = ResourceProperties.UserDeleteFunction;
  const fnParams = JSON.parse(ResourceProperties.UserParams);
  if (RequestType === "Create" && fnCreate) {
    await invokeUserFunction(fnCreate, { params: fnParams });
  } else if (RequestType === "Update" && fnUpdate) {
    await invokeUserFunction(fnUpdate, { params: fnParams });
  } else if (RequestType === "Delete" && fnDelete) {
    await invokeUserFunction(fnDelete, { params: fnParams });
  }
});
async function isStackRollingBack(stackId) {
  log("isStackRollingBack()", stackId);
  const resp = await cf.send(
    new import_client_cloudformation.DescribeStacksCommand({
      StackName: stackId
    })
  );
  const status = resp.Stacks?.[0].StackStatus;
  const isRollback = status?.startsWith("UPDATE_ROLLBACK") || status?.startsWith("ROLLBACK");
  log({ isRollback });
  return isRollback;
}
async function invokeUserFunction(functionName, payload) {
  log("invokeUserFunction()", functionName, payload);
  const resp = await lambda.send(
    new import_client_lambda.InvokeCommand({
      FunctionName: functionName,
      Payload: Buffer.from(JSON.stringify(payload))
    })
  );
  if (resp.FunctionError) {
    const payload2 = JSON.parse(Buffer.from(resp.Payload).toString());
    const error = new Error();
    error.reason = `${payload2.errorType}: ${payload2.errorMessage} - https://${process.env.AWS_REGION}.console.aws.amazon.com/cloudwatch/home?region=${process.env.AWS_REGION}#logsV2:log-groups/log-group/${encodeURIComponent(
      `/aws/lambda/${functionName}`
    )}`;
    throw error;
  }
  log(`response`, resp);
}
export {
  handler
};
