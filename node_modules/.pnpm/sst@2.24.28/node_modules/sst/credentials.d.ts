import { Client } from "@aws-sdk/smithy-client";
import { RegionInputConfig } from "@aws-sdk/config-resolver";
import { RetryInputConfig } from "@aws-sdk/middleware-retry";
import { AwsAuthInputConfig } from "@aws-sdk/middleware-signing";
import { SdkProvider } from "sst-aws-cdk/lib/api/aws-auth/sdk-provider.js";
type Config = RegionInputConfig & RetryInputConfig & AwsAuthInputConfig & HostHeaderConditionConfig;
export declare const useAWSCredentialsProvider: () => import("@aws-sdk/types").AwsCredentialIdentityProvider;
export declare const useAWSCredentials: () => Promise<import("@aws-sdk/types").AwsCredentialIdentity>;
export declare const useSTSIdentity: () => Promise<import("@aws-sdk/client-sts").GetCallerIdentityCommandOutput>;
export declare function useAWSClient<C extends Client<any, any, any, any>>(client: new (config: Config) => C, force?: boolean): C;
import { HostHeaderConditionConfig } from "aws-sdk/clients/elbv2.js";
/**
 * Do not use this. It is only used for AWS CDK compatibility.
 */
export declare const useAWSProvider: () => Promise<SdkProvider>;
export {};
