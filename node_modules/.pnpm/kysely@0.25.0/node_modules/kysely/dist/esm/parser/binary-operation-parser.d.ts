import { BinaryOperationNode } from '../operation-node/binary-operation-node.js';
import { ComparisonOperator, ArithmeticOperator, BinaryOperator, Operator } from '../operation-node/operator-node.js';
import { ExtractTypeFromReferenceExpression, ReferenceExpression } from './reference-parser.js';
import { ValueExpression, ValueExpressionOrList } from './value-parser.js';
import { OperationNode } from '../operation-node/operation-node.js';
import { Expression } from '../expression/expression.js';
export declare type OperandValueExpression<DB, TB extends keyof DB, RE> = ValueExpression<DB, TB, ExtractTypeFromReferenceExpression<DB, TB, RE>>;
export declare type OperandValueExpressionOrList<DB, TB extends keyof DB, RE> = ValueExpressionOrList<DB, TB, ExtractTypeFromReferenceExpression<DB, TB, RE> | null>;
export declare type OperatorExpression = Operator | Expression<unknown>;
export declare type BinaryOperatorExpression = BinaryOperator | Expression<unknown>;
export declare type ComparisonOperatorExpression = ComparisonOperator | Expression<unknown>;
export declare type ArithmeticOperatorExpression = ArithmeticOperator | Expression<unknown>;
export declare function parseValueBinaryOperation(leftOperand: ReferenceExpression<any, any>, operator: BinaryOperatorExpression, rightOperand: OperandValueExpressionOrList<any, any, any>): BinaryOperationNode;
export declare function parseReferentialBinaryOperation(leftOperand: ReferenceExpression<any, any>, operator: BinaryOperatorExpression, rightOperand: OperandValueExpressionOrList<any, any, any>): BinaryOperationNode;
export declare function parseValueComparison(leftOperand: ReferenceExpression<any, any>, operator: ComparisonOperatorExpression, rightOperand: OperandValueExpressionOrList<any, any, any>): BinaryOperationNode;
export declare function parseReferentialComparison(leftOperand: ReferenceExpression<any, any>, operator: ComparisonOperatorExpression, rightOperand: ReferenceExpression<any, any>): BinaryOperationNode;
export declare function parseWhere(args: any[]): OperationNode;
export declare function parseHaving(args: any[]): OperationNode;
export declare function parseOn(args: any[]): OperationNode;
export declare function parseWhen(args: any[]): OperationNode;
