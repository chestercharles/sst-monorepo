/// <reference types="./alter-column-builder.d.ts" />
import { AlterColumnNode } from '../operation-node/alter-column-node.js';
import { parseDataTypeExpression, } from '../parser/data-type-parser.js';
import { parseDefaultValueExpression, } from '../parser/default-value-parser.js';
export class AlterColumnBuilder {
    alterColumnNode;
    constructor(alterColumnNode) {
        this.alterColumnNode = alterColumnNode;
    }
    setDataType(dataType) {
        return new AlteredColumnBuilder(AlterColumnNode.cloneWith(this.alterColumnNode, {
            dataType: parseDataTypeExpression(dataType),
        }));
    }
    setDefault(value) {
        return new AlteredColumnBuilder(AlterColumnNode.cloneWith(this.alterColumnNode, {
            setDefault: parseDefaultValueExpression(value),
        }));
    }
    dropDefault() {
        return new AlteredColumnBuilder(AlterColumnNode.cloneWith(this.alterColumnNode, {
            dropDefault: true,
        }));
    }
    setNotNull() {
        return new AlteredColumnBuilder(AlterColumnNode.cloneWith(this.alterColumnNode, {
            setNotNull: true,
        }));
    }
    dropNotNull() {
        return new AlteredColumnBuilder(AlterColumnNode.cloneWith(this.alterColumnNode, {
            dropNotNull: true,
        }));
    }
    /**
     * Simply calls the provided function passing `this` as the only argument. `$call` returns
     * what the provided function returns.
     */
    $call(func) {
        return func(this);
    }
}
/**
 * Allows us to force consumers to do something, anything, when altering a column.
 *
 * Basically, deny the following:
 *
 * ```ts
 * db.schema.alterTable('person').alterColumn('age', (ac) => ac)
 * ```
 *
 * Which would now throw a compilation error, instead of a runtime error.
 */
export class AlteredColumnBuilder extends AlterColumnBuilder {
    toOperationNode() {
        return this.alterColumnNode;
    }
}
