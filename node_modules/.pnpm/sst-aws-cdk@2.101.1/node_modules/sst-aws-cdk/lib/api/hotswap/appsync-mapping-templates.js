"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHotswappableAppSyncChange = void 0;
const common_1 = require("./common");
async function isHotswappableAppSyncChange(logicalId, change, evaluateCfnTemplate) {
    const isResolver = change.newValue.Type === 'AWS::AppSync::Resolver';
    const isFunction = change.newValue.Type === 'AWS::AppSync::FunctionConfiguration';
    const isGraphQLSchema = change.newValue.Type === 'AWS::AppSync::GraphQLSchema';
    if (!isResolver && !isFunction && !isGraphQLSchema) {
        return [];
    }
    const ret = [];
    const classifiedChanges = (0, common_1.classifyChanges)(change, [
        'RequestMappingTemplate',
        'RequestMappingTemplateS3Location',
        'ResponseMappingTemplate',
        'ResponseMappingTemplateS3Location',
        'Code',
        'CodeS3Location',
        'Definition',
        'DefinitionS3Location',
    ]);
    classifiedChanges.reportNonHotswappablePropertyChanges(ret);
    const namesOfHotswappableChanges = Object.keys(classifiedChanges.hotswappableProps);
    if (namesOfHotswappableChanges.length > 0) {
        let physicalName = undefined;
        const arn = await evaluateCfnTemplate.establishResourcePhysicalName(logicalId, isFunction ? change.newValue.Properties?.Name : undefined);
        if (isResolver) {
            const arnParts = arn?.split('/');
            physicalName = arnParts ? `${arnParts[3]}.${arnParts[5]}` : undefined;
        }
        else {
            physicalName = arn;
        }
        ret.push({
            hotswappable: true,
            resourceType: change.newValue.Type,
            propsChanged: namesOfHotswappableChanges,
            service: 'appsync',
            resourceNames: [`${change.newValue.Type} '${physicalName}'`],
            apply: async (sdk) => {
                if (!physicalName) {
                    return;
                }
                const sdkProperties = {
                    ...change.oldValue.Properties,
                    Definition: change.newValue.Properties?.Definition,
                    DefinitionS3Location: change.newValue.Properties?.DefinitionS3Location,
                    requestMappingTemplate: change.newValue.Properties?.RequestMappingTemplate,
                    requestMappingTemplateS3Location: change.newValue.Properties?.RequestMappingTemplateS3Location,
                    responseMappingTemplate: change.newValue.Properties?.ResponseMappingTemplate,
                    responseMappingTemplateS3Location: change.newValue.Properties?.ResponseMappingTemplateS3Location,
                    code: change.newValue.Properties?.Code,
                    codeS3Location: change.newValue.Properties?.CodeS3Location,
                };
                const evaluatedResourceProperties = await evaluateCfnTemplate.evaluateCfnExpression(sdkProperties);
                const sdkRequestObject = (0, common_1.transformObjectKeys)(evaluatedResourceProperties, common_1.lowerCaseFirstCharacter);
                // resolve s3 location files as SDK doesn't take in s3 location but inline code
                if (sdkRequestObject.requestMappingTemplateS3Location) {
                    sdkRequestObject.requestMappingTemplate = (await fetchFileFromS3(sdkRequestObject.requestMappingTemplateS3Location, sdk))?.toString('utf8');
                    delete sdkRequestObject.requestMappingTemplateS3Location;
                }
                if (sdkRequestObject.responseMappingTemplateS3Location) {
                    sdkRequestObject.responseMappingTemplate = (await fetchFileFromS3(sdkRequestObject.responseMappingTemplateS3Location, sdk))?.toString('utf8');
                    delete sdkRequestObject.responseMappingTemplateS3Location;
                }
                if (sdkRequestObject.definitionS3Location) {
                    sdkRequestObject.definition = await fetchFileFromS3(sdkRequestObject.definitionS3Location, sdk);
                    delete sdkRequestObject.definitionS3Location;
                }
                if (sdkRequestObject.codeS3Location) {
                    sdkRequestObject.code = await fetchFileFromS3(sdkRequestObject.codeS3Location, sdk);
                    delete sdkRequestObject.codeS3Location;
                }
                if (isResolver) {
                    await sdk.appsync().updateResolver(sdkRequestObject).promise();
                }
                else if (isFunction) {
                    const { functions } = await sdk.appsync().listFunctions({ apiId: sdkRequestObject.apiId }).promise();
                    const { functionId } = functions?.find(fn => fn.name === physicalName) ?? {};
                    await simpleRetry(() => sdk.appsync().updateFunction({ ...sdkRequestObject, functionId: functionId }).promise(), 3, 'ConcurrentModificationException');
                }
                else {
                    let schemaCreationResponse = await sdk.appsync().startSchemaCreation(sdkRequestObject).promise();
                    while (schemaCreationResponse.status && ['PROCESSING', 'DELETING'].some(status => status === schemaCreationResponse.status)) {
                        await sleep(1000); // poll every second
                        const getSchemaCreationStatusRequest = {
                            apiId: sdkRequestObject.apiId,
                        };
                        schemaCreationResponse = await sdk.appsync().getSchemaCreationStatus(getSchemaCreationStatusRequest).promise();
                    }
                    if (schemaCreationResponse.status === 'FAILED') {
                        throw new Error(schemaCreationResponse.details);
                    }
                }
            },
        });
    }
    return ret;
}
exports.isHotswappableAppSyncChange = isHotswappableAppSyncChange;
async function fetchFileFromS3(s3Url, sdk) {
    const s3PathParts = s3Url.split('/');
    const s3Bucket = s3PathParts[2]; // first two are "s3:" and "" due to s3://
    const s3Key = s3PathParts.splice(3).join('/'); // after removing first three we reconstruct the key
    return (await sdk.s3().getObject({ Bucket: s3Bucket, Key: s3Key }).promise()).Body;
}
async function simpleRetry(fn, numOfRetries, errorCodeToRetry) {
    try {
        await fn();
    }
    catch (error) {
        if (error && error.code === errorCodeToRetry && numOfRetries > 0) {
            await sleep(500); // wait half a second
            await simpleRetry(fn, numOfRetries - 1, errorCodeToRetry);
        }
        else {
            throw error;
        }
    }
}
async function sleep(ms) {
    return new Promise(ok => setTimeout(ok, ms));
}
//# sourceMappingURL=data:application/json;base64,