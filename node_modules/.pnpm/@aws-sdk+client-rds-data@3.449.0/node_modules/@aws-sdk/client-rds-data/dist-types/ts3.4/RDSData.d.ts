import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  BatchExecuteStatementCommandInput,
  BatchExecuteStatementCommandOutput,
} from "./commands/BatchExecuteStatementCommand";
import {
  BeginTransactionCommandInput,
  BeginTransactionCommandOutput,
} from "./commands/BeginTransactionCommand";
import {
  CommitTransactionCommandInput,
  CommitTransactionCommandOutput,
} from "./commands/CommitTransactionCommand";
import {
  ExecuteSqlCommandInput,
  ExecuteSqlCommandOutput,
} from "./commands/ExecuteSqlCommand";
import {
  ExecuteStatementCommandInput,
  ExecuteStatementCommandOutput,
} from "./commands/ExecuteStatementCommand";
import {
  RollbackTransactionCommandInput,
  RollbackTransactionCommandOutput,
} from "./commands/RollbackTransactionCommand";
import { RDSDataClient } from "./RDSDataClient";
export interface RDSData {
  batchExecuteStatement(
    args: BatchExecuteStatementCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<BatchExecuteStatementCommandOutput>;
  batchExecuteStatement(
    args: BatchExecuteStatementCommandInput,
    cb: (err: any, data?: BatchExecuteStatementCommandOutput) => void
  ): void;
  batchExecuteStatement(
    args: BatchExecuteStatementCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: BatchExecuteStatementCommandOutput) => void
  ): void;
  beginTransaction(
    args: BeginTransactionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<BeginTransactionCommandOutput>;
  beginTransaction(
    args: BeginTransactionCommandInput,
    cb: (err: any, data?: BeginTransactionCommandOutput) => void
  ): void;
  beginTransaction(
    args: BeginTransactionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: BeginTransactionCommandOutput) => void
  ): void;
  commitTransaction(
    args: CommitTransactionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CommitTransactionCommandOutput>;
  commitTransaction(
    args: CommitTransactionCommandInput,
    cb: (err: any, data?: CommitTransactionCommandOutput) => void
  ): void;
  commitTransaction(
    args: CommitTransactionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CommitTransactionCommandOutput) => void
  ): void;
  executeSql(
    args: ExecuteSqlCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ExecuteSqlCommandOutput>;
  executeSql(
    args: ExecuteSqlCommandInput,
    cb: (err: any, data?: ExecuteSqlCommandOutput) => void
  ): void;
  executeSql(
    args: ExecuteSqlCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ExecuteSqlCommandOutput) => void
  ): void;
  executeStatement(
    args: ExecuteStatementCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ExecuteStatementCommandOutput>;
  executeStatement(
    args: ExecuteStatementCommandInput,
    cb: (err: any, data?: ExecuteStatementCommandOutput) => void
  ): void;
  executeStatement(
    args: ExecuteStatementCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ExecuteStatementCommandOutput) => void
  ): void;
  rollbackTransaction(
    args: RollbackTransactionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RollbackTransactionCommandOutput>;
  rollbackTransaction(
    args: RollbackTransactionCommandInput,
    cb: (err: any, data?: RollbackTransactionCommandOutput) => void
  ): void;
  rollbackTransaction(
    args: RollbackTransactionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RollbackTransactionCommandOutput) => void
  ): void;
}
export declare class RDSData extends RDSDataClient implements RDSData {}
