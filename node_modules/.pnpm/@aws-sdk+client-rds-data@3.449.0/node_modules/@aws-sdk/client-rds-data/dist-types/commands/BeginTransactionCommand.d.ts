import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@smithy/types";
import { BeginTransactionRequest, BeginTransactionResponse } from "../models/models_0";
import { RDSDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RDSDataClient";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link BeginTransactionCommand}.
 */
export interface BeginTransactionCommandInput extends BeginTransactionRequest {
}
/**
 * @public
 *
 * The output of {@link BeginTransactionCommand}.
 */
export interface BeginTransactionCommandOutput extends BeginTransactionResponse, __MetadataBearer {
}
/**
 * @public
 * <p>Starts a SQL transaction.</p>
 *         <note>
 *             <p>A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24
 *                 hours.</p>
 *             <p>A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it's
 *                 committed, it's rolled back automatically.</p>
 *             <p>DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate
 *                     <code>ExecuteStatement</code> call with <code>continueAfterTimeout</code> enabled.</p>
 *         </note>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { RDSDataClient, BeginTransactionCommand } from "@aws-sdk/client-rds-data"; // ES Modules import
 * // const { RDSDataClient, BeginTransactionCommand } = require("@aws-sdk/client-rds-data"); // CommonJS import
 * const client = new RDSDataClient(config);
 * const input = { // BeginTransactionRequest
 *   resourceArn: "STRING_VALUE", // required
 *   secretArn: "STRING_VALUE", // required
 *   database: "STRING_VALUE",
 *   schema: "STRING_VALUE",
 * };
 * const command = new BeginTransactionCommand(input);
 * const response = await client.send(command);
 * // { // BeginTransactionResponse
 * //   transactionId: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param BeginTransactionCommandInput - {@link BeginTransactionCommandInput}
 * @returns {@link BeginTransactionCommandOutput}
 * @see {@link BeginTransactionCommandInput} for command's `input` shape.
 * @see {@link BeginTransactionCommandOutput} for command's `response` shape.
 * @see {@link RDSDataClientResolvedConfig | config} for RDSDataClient's `config` shape.
 *
 * @throws {@link AccessDeniedException} (client fault)
 *  <p>You do not have sufficient access to perform this action.</p>
 *
 * @throws {@link BadRequestException} (client fault)
 *  <p>There is an error in the call or in a SQL statement.</p>
 *
 * @throws {@link ForbiddenException} (client fault)
 *  <p>There are insufficient privileges to make the call.</p>
 *
 * @throws {@link InternalServerErrorException} (server fault)
 *  <p>An internal error occurred.</p>
 *
 * @throws {@link ServiceUnavailableError} (server fault)
 *  <p>The service specified by the <code>resourceArn</code> parameter is not
 *             available.</p>
 *
 * @throws {@link StatementTimeoutException} (client fault)
 *  <p>The execution of the SQL statement timed out.</p>
 *
 * @throws {@link RDSDataServiceException}
 * <p>Base exception class for all service exceptions from RDSData service.</p>
 *
 */
export declare class BeginTransactionCommand extends $Command<BeginTransactionCommandInput, BeginTransactionCommandOutput, RDSDataClientResolvedConfig> {
    readonly input: BeginTransactionCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: BeginTransactionCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BeginTransactionCommandInput, BeginTransactionCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
