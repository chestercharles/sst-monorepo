{"version":3,"file":"dendriform-immer-patch-optimiser.esm.js","sources":["../src/traverse.ts","../src/zoomPatches.ts","../src/optimise.ts","../src/applyPatches.ts"],"sourcesContent":["import type {Key} from './types';\n\nexport const BASIC = 0;\nexport const OBJECT = 1;\nexport const ARRAY = 2;\nexport const MAP = 3;\nexport const SET = 4;\n\nexport type DataType = typeof ARRAY|typeof OBJECT|typeof BASIC|typeof MAP|typeof SET;\n\nconst cantAccess = (thing: unknown, key: Key) => new Error(`Cant access property ${String(key)} of ${String(thing)}`);\n\nexport function getType(thing: unknown): DataType {\n    if(thing instanceof Map) return MAP;\n    if(thing instanceof Set) return SET;\n    if(Array.isArray(thing)) return ARRAY;\n    if(thing instanceof Object) return OBJECT;\n    return BASIC;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function has(thing: any, key: Key): boolean {\n    const type = getType(thing);\n    if(type === OBJECT) {\n        return key in thing;\n    }\n    if(type === ARRAY) {\n        const index = key as number;\n        return index < thing.length && index > -1;\n    }\n    if(type === MAP || type === SET) {\n        return thing.has(key);\n    }\n    throw cantAccess(thing, key);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function get(thing: any, key: Key): unknown {\n    const type = getType(thing);\n    if(type === BASIC) {\n        throw cantAccess(thing, key);\n    }\n    if(type === MAP) {\n        return thing.get(key);\n    }\n    if(type === SET) {\n        return thing.has(key) ? key : undefined;\n    }\n    return thing[key];\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function getIn(thing: unknown, path: Key[]): unknown {\n    return path.reduce((red, key) => get(red, key), thing);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function set(thing: any, key: Key, value: unknown): void {\n    const type = getType(thing);\n    if(type === BASIC) {\n        throw cantAccess(thing, key);\n    }\n    if(type === MAP) {\n        return thing.set(key, value);\n    }\n    if(type === SET) {\n        thing.delete(key);\n        thing.add(value);\n        return;\n    }\n    thing[key] = value;\n}\n\nexport type EachCallback = (value: unknown, key: Key) => void;\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function entries(thing: any): [Key,any][] {\n    const type = getType(thing);\n    if(type === OBJECT) return Object.entries(thing);\n    if(type === ARRAY || type === MAP || type === SET) return Array.from(thing.entries());\n    throw cantAccess(thing, 'any');\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function clone(thing: any): any {\n    const type = getType(thing);\n    if(type === OBJECT) return {...thing};\n    if(type === ARRAY) return thing.slice();\n    if(type === MAP) return new Map(thing);\n    if(type === SET) return new Set(thing);\n    return thing;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function create(type: DataType): any {\n    if(type === OBJECT) return {};\n    if(type === ARRAY) return [];\n    if(type === MAP) return new Map();\n    if(type === SET) return new Set();\n    return undefined;\n}\n","import type {DendriformPatch, Path} from './types';\nimport type {Patch as ImmerPatch} from 'immer';\n\nexport const zoomInPatches = <P extends ImmerPatch | DendriformPatch>(path: Path, patches: P[]): P[] => {\n    return patches\n        .filter(patch => path.every((elem, index) => elem === patch.path[index]))\n        .map(patch => {\n            return {\n                ...patch,\n                path: patch.path.slice(path.length)\n            };\n        });\n};\n\nexport const zoomOutPatches = <P extends ImmerPatch | DendriformPatch>(path: Path, patches: P[]): P[] => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return patches.map((patch: any): any => {\n        const newPatch = {\n            ...patch,\n            path: path.concat(patch.path)\n        };\n        if(patch.from) {\n            newPatch.from = path.concat(patch.from);\n        }\n        return newPatch;\n    });\n};\n","import {applyPatches, enablePatches, nothing} from 'immer';\nimport {getIn} from './traverse';\nimport {zoomInPatches, zoomOutPatches} from './zoomPatches';\nimport type {Patch as ImmerPatch} from 'immer';\nimport type {DendriformPatch, Path, Key} from './types';\n\nenablePatches();\n\ntype CheckPathResult = [boolean, string];\n\n//\n// optimise()\n//\n// chunks patches into groups where paths are the same\n// and optimises patches that relates to transformations on an array\n//\n// e.g.\n// value at ['foo','bar'] is an array\n//\n// [\n//   {path: ['foo'], ...}\n//   {path: ['foo'], ...}\n//   {path: ['foo','bar', 0], ...} // optimise this\n//   {path: ['foo','bar', 1], ...} // optimise this\n//   {path: ['foo','bar', 2], ...} // optimise this\n//   {path: ['foo','qux'], ...}\n// ]\n//\n\nexport const optimise = <B,>(base: B, patches: ImmerPatch[]): DendriformPatch[] => {\n\n    let newPatches: DendriformPatch[] = [];\n\n    // check path is array (memoised)\n    let lastResult: CheckPathResult|undefined;\n    const checkPathIsArray = <B,>(base: B, path: Key[]): boolean => {\n        const pathString = JSON.stringify(path);\n        if(lastResult && lastResult[1] === pathString) return lastResult[0];\n        const isArray = Array.isArray(getIn(base, path));\n        lastResult = [isArray, pathString];\n        return isArray;\n    };\n\n    // buffer\n    let currentPath: Path|undefined;\n    let buffer: ImmerPatch[] = [];\n\n    const flush = (): void => {\n        if(buffer.length === 0) return;\n        if(currentPath) {\n            const baseAtPath = getIn(base, currentPath);\n            const patchesAtPath = zoomInPatches<ImmerPatch>(currentPath, buffer);\n            // optimise patches\n            const optimisedPatches = optimiseArray(baseAtPath as unknown[], patchesAtPath);\n            const zoomedOutPatches = zoomOutPatches<DendriformPatch>(currentPath, optimisedPatches);\n            newPatches = newPatches.concat(zoomedOutPatches);\n        } else {\n            newPatches = newPatches.concat(buffer);\n        }\n        buffer = [];\n    };\n\n    // seek\n    patches.forEach(patch => {\n        const {path} = patch;\n        const parentPath = path.slice(0,-1);\n        const thisPath = checkPathIsArray(base, parentPath) ? parentPath : undefined;\n\n        // reset buffer whenever path changes\n        if(JSON.stringify(thisPath) !== JSON.stringify(currentPath)) {\n            flush();\n            currentPath = thisPath;\n        }\n\n        if(patch.value === nothing) {\n            patch = {...patch, value: undefined};\n        }\n        // ^ bug fix until https://github.com/immerjs/immer/issues/791\n\n        buffer.push(patch);\n    });\n\n    flush();\n\n    // output\n\n    return newPatches;\n};\n\n\n//\n// optimiseArray()\n//\n// accepts patches with a common path relating to an array\n// applies them, and optimises the patches required to produce\n// the same result by using 'move' patches\n//\n\nexport const optimiseArray = <B>(base: B[], patches: ImmerPatch[]): DendriformPatch[] => {\n\n    const newPatches: DendriformPatch[] = [];\n\n    // give unique id numbers to all values in base and patches for processing\n    let id = 0;\n    const valueToId = new Map<B, number>();\n    const idToValue = new Map<number, B>();\n\n    const addItem = (value: B): number => {\n        if(valueToId.has(value)) {\n            return valueToId.get(value) as number;\n        }\n        const newId = id++;\n        valueToId.set(value, newId);\n        idToValue.set(newId, value);\n        return newId;\n    };\n\n    // add items from base\n    const baseIds = base.map(addItem);\n    const baseIdSet = new Set(baseIds);\n\n    // add items from patches\n    let targetIds: number[] = [];\n    if(patches.length === 1 && patches[0].path.length === 0) {\n        // this is a top level replace, substitute element ids directly\n        const {value} = patches[0];\n        if(!Array.isArray(value)) return patches;\n        targetIds = value.map(addItem);\n\n    } else if(base.some(b => typeof b !== 'object')) {\n        // if any primitives are in the array, we cant reliably track by reference\n        // so skip the optimisation\n        return patches;\n\n    } else {\n        const replacedPatches = patches.map(patch => {\n            const {op, value, path} = patch;\n\n            if(op === 'remove' // if 'remove', no value exists\n                || (op === 'replace' && path.length === 1 && path[0] === 'length') // this is an array length change\n            ) {\n                return patch;\n            }\n\n            return {\n                ...patch,\n                value: addItem(value)\n            };\n        });\n\n        targetIds = applyPatches(baseIds, replacedPatches) as number[];\n    }\n\n    // ignoring newly added values\n    // look at each id in the target array\n    // and add a 'move' operation that will move each id into the correct position\n\n    const existingTargetIds = targetIds.filter(id => baseIdSet.has(id));\n    const wipIds = baseIds.slice(); // this array can be mutated as the sort progresses\n\n    existingTargetIds.forEach((targetId, index) => {\n        if(targetId !== wipIds[index]) {\n            const fromIndex = wipIds.indexOf(targetId);\n            newPatches.push({op: 'move', from: [fromIndex], path: [index]});\n            wipIds.splice(fromIndex, 1);\n            wipIds.splice(index, 0, targetId);\n        }\n    });\n\n    // after this sorting is done\n    // all the items to be removed will be collected at the end of the array\n    // and can be truncated off\n\n    if(existingTargetIds.length < baseIds.length) {\n        newPatches.push({op: 'replace', path: ['length'], value: existingTargetIds.length});\n    }\n\n    // finally, add new items into result\n\n    targetIds.forEach((id, index) => {\n        if(!baseIdSet.has(id)) {\n            const value = idToValue.get(id);\n            newPatches.push({op: 'add', path: [index], value});\n        }\n    });\n\n    return newPatches;\n};\n","import {applyPatches as immerApplyPatches} from 'immer';\nimport {getIn} from './traverse';\nimport type {Patch as ImmerPatch} from 'immer';\nimport type {DendriformPatch, Path} from './types';\n\nexport const applyPatches = <B,>(base: B, patches: DendriformPatch[]): B => {\n    patches.forEach(patch => {\n        if(patch.op === 'move') {\n            const patchFrom = patch.from as Path;\n            base = immerApplyPatches(base, [\n                {op: 'remove', path: patchFrom},\n                {op: 'add', path: patch.path, value: getIn(base, patchFrom)}\n            ]);\n        } else {\n            base = immerApplyPatches(base, [patch as ImmerPatch]);\n        }\n    });\n    return base;\n};\n"],"names":["BASIC","OBJECT","ARRAY","MAP","SET","cantAccess","thing","key","Error","String","getType","Map","Set","Array","isArray","Object","has","type","index","length","get","undefined","getIn","path","reduce","red","set","value","add","entries","from","clone","slice","create","zoomInPatches","patches","filter","patch","every","elem","map","zoomOutPatches","newPatch","concat","enablePatches","optimise","base","newPatches","lastResult","checkPathIsArray","pathString","JSON","stringify","currentPath","buffer","flush","baseAtPath","patchesAtPath","optimisedPatches","optimiseArray","zoomedOutPatches","forEach","parentPath","thisPath","nothing","push","id","valueToId","idToValue","addItem","newId","baseIds","baseIdSet","targetIds","some","b","replacedPatches","op","applyPatches","existingTargetIds","wipIds","targetId","fromIndex","indexOf","splice","patchFrom","immerApplyPatches"],"mappings":"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"}