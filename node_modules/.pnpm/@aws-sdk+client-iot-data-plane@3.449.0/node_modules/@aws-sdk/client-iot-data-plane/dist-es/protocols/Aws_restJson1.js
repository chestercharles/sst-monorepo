import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, LazyJsonString as __LazyJsonString, map, resolvedPath as __resolvedPath, take, withBaseException, } from "@smithy/smithy-client";
import { IoTDataPlaneServiceException as __BaseException } from "../models/IoTDataPlaneServiceException";
import { ConflictException, InternalFailureException, InvalidRequestException, MethodNotAllowedException, RequestEntityTooLargeException, ResourceNotFoundException, ServiceUnavailableException, ThrottlingException, UnauthorizedException, UnsupportedDocumentEncodingException, } from "../models/models_0";
export const se_DeleteThingShadowCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/things/{thingName}/shadow";
    resolvedPath = __resolvedPath(resolvedPath, input, "thingName", () => input.thingName, "{thingName}", false);
    const query = map({
        name: [, input.shadowName],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_GetRetainedMessageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/retainedMessage/{topic}";
    resolvedPath = __resolvedPath(resolvedPath, input, "topic", () => input.topic, "{topic}", false);
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
export const se_GetThingShadowCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/things/{thingName}/shadow";
    resolvedPath = __resolvedPath(resolvedPath, input, "thingName", () => input.thingName, "{thingName}", false);
    const query = map({
        name: [, input.shadowName],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListNamedShadowsForThingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/api/things/shadow/ListNamedShadowsForThing/{thingName}";
    resolvedPath = __resolvedPath(resolvedPath, input, "thingName", () => input.thingName, "{thingName}", false);
    const query = map({
        nextToken: [, input.nextToken],
        pageSize: [() => input.pageSize !== void 0, () => input.pageSize.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_ListRetainedMessagesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/retainedMessage";
    const query = map({
        nextToken: [, input.nextToken],
        maxResults: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
    });
    let body;
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_PublishCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "x-amz-mqtt5-user-properties": [
            () => isSerializableHeaderValue(input.userProperties),
            () => context.base64Encoder(Buffer.from(__LazyJsonString.fromObject(input.userProperties))),
        ],
        "x-amz-mqtt5-payload-format-indicator": input.payloadFormatIndicator,
        "x-amz-mqtt5-correlation-data": input.correlationData,
    });
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/topics/{topic}";
    resolvedPath = __resolvedPath(resolvedPath, input, "topic", () => input.topic, "{topic}", false);
    const query = map({
        qos: [() => input.qos !== void 0, () => input.qos.toString()],
        retain: [() => input.retain !== void 0, () => input.retain.toString()],
        contentType: [, input.contentType],
        responseTopic: [, input.responseTopic],
        messageExpiry: [() => input.messageExpiry !== void 0, () => input.messageExpiry.toString()],
    });
    let body;
    if (input.payload !== undefined) {
        body = input.payload;
    }
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const se_UpdateThingShadowCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/things/{thingName}/shadow";
    resolvedPath = __resolvedPath(resolvedPath, input, "thingName", () => input.thingName, "{thingName}", false);
    const query = map({
        name: [, input.shadowName],
    });
    let body;
    if (input.payload !== undefined) {
        body = input.payload;
    }
    return new __HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
export const de_DeleteThingShadowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteThingShadowCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.payload = data;
    return contents;
};
const de_DeleteThingShadowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotdataplane#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "UnsupportedDocumentEncodingException":
        case "com.amazonaws.iotdataplane#UnsupportedDocumentEncodingException":
            throw await de_UnsupportedDocumentEncodingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_GetRetainedMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetRetainedMessageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lastModifiedTime: __expectLong,
        payload: context.base64Decoder,
        qos: __expectInt32,
        topic: __expectString,
        userProperties: context.base64Decoder,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRetainedMessageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotdataplane#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_GetThingShadowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetThingShadowCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.payload = data;
    return contents;
};
const de_GetThingShadowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotdataplane#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "UnsupportedDocumentEncodingException":
        case "com.amazonaws.iotdataplane#UnsupportedDocumentEncodingException":
            throw await de_UnsupportedDocumentEncodingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListNamedShadowsForThingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListNamedShadowsForThingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        results: _json,
        timestamp: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListNamedShadowsForThingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotdataplane#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_ListRetainedMessagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListRetainedMessagesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        retainedTopics: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListRetainedMessagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_PublishCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PublishCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_PublishCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
export const de_UpdateThingShadowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateThingShadowCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.payload = data;
    return contents;
};
const de_UpdateThingShadowCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.iotdataplane#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalFailureException":
        case "com.amazonaws.iotdataplane#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotdataplane#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MethodNotAllowedException":
        case "com.amazonaws.iotdataplane#MethodNotAllowedException":
            throw await de_MethodNotAllowedExceptionRes(parsedOutput, context);
        case "RequestEntityTooLargeException":
        case "com.amazonaws.iotdataplane#RequestEntityTooLargeException":
            throw await de_RequestEntityTooLargeExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotdataplane#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotdataplane#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.iotdataplane#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "UnsupportedDocumentEncodingException":
        case "com.amazonaws.iotdataplane#UnsupportedDocumentEncodingException":
            throw await de_UnsupportedDocumentEncodingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MethodNotAllowedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MethodNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RequestEntityTooLargeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new RequestEntityTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnsupportedDocumentEncodingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedDocumentEncodingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
